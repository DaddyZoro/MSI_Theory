Model::init:  starts
   Model::ExponentialKernel::ExponentialKernel:  ... done
   Model::LennardJonesCollision::LennardJonesCollision:  ... done
   WELL: W1
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.001402, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 0.00351, elapsed time[sec] = 0
      1-th ROTOR:
      Model::HinderedRotor::HinderedRotor:  starts
         Model::HinderedRotor::_read:  starts
         Model::HinderedRotor::_read:  done, cpu time[sec] = 0.001575, elapsed time[sec] = 0
         Model::HinderedRotor::_init: WARNING: potential second derivative at the minimum is negative, assuming zero
         effective rotational constant[1/cm]  = 27.3382
         analytic  frequency at minimum[1/cm] = 0
         numerical frequency at minimum[1/cm] = 0
         minimum energy[kcal/mol]             = 0
         maximum energy[kcal/mol]             = 0
         maximum frequency[1/cm]              = 0
         ground energy [kcal/mol]             = 0
         highest energy level [kcal/mol]      = 19462.6
         number of levels                     = 999
         10 lowest excited states [kcal/mol] relative to the ground: 0.0782 0.0782 0.313 0.313 0.703 0.703 1.25 1.25 1.95
         Statistical Weight (*** - deep tunneling regime):
          T, K        Quantum             PG             PI  ***
           100        2.82615        2.82615        2.82615
           200        3.99678        3.99678        3.99678
           300        4.89503        4.89503        4.89503
           400         5.6523         5.6523         5.6523
           500        6.31946        6.31946        6.31946
           600        6.92262        6.92262        6.92262
           700        7.47729        7.47729        7.47729
           800        7.99355        7.99355        7.99355
           900        8.47844        8.47844        8.47844
          1000        8.93707        8.93707        8.93707
      Model::HinderedRotor::HinderedRotor:  done, cpu time[sec] = 2.03567, elapsed time[sec] = 0
      ground state energy, kcal/mol:   -90.2506
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.196372, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.057353, elapsed time[sec] = 0
         hindered rotors contribution starts
            Model::HinderedRotor::set:  starts
            Model::HinderedRotor::set:  done, cpu time[sec] = 0.000868, elapsed time[sec] = 0
         hindered rotors contribution done, cpu time[sec] = 0.55078, elapsed time[sec] = 0
         effective power exponent at 690.248 kcal/mol = 11.4574
      interpolating states number/density done, cpu time[sec] = 2.62909, elapsed time[sec] = 0
   Model::RRHO::RRHO:  done, cpu time[sec] = 4.68695, elapsed time[sec] = 0
   BIMOLECULAR: R
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         18.6633
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.00114, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.002203, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.00397, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.55015        9.55009        4.77506
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000425, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.001022, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.002286, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.009118, elapsed time[sec] = 0
   BIMOLECULAR: P1
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         19.7111        11.2504        7.16236
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.00037, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.0007, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.001426, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         27.4886        14.3446        9.42584
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000346, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.000653, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.001314, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.00431, elapsed time[sec] = 0
   BIMOLECULAR: P2
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000307, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.000568, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.001205, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:          9.3775        1.21307        1.07412
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000518, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.000741, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.001381, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.003924, elapsed time[sec] = 0
   BIMOLECULAR: P3
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000258, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.000491, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.001005, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.70353        1.21666        1.08111
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000218, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.000463, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.000946, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.003071, elapsed time[sec] = 0
   BIMOLECULAR: P4
   Model::Bimolecular::Bimolecular:  starts
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: linear
               rotational constant[1/cm]:         60.4042
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000197, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.000337, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.000669, elapsed time[sec] = 0
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         9.46633        1.30142        1.14413
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000159, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.000292, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.000633, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.002073, elapsed time[sec] = 0
   BIMOLECULAR: P5
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         6.45642       0.996004        0.86988
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 0.000212, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.000318, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.00059, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.00117, elapsed time[sec] = 0
   BIMOLECULAR: P6
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         5.24335        0.93381       0.927142
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 7.4e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 0.000129, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.000282, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.000603, elapsed time[sec] = 0
   BARRIER: B1
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.004228, elapsed time[sec] = 0
   BARRIER: B2
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.003012, elapsed time[sec] = 0
   BARRIER: B3
   Model::VarBarrier::VarBarrier:  starts
      1-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 2.7e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 5e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -22.6613
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.003808, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.001031, elapsed time[sec] = 0
            effective power exponent at 622.659 kcal/mol = 11.9685
         interpolating states number/density done, cpu time[sec] = 0.026664, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.026828, elapsed time[sec] = 0
      2-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -19.4076
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00175, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000517, elapsed time[sec] = 0
            effective power exponent at 619.406 kcal/mol = 11.9694
         interpolating states number/density done, cpu time[sec] = 0.017477, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017543, elapsed time[sec] = 0
      3-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.4e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.5e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -16.4142
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001446, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000507, elapsed time[sec] = 0
            effective power exponent at 616.412 kcal/mol = 11.9705
         interpolating states number/density done, cpu time[sec] = 0.017359, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.01744, elapsed time[sec] = 0
      4-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -13.678
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001427, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000503, elapsed time[sec] = 0
            effective power exponent at 613.676 kcal/mol = 11.9714
         interpolating states number/density done, cpu time[sec] = 0.017269, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017407, elapsed time[sec] = 0
      5-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -11.2049
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001436, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000514, elapsed time[sec] = 0
            effective power exponent at 611.203 kcal/mol = 11.9723
         interpolating states number/density done, cpu time[sec] = 0.017184, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017248, elapsed time[sec] = 0
      6-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 2.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 3.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -9.00049
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001422, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000499, elapsed time[sec] = 0
            effective power exponent at 608.998 kcal/mol = 11.9731
         interpolating states number/density done, cpu time[sec] = 0.017125, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017271, elapsed time[sec] = 0
      7-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -7.06773
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001416, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000502, elapsed time[sec] = 0
            effective power exponent at 607.066 kcal/mol = 11.9737
         interpolating states number/density done, cpu time[sec] = 0.017032, elapsed time[sec] = 1
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017096, elapsed time[sec] = 1
      8-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.40945
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001413, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000474, elapsed time[sec] = 0
            effective power exponent at 605.407 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.016934, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016998, elapsed time[sec] = 0
      9-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.05137
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001409, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000485, elapsed time[sec] = 0
            effective power exponent at 604.049 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.016977, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017042, elapsed time[sec] = 0
      10-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.98779
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001395, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000485, elapsed time[sec] = 0
            effective power exponent at 602.986 kcal/mol = 11.9739
         interpolating states number/density done, cpu time[sec] = 0.016861, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016998, elapsed time[sec] = 0
      11-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.23584
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001401, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000493, elapsed time[sec] = 0
            effective power exponent at 602.234 kcal/mol = 11.9738
         interpolating states number/density done, cpu time[sec] = 0.016839, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.0169, elapsed time[sec] = 0
      12-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.9e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.76409
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001402, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000482, elapsed time[sec] = 0
            effective power exponent at 601.762 kcal/mol = 11.9738
         interpolating states number/density done, cpu time[sec] = 0.01684, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016969, elapsed time[sec] = 0
      13-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.5e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.54966
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.0014, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000489, elapsed time[sec] = 0
            effective power exponent at 601.548 kcal/mol = 11.974
         interpolating states number/density done, cpu time[sec] = 0.016815, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016947, elapsed time[sec] = 0
      14-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.6097
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001385, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000507, elapsed time[sec] = 0
            effective power exponent at 601.608 kcal/mol = 11.9746
         interpolating states number/density done, cpu time[sec] = 0.016822, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016953, elapsed time[sec] = 0
      15-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -1.85844
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001401, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000496, elapsed time[sec] = 0
            effective power exponent at 601.856 kcal/mol = 11.9754
         interpolating states number/density done, cpu time[sec] = 0.016858, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016932, elapsed time[sec] = 0
      16-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.25586
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001406, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000486, elapsed time[sec] = 0
            effective power exponent at 602.254 kcal/mol = 11.9765
         interpolating states number/density done, cpu time[sec] = 0.016841, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016902, elapsed time[sec] = 0
      17-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 2e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -2.76478
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001399, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000473, elapsed time[sec] = 0
            effective power exponent at 602.763 kcal/mol = 11.978
         interpolating states number/density done, cpu time[sec] = 0.016819, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016956, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density ... done, cpu time[sec] = 1.35747, elapsed time[sec] = 1
      effective power exponent at 601.548 kcal/mol = 12.1579
      Constituent transition states partition functions
       T, K            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15           16           17          Min
        100  3.90851e+23  3.05117e+16  8.82979e+09      9323.49    0.0370366  5.69093e-07   3.4347e-11  8.25406e-15  8.99826e-18  4.31673e-20  9.95766e-22  9.42125e-23  3.25854e-23  4.49365e-23  1.59917e-22  1.20344e-21  1.58791e-20  3.25853e-23
        200  4.74443e+13  1.32405e+10  7.11895e+06      7303.75      14.5603    0.0571085  0.000444429  6.90781e-06   2.2911e-07  1.59579e-08   2.4425e-09  7.58546e-10  4.51416e-10  5.37634e-10  1.02897e-09  2.86948e-09  1.06195e-08  4.51416e-10
        300  3.42099e+10  1.45681e+08       960377      9718.32      153.373      3.80009     0.148805   0.00925157  0.000956035  0.000162449  4.68096e-05  2.16894e-05   1.5566e-05  1.78004e-05  2.79599e-05  5.66189e-05  0.000138903   1.5566e-05
        400  1.19567e+09  1.99087e+07       459672      14594.6      647.271      40.2374      3.52783     0.437917    0.0798183     0.021197   0.00839753   0.00476942   0.00377863   0.00426111   0.00610409     0.010613    0.0213749   0.00377863
        500  1.97909e+08  7.47751e+06       366526      23109.1      1904.36      205.421      29.1834         5.48      1.40343     0.487441     0.234093     0.150591     0.127051     0.142683     0.194232     0.309627     0.556692      0.12705
        600  7.12397e+07  4.65261e+06       376964      37555.9      4677.31      728.298      142.671      35.2855      11.3336      4.70886      2.57331      1.80142      1.58842      1.78363      2.35302      3.54995       5.9344      1.58826
        700  3.98103e+07  3.84656e+06       446495      61693.5      10320.9      2088.69      514.634      154.919      58.4907       27.623       16.563      12.3266      11.2316      12.6303      16.3181      23.7079      37.6861      11.2266
        800  2.91324e+07   3.7782e+06       574567       101491      21189.1      5220.36       1527.7      532.884      227.126      118.089      75.9278      59.1877      55.3113      62.3214      79.3361      112.156      171.842       55.239
        900  2.53862e+07  4.14125e+06       777326       166256      41247.9      11844.4       3962.9      1550.26      726.116      406.859      276.234      223.279      212.875      240.329      302.589      418.986       624.19      212.262
       1000  2.48831e+07  4.87863e+06  1.08405e+06       270280      77001.1      24998.7      9311.41      3992.88      2016.92      1199.89      850.963      708.129      686.138      776.027      968.725      1319.68      1922.94      682.556
       1100  2.64619e+07  6.03232e+06  1.53927e+06       435181       138864      49855.4      20277.3       9374.7      5037.66      3147.57      2313.41      1971.51      1935.84      2192.89      2718.59      3654.94      5230.94      1919.88
       1200  2.98122e+07   7.7076e+06   2.2076e+06       693199       243163      94955.1      41563.7      20461.6        11578      7535.95      5706.13      4960.29       4924.8      5586.19      6885.95      9156.96      12911.8      4866.74
       1300  3.50062e+07  1.00695e+07  3.18087e+06  1.09177e+06       414995       174026      81070.3      42093.4      24883.1      16766.7      13019.4      11509.1      11534.2      13097.8      16067.6      21170.3      29478.5      11353.6
       1400  4.23545e+07  1.33522e+07  4.58797e+06  1.69982e+06       692254       308624       151675        82438      50597.4      35121.3      27867.1      24990.6      25245.9      28695.1      35055.3      45823.5      63123.6      24749.4
       1500  5.23704e+07  1.78764e+07  6.60797e+06  2.61623e+06  1.13123e+06       531879       273831       154861      98197.4      69940.8      56542.8      51340.1        52223      59403.9      72307.7      93870.2       128107      50986.5
       1600  6.57789e+07  2.40742e+07  9.48734e+06  3.98125e+06  1.81429e+06       893760       479280       280652       183119       133402       109627       100625       102971       117205       142208       183501       248385       100130
       1700  8.35518e+07  3.25215e+07  1.35624e+07  5.99168e+06  2.86022e+06  1.46833e+06       816282       492930       329848       245128       204372       189391       194829       221878       268440       344531       462986       188722
       1800  1.06962e+08  4.39799e+07  1.92885e+07  8.92067e+06  4.43819e+06  2.36363e+06  1.35686e+06       842134       576329       435957       368170       344086       355613       405162       488927       624511       833818       343202
       1900  1.37654e+08  5.94494e+07   2.7277e+07  1.31437e+07  6.78613e+06  3.73501e+06   2.2067e+06  1.40364e+06       980144       753276       643497       605970       628863       716746       862915  1.09746e+06  1.45678e+06       604809
       2000   1.7774e+08  8.02353e+07  3.83428e+07  1.91721e+07  1.02349e+07  5.80288e+06  3.51851e+06  2.28817e+06  1.62706e+06  1.26845e+06  1.09485e+06  1.03803e+06  1.08124e+06  1.23271e+06  1.48096e+06  1.87612e+06  2.47736e+06  1.03647e+06

   Model::VarBarrier::VarBarrier:  done, cpu time[sec] = 1.68631, elapsed time[sec] = 2
   BARRIER: B4
   Model::VarBarrier::VarBarrier:  starts
      1-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.3e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 3.3e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -21.8779
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001406, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000478, elapsed time[sec] = 0
            effective power exponent at 621.876 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.018175, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.018272, elapsed time[sec] = 0
      2-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.8e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -18.8158
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001384, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000487, elapsed time[sec] = 0
            effective power exponent at 618.814 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.017078, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017145, elapsed time[sec] = 0
      3-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -16.0339
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001387, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000481, elapsed time[sec] = 0
            effective power exponent at 616.032 kcal/mol = 11.973
         interpolating states number/density done, cpu time[sec] = 0.016957, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017021, elapsed time[sec] = 0
      4-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -13.5322
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001381, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000497, elapsed time[sec] = 0
            effective power exponent at 613.53 kcal/mol = 11.9729
         interpolating states number/density done, cpu time[sec] = 0.01698, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.017044, elapsed time[sec] = 0
      5-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.2e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -11.3135
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001374, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00047, elapsed time[sec] = 0
            effective power exponent at 611.311 kcal/mol = 11.9725
         interpolating states number/density done, cpu time[sec] = 0.016611, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016682, elapsed time[sec] = 0
      6-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -9.39794
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001374, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00048, elapsed time[sec] = 0
            effective power exponent at 609.396 kcal/mol = 11.972
         interpolating states number/density done, cpu time[sec] = 0.016541, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016608, elapsed time[sec] = 0
      7-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -7.79112
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001365, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000485, elapsed time[sec] = 0
            effective power exponent at 607.789 kcal/mol = 11.9714
         interpolating states number/density done, cpu time[sec] = 0.016508, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016571, elapsed time[sec] = 0
      8-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -6.49595
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001357, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000496, elapsed time[sec] = 0
            effective power exponent at 606.494 kcal/mol = 11.9706
         interpolating states number/density done, cpu time[sec] = 0.016485, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016547, elapsed time[sec] = 0
      9-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 9e-06, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.5e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.53243
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001357, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000481, elapsed time[sec] = 0
            effective power exponent at 605.53 kcal/mol = 11.9698
         interpolating states number/density done, cpu time[sec] = 0.016435, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016498, elapsed time[sec] = 0
      10-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.86054
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001369, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000465, elapsed time[sec] = 0
            effective power exponent at 604.858 kcal/mol = 11.9691
         interpolating states number/density done, cpu time[sec] = 0.016413, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016476, elapsed time[sec] = 0
      11-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 9e-06, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.7e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.47456
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00136, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000471, elapsed time[sec] = 0
            effective power exponent at 604.472 kcal/mol = 11.9684
         interpolating states number/density done, cpu time[sec] = 0.016377, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016442, elapsed time[sec] = 0
      12-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.40594
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001356, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.00048, elapsed time[sec] = 0
            effective power exponent at 604.404 kcal/mol = 11.9683
         interpolating states number/density done, cpu time[sec] = 0.016443, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016509, elapsed time[sec] = 0
      13-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.57463
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001352, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000453, elapsed time[sec] = 0
            effective power exponent at 604.572 kcal/mol = 11.9685
         interpolating states number/density done, cpu time[sec] = 0.016363, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016426, elapsed time[sec] = 0
      14-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -4.93202
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001358, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000467, elapsed time[sec] = 0
            effective power exponent at 604.93 kcal/mol = 11.9692
         interpolating states number/density done, cpu time[sec] = 0.016274, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016339, elapsed time[sec] = 0
      15-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 9e-06, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 1.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -5.43522
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.00136, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000452, elapsed time[sec] = 0
            effective power exponent at 605.433 kcal/mol = 11.9702
         interpolating states number/density done, cpu time[sec] = 0.016371, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016436, elapsed time[sec] = 0
      16-th RRHO:
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 2.6e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   -6.04421
         interpolating states number/density starts
            core state contribution ... done, cpu time[sec] = 0.001364, elapsed time[sec] = 0
            vibrational modes contribution ... done, cpu time[sec] = 0.000489, elapsed time[sec] = 0
            effective power exponent at 606.042 kcal/mol = 11.9715
         interpolating states number/density done, cpu time[sec] = 0.016335, elapsed time[sec] = 0
      Model::RRHO::RRHO:  done, cpu time[sec] = 0.016411, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      interpolating states number/density ... done, cpu time[sec] = 1.51768, elapsed time[sec] = 2
      effective power exponent at 604.404 kcal/mol = 12.2165
      Constituent transition states partition functions
       T, K            1            2            3            4            5            6            7            8            9           10           11           12           13           14           15           16          Min
        100  1.11763e+12       223936     0.185945  6.36018e-07  9.07387e-12  5.96093e-16  1.85463e-19  2.77448e-22  2.20277e-24  7.60156e-26  1.10796e-26  7.98346e-27   1.8962e-26  1.16602e-25  1.49342e-24  3.26249e-23  7.98345e-27
        200  9.38289e+07      39693.5      34.8125    0.0627104  0.000232989  1.87016e-06  3.28565e-08  1.27135e-09  1.13643e-10  2.12422e-11  8.18303e-12   7.0253e-12  1.09568e-11  2.75644e-11  1.00242e-10  4.77296e-10  7.02523e-12
        300  6.32003e+06      33876.1      298.673      4.28808     0.100497   0.00396007  0.000264757  3.01283e-05  6.01963e-06  1.97624e-06  1.05568e-06  9.66276e-07  1.31928e-06  2.48671e-06  6.00912e-06  1.74325e-05  9.65923e-07
        400  2.16563e+06      41250.6      1150.14      46.4593      2.72399     0.236928    0.0308063    0.0060002   0.00179162  0.000780535   0.00049258  0.000467839  0.000601019  0.000987244    0.0019595   0.00447307  0.000466779
        500   1.4162e+06      57738.1      3210.72      241.013      24.4602      3.41597     0.661137     0.177638    0.0675118    0.0348961    0.0243981    0.0237742     0.029557    0.0448976    0.0795572     0.158033    0.0236197
        600  1.27589e+06      86435.1      7616.29      863.909      126.318      24.1718      6.09496      2.02863     0.905643     0.525046     0.393651     0.391048      0.47677     0.689237      1.13548      2.06149     0.386115
        700  1.37387e+06       133833      16387.5      2496.35      473.671      113.476      34.5536      13.3988      6.71107      4.22492      3.33259       3.3607      4.04622      5.65489      8.85794      15.1051      3.29464
        800   1.6448e+06       210487      32996.7      6271.64      1446.87      410.222      143.881      62.5602      34.1598      22.8806      18.7569      19.1427      22.8487      31.1607      47.0425      76.6085      18.6302
        900  2.10236e+06       332770      63236.1      14279.8      3835.57      1239.79      485.378      230.694      134.715      94.6987      80.0083      82.4454      97.7846      130.906      192.133      302.035       79.687
       1000  2.80018e+06       525557       116524      30209.5      9165.51      3290.47      1406.72      717.952      442.392      323.236      279.779      290.578      342.963      452.477      649.485      992.852      279.107
       1100  3.82756e+06       826062       207829      60337.4      20227.9      7914.04      3636.15       1967.2      1266.62      955.178      843.287      881.527      1036.38      1351.23       1904.8      2846.42      842.065
       1200  5.31607e+06  1.28922e+06       360457       115019      41910.5      17617.3      8595.88      4882.09      3260.68      2524.49      2265.75      2381.29      2790.51      3602.71      5002.98      7336.45      2263.75
       1300  7.45235e+06  1.99508e+06       610021       210889      82466.4      36839.3      18913.9      11193.7      7711.33      6104.52      5555.43      5865.21      6854.11      8775.81        12033      17366.4       5552.4
       1400  1.04964e+07  3.05894e+06  1.01001e+06       374033       155407      73145.9      39232.3        24053        17016      13729.2      12643.2      13399.5        15621      19858.2      26933.7      38344.1      12638.8
       1500  1.48064e+07  4.64495e+06  1.63947e+06       644514       282268       139018      77446.4      48958.3      35441.2      29070.2      27045.8      28757.7      33454.1      42264.5      56783.4      79886.7      27039.5
       1600  2.08709e+07  6.98426e+06  2.61358e+06  1.08269e+06       496566       254476       146559      95166.5      70292.7      58492.2      54905.7        58546      67977.4      85409.9       113800       158446      54895.8
       1700  2.93513e+07   1.0399e+07  4.09779e+06  1.77794e+06       849385       450846       267391       177789       133674       112652       106575       113919       132044       165098       218363       301245       106556
       1800  4.11358e+07  1.53337e+07   6.3268e+06  2.86053e+06  1.41712e+06       776084       472475       320840       245068       208865       198969       213137       246660       307062       403463       552054       198924
       1900  5.74084e+07   2.2396e+07  9.62961e+06   4.5176e+06  2.31206e+06  1.30218e+06       811539       561582       435059       374536       358996       385281       445242       552092       721140       979485       358875
       2000  7.97366e+07  3.24089e+07  1.44623e+07  7.01437e+06  3.69673e+06  2.13529e+06  1.35912e+06       956627       750585       652033       628440       675575       779687       963344   1.2516e+06   1.6887e+06       628120

   Model::VarBarrier::VarBarrier:  done, cpu time[sec] = 1.81356, elapsed time[sec] = 2
   BARRIER: B5
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::RigidRotor::RigidRotor:  starts
         Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 1.2e-05, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 3.8e-05, elapsed time[sec] = 0
      Model::EckartTunnel::EckartTunnel:  ... done
      ground state energy, kcal/mol:   -0.195851
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.001506, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.000534, elapsed time[sec] = 0
         tunneling contribution ... done, cpu time[sec] = 7.23082, elapsed time[sec] = 7
         effective power exponent at 669.903 kcal/mol = 13.426
      interpolating states number/density done, cpu time[sec] = 7.25003, elapsed time[sec] = 7
   Model::RRHO::RRHO:  done, cpu time[sec] = 7.25014, elapsed time[sec] = 7
   BARRIER: B6
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000962, elapsed time[sec] = 0
   BARRIER: B7
   Model::ReadSpecies::ReadSpecies: ... done, cpu time[sec] = 0.000902, elapsed time[sec] = 0
   BIMOLECULAR: P7
   Model::Bimolecular::Bimolecular:  starts
      Model::AtomicFragment::AtomicFragment:  ... done
      Model::RRHO::RRHO:  starts
         Model::new_core:  starts
            Model::RigidRotor::RigidRotor:  starts
               molecular geometry will be used to estimate rotational constants
               rotational configuration: nonlinear
               rotational constants[1/cm]:         5.47873        5.47873        5.47873
            Model::RigidRotor::RigidRotor:  done, cpu time[sec] = 2.5e-05, elapsed time[sec] = 0
         Model::new_core:  done, cpu time[sec] = 3.3e-05, elapsed time[sec] = 0
         ground state energy, kcal/mol:   0
      Model::RRHO::RRHO:  done, cpu time[sec] = 6.4e-05, elapsed time[sec] = 0
   Model::Bimolecular::Bimolecular:  done, cpu time[sec] = 0.000109, elapsed time[sec] = 0
   BARRIER: B8
   Model::RRHO::RRHO:  starts
      Model::new_core:  starts
         Model::PhaseSpaceTheory::PhaseSpaceTheory:  starts
            molecular geometry will be used to estimate rotational constants
            rotational configuration: nonlinear
            rotational constants[1/cm]:         5.47873        5.47873        5.47873
            TST level: E
         Model::PhaseSpaceTheory::PhaseSpaceTheory:  done, cpu time[sec] = 3.6e-05, elapsed time[sec] = 0
      Model::new_core:  done, cpu time[sec] = 5.6e-05, elapsed time[sec] = 0
      ground state energy, kcal/mol:   47.9656
      interpolating states number/density starts
         core state contribution ... done, cpu time[sec] = 0.002992, elapsed time[sec] = 0
         vibrational modes contribution ... done, cpu time[sec] = 0.000336, elapsed time[sec] = 0
         effective power exponent at 552.034 kcal/mol = 10.6123
      interpolating states number/density done, cpu time[sec] = 0.015836, elapsed time[sec] = 0
   Model::RRHO::RRHO:  done, cpu time[sec] = 0.015932, elapsed time[sec] = 0
   checking input ... done
   setting connectivity ... done
   checking connectivity ... done
   setting dissociation limit ... done
   setting maximum barrier height ... done
   partition functions (relative to the ground level, units - 1/cm3):
     T\Q           W1           OH          CH3          CH2          H2O           H2     cis-HCOH           H2   trans-HCOH           H2         H2CO            H        CH2OH            H         CH3O            o          CH4           B1           B2           B3           B4           B5           B6           B7           B8
     100  1.97336e+28  1.11806e+26  1.79604e+26   1.2706e+26  1.20995e+26  3.09408e+23  9.07788e+27  3.09408e+23  8.88203e+27   2.8128e+23    4.226e+27  3.80284e+23  1.41451e+28  3.80284e+23  1.04337e+28  1.20275e+25  8.05078e+25  1.02816e+30  3.90845e+30  1.47525e+35  6.97811e+37 5.12326e+128  6.66948e+29  2.86822e+29  6.30386e+29
     200  2.23564e+29  7.62333e+26  1.46726e+27  1.01653e+27  9.67966e+26  1.75028e+24  7.26953e+28  1.75028e+24  7.11008e+28  1.59116e+24  3.38185e+28  1.07561e+24  1.21889e+29  1.07561e+24  8.41759e+28   3.4019e+25  6.44206e+26  2.65947e+31  6.23677e+31  1.08314e+30  2.15615e+30  1.52798e+59  8.88053e+30  3.66779e+30  8.00719e+30
     300  9.41744e+29   2.3228e+27   5.2604e+27  3.43512e+27  3.26835e+27   4.8232e+24  2.48522e+29   4.8232e+24  2.42385e+29  4.38473e+24  1.14827e+29  1.97601e+24  4.86817e+29  1.97601e+24  2.97918e+29   6.2497e+25  2.18681e+27  1.82852e+32  2.59538e+32  1.44208e+30  1.73256e+30  1.89702e+39  4.41749e+31  1.66476e+31  3.56174e+31
     400  2.74251e+30  5.05886e+27  1.36172e+28  8.18855e+27  7.76803e+27  9.90107e+24  6.13453e+29  9.90107e+24  5.94872e+29  9.00097e+24   2.7863e+29  3.04227e+24   1.4458e+30  3.04227e+24  7.82149e+29  9.62204e+25  5.31893e+27  7.43446e+32  6.76087e+32   3.1193e+30  3.38436e+30  5.81364e+32  1.53178e+32  5.25536e+31  1.04946e+32
     500   6.7088e+30   9.1848e+27   2.9582e+28  1.61907e+28  1.52765e+28  1.72965e+25  1.28796e+30  1.72965e+25  1.23988e+30  1.57241e+25    5.706e+29   4.2517e+24  3.66252e+30   4.2517e+24  1.77798e+30  1.34472e+26  1.09838e+28  2.27531e+33  1.40935e+33  6.99392e+30  7.25794e+30    2.174e+31  4.38422e+32  1.38727e+32   2.5148e+32
     600  1.48929e+31  1.48864e+28  5.75744e+28  2.85247e+28  2.67121e+28  2.72848e+25  2.45857e+30  2.72848e+25  2.34862e+30  2.48044e+25  1.05862e+30  5.58901e+24  8.37682e+30  5.58901e+24  3.71377e+30  1.76768e+26  2.06944e+28  5.83137e+33  2.59752e+33  1.53859e+31   1.5531e+31  1.56572e+31  1.10962e+33  3.28769e+32  5.35043e+32
     700  3.10526e+31  2.23336e+28  1.03869e+29  4.64933e+28  4.31306e+28  4.01168e+25  4.40321e+30  4.01168e+25   4.1744e+30  3.64698e+25  1.84194e+30  7.04296e+24  1.77967e+31  7.04296e+24  7.32198e+30  2.22753e+26  3.68096e+28  1.32406e+34  4.44573e+33  3.28489e+31  3.24865e+31  2.00151e+31  2.57036e+33  7.23031e+32   1.0547e+33
     800  6.18672e+31  3.16898e+28  1.77211e+29  7.16682e+28  6.57497e+28  5.60287e+25  7.52441e+30  5.60287e+25  7.08144e+30  5.09352e+25  3.06214e+30  8.60484e+24  3.57037e+31  8.60484e+24  1.38193e+31  2.72152e+26  6.29237e+28  2.75326e+34  7.26034e+33  6.79296e+31  6.61031e+31  3.04639e+31  5.55986e+33  1.50225e+33   1.9708e+33
     900  1.18917e+32  4.31186e+28  2.89608e+29  1.05938e+29  9.59741e+28  7.52507e+25  1.23926e+31  7.52507e+25  1.15823e+31  6.84097e+25  4.91733e+30  1.02677e+25  6.83675e+31  1.02677e+25  2.51777e+31  3.24744e+26   1.0442e+29  5.35429e+34  1.14977e+34  1.36146e+32  1.30791e+32  4.96309e+31  1.13781e+34  2.98133e+33  3.53766e+33
    1000  2.21835e+32  5.67887e+28  4.57314e+29  1.51557e+29  1.35425e+29  9.80136e+25  1.98016e+31  9.80136e+25  1.83853e+31  8.91033e+25  7.67995e+30  1.20256e+25  1.25901e+32  1.20256e+25  4.45239e+31  3.80344e+26  1.69248e+29  9.87598e+34  1.78334e+34  2.64867e+32  2.51886e+32  8.31132e+31  2.22341e+34  5.69316e+33   6.1512e+33
    1100  4.03237e+32  7.28764e+28   7.0205e+29  2.11192e+29  1.85967e+29  1.24554e+26  3.08377e+31  1.24554e+26  2.84544e+31  1.13231e+26  1.17192e+31  1.38738e+25  2.24222e+32  1.38738e+25  7.67157e+31  4.38799e+26  2.68985e+29  1.74488e+35  2.72616e+34  5.01139e+32  4.72857e+32  1.40422e+32  4.17722e+34  1.05163e+34  1.04174e+34
    1200  7.16278e+32  9.15662e+28  1.05248e+30  2.87967e+29  2.49743e+29  1.55119e+26  4.69659e+31  1.55119e+26  4.30822e+31  1.41017e+26  1.75283e+31  1.58081e+25  3.87856e+32  1.58081e+25  1.29162e+32  4.99976e+26  4.20283e+29   2.9743e+35  4.12339e+34  9.23956e+32  8.66602e+32  2.37075e+32  7.58498e+34  1.88656e+34   1.7249e+34
    1300  1.24607e+33  1.13052e+29    1.546e+30  3.85517e+29  3.29195e+29  1.89964e+26  7.01353e+31  1.89964e+26  6.39799e+31  1.72694e+26  2.57585e+31  1.78247e+25  6.53851e+32  1.78247e+25  2.12965e+32  5.63757e+26  6.46803e+29  4.91797e+35  6.18545e+34  1.66316e+33  1.55283e+33  3.97869e+32  1.33665e+35   3.2971e+34  2.80008e+34
    1400  2.12665e+33  1.37535e+29  2.23088e+30  5.08038e+29  4.27102e+29  2.29356e+26  1.02907e+32  2.29356e+26  9.33855e+31  2.08506e+26  3.72593e+31  1.99205e+25   1.0772e+33  1.99205e+25  3.44505e+32  6.30041e+26  9.81784e+29  7.92117e+35  9.21487e+34  2.92799e+33  2.72427e+33  6.61788e+32  2.29366e+35  5.62797e+34   4.4655e+34
    1500  3.56581e+33  1.65225e+29  3.16878e+30  6.60342e+29  5.46603e+29  2.73576e+26  1.48608e+32  2.73576e+26  1.34194e+32  2.48705e+26   5.3127e+31  2.20925e+25  1.73819e+33  2.20925e+25  5.47579e+32  6.98737e+26  1.47141e+30  1.24691e+36  1.36433e+35  5.04957e+33  4.68567e+33   1.0892e+33  3.84301e+35  9.40249e+34  7.00752e+34
    1600  5.88104e+33  1.96339e+29  4.43778e+30  8.47909e+29  6.91231e+29  3.22912e+26  2.11513e+32  3.22912e+26  1.90113e+32  2.93556e+26  7.47631e+31  2.43382e+25  2.75236e+33  2.43382e+25  8.56291e+32  7.69763e+26  2.17922e+30  1.92344e+36  2.00816e+35  8.54299e+33  7.91062e+33  1.77228e+33   6.3014e+35  1.54022e+35  1.08347e+35
    1700  9.55077e+33  2.31102e+29  6.13586e+30  1.07695e+30  8.64943e+29  3.77663e+26  2.97068e+32  3.77663e+26  2.65843e+32   3.4333e+26  1.03942e+32  2.66552e+25  4.28362e+33  2.66552e+25  1.31889e+33  8.43044e+26  3.19172e+30  2.91389e+36  2.93879e+35  1.41969e+34  1.31235e+34  2.84985e+33  1.01312e+36  2.47765e+35  1.65232e+35
    1800  1.52866e+34  2.69743e+29  8.38503e+30  1.35448e+30  1.07215e+30   4.3814e+26  4.12136e+32   4.3814e+26  3.67296e+32  3.98309e+26  1.42893e+32  2.90413e+25  6.56161e+33  2.90413e+25  2.00279e+33  9.18514e+26  4.62568e+30  4.34318e+36  4.27578e+35  2.32007e+34  2.14159e+34  4.52832e+33  1.59976e+36  3.91921e+35  2.48767e+35
    1900  2.41341e+34    3.125e+29   1.1336e+31  1.68836e+30  1.31777e+30  5.04659e+26  5.65308e+32  5.04659e+26  5.01844e+32  4.58781e+26  1.94391e+32  3.14948e+25  9.90424e+33  3.14948e+25  3.00115e+33   9.9611e+26  6.63727e+30   6.3789e+36  6.18455e+35  3.73235e+34  3.44092e+34  7.11085e+33   2.4845e+36  6.10341e+35  3.70051e+35
    2000  3.76117e+34  3.59614e+29  1.51739e+31  2.08737e+30  1.60722e+30  5.77547e+26  7.67243e+32  5.77547e+26  6.78607e+32  5.25042e+26  2.61867e+32  3.40136e+25  1.47468e+34  3.40136e+25  4.44133e+33  1.07578e+27  9.43368e+30  9.24376e+36  8.89218e+35   5.9162e+34  5.44811e+34  1.10376e+34  3.79973e+36  9.36743e+35  5.44256e+35
   partition functions (relative to 0 kcal/mol, units - 1/cm3):
     T\Q           W1           B1           B2           B3           B4           B5           B6           B7           B8
     100 3.42725e+225  1.02816e+30  1.82422e+29  3.59409e+38  2.97017e+47 1.37269e+129  2.66912e+20     0.948966  9.38107e-76
     200 9.31689e+127  2.65947e+31   1.3474e+31   5.3462e+31   1.4067e+35   2.5011e+59  1.77655e+26  6.67151e+15   3.0889e-22
     300  5.25428e+95  1.82852e+32  9.34454e+31  1.94043e+31  2.80781e+33  2.63481e+39  3.25537e+28  2.48065e+21   0.00040664
     400  5.59864e+79  7.43446e+32  3.14247e+32  2.19148e+31  8.64445e+32  7.43797e+32  6.85118e+29  2.24136e+24       651820
     500  1.88188e+70  2.27531e+33   7.6354e+32   3.3271e+31  6.11818e+32  2.64767e+31  5.78559e+30  1.76233e+26   2.7229e+11
     600  1.11242e+64  5.83137e+33  1.55861e+33  5.64385e+31  6.25229e+32  1.84524e+31  3.01222e+31  4.01325e+27  1.80785e+15
     700  4.66878e+59  1.32406e+34  2.86953e+33  1.00078e+32  7.71401e+32  2.30412e+31  1.16805e+32    4.443e+28  1.11633e+18
     800   2.7953e+56  2.75326e+34  4.94984e+33  1.80053e+32  1.05646e+33  3.44579e+31  3.71834e+32   3.1024e+29  1.55319e+20
     900  9.78971e+53  5.35429e+34  8.17953e+33  3.23822e+32  1.53628e+33  5.53746e+31  1.02773e+33  1.58057e+30  7.96585e+21
    1000  1.17491e+52  9.87598e+34  1.31263e+34  5.77697e+32  2.31264e+33  9.17219e+31  2.55416e+33  6.41678e+30  2.02406e+23
    1100  3.43911e+50  1.74488e+35  2.06328e+34  1.01822e+33  3.54893e+33  1.53585e+32  5.84183e+33    2.197e+31  3.07609e+24
    1200  1.95761e+49   2.9743e+35  3.19407e+34  1.76961e+33  5.49845e+33  2.57368e+32  1.24971e+34  6.59133e+31  3.17068e+25
    1300  1.85281e+48  4.91797e+35  4.88644e+34  3.03006e+33  8.54709e+33  4.29205e+32  2.52998e+34  1.77997e+32   2.4184e+26
    1400  2.60764e+47  7.92117e+35  7.40326e+34  5.11068e+33  1.32752e+34  7.10056e+32  4.88948e+34  4.41176e+32  1.45279e+27
    1500  5.02891e+46  1.24691e+36  1.11222e+35  8.49252e+33  2.05451e+34  1.16317e+33  9.08149e+34  1.01832e+33  7.19572e+27
    1600  1.25008e+46  1.92344e+36  1.65812e+35  1.39085e+34  3.16247e+34  1.88489e+33  1.62959e+35   2.2134e+33  3.04163e+28
    1700  3.82275e+45  2.91389e+36  2.45402e+35  2.24601e+34  4.83576e+34  3.01995e+33  2.83696e+35  4.56984e+33  1.12662e+29
    1800  1.38699e+45  4.34318e+36  3.60641e+35  3.57809e+34  7.33977e+34  4.78317e+33  4.80794e+35  9.02403e+33  3.73294e+29
    1900  5.80323e+44   6.3789e+36  5.26331e+35  5.62641e+34  1.10527e+35  7.48943e+33  7.95467e+35  1.71386e+34  1.12469e+30
    2000  2.73722e+44  9.24376e+36   7.6289e+35  8.73733e+34  1.65081e+35  1.15951e+34  1.28785e+36  3.14487e+34  3.12202e+30
   tunneling partition function correction factors & high pressure effective energy shifts (D), kcal/mol:
     T\B           B1            D           B2            D           B3            D           B4            D           B5            D           B6            D           B7            D           B8            D
     100            1           -0            1           -0  5.85098e+06     -3.09647  2.80256e+09      -4.3229 4.82099e+100     -46.0694            1           -0            1           -0            1           -0
     200            1           -0            1           -0      5.22548    -0.657183      10.5281    -0.935588  1.78989e+30     -27.6854            1           -0            1           -0            1           -0
     300            1           -0            1           -0      1.84823    -0.366176      2.24851    -0.483048  6.34587e+09     -13.4559            1           -0            1           -0            1           -0
     400            1           -0            1           -0      1.38767    -0.260424      1.52963    -0.337842      744.397     -5.25618            1           -0            1           -0            1           -0
     500            1           -0            1           -0      1.22677    -0.203078      1.30161    -0.261913      12.1512     -2.48144            1           -0            1           -0            1           -0
     600            1           -0            1           -0      1.14989     -0.16653      1.19686    -0.214262       4.1017     -1.68284            1           -0            1           -0            1           -0
     700            1           -0            1           -0      1.10671    -0.141037       1.1392    -0.181292      2.57296      -1.3146            1           -0            1           -0            1           -0
     800            1           -0            1           -0      1.07989    -0.122182      1.10381    -0.157022      1.98861     -1.09286            1           -0            1           -0            1           -0
     900            1           -0            1           -0      1.06204    -0.107644      1.08044    -0.138367      1.69225    -0.940844            1           -0            1           -0            1           -0
    1000            1           -0            1           -0      1.04954   -0.0960815      1.06415     -0.12356      1.51736    -0.828601            1           -0            1           -0            1           -0
    1100            1           -0            1           -0      1.04044   -0.0866584      1.05234     -0.11151      1.40393     -0.74163            1           -0            1           -0            1           -0
    1200            1           -0            1           -0      1.03361   -0.0788278      1.04349    -0.101508      1.32547    -0.671912            1           -0            1           -0            1           -0
    1300            1           -0            1           -0      1.02835   -0.0722153      1.03668   -0.0930686      1.26859    -0.614589            1           -0            1           -0            1           -0
    1400            1           -0            1           -0      1.02421    -0.066556      1.03134   -0.0858502      1.22585    -0.566517            1           -0            1           -0            1           -0
    1500            1           -0            1           -0       1.0209   -0.0616567      1.02707   -0.0796042      1.19281    -0.525558            1           -0            1           -0            1           -0
    1600            1           -0            1           -0      1.01821   -0.0573734      1.02359   -0.0741457      1.16669      -0.4902            1           -0            1           -0            1           -0
    1700            1           -0            1           -0      1.01599   -0.0535964      1.02074    -0.069334      1.14565    -0.459342            1           -0            1           -0            1           -0
    1800            1           -0            1           -0      1.01414   -0.0502407      1.01836   -0.0650602      1.12842    -0.432157            1           -0            1           -0            1           -0
    1900            1           -0            1           -0      1.01259   -0.0472394      1.01635   -0.0612384      1.11412    -0.408014            1           -0            1           -0            1           -0
    2000            1           -0            1           -0      1.01127    -0.044539      1.01465   -0.0578005      1.10211     -0.38642            1           -0            1           -0            1           -0
Model::init:  done, cpu time[sec] = 15.633, elapsed time[sec] = 11
rate calculation starts
   MasterEquation::set:  starts
      Temperature      = 300 K
      Energy reference = 25117 1/cm
      Energy step      = 50 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 6.1e-05
         W1 Well: collisional kernel bandwidth = 60
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.005084
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.004462
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.6088
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.88081
         W1 Well: minimal relaxation eigenvalue = 0.0968407
         W1 Well: maximal relaxation eigenvalue = 0.989621
         W1 Well:       grid size = 575
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3632 1/cm
         B1 Barrier:        grid size = 503
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -32 1/cm
         B2 Barrier:        grid size = 499
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 167 1/cm
         B3 Barrier:        grid size = 595
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4632 1/cm
         B4 Barrier:        grid size = 626
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6182 1/cm
         B5 Barrier: nonpositive number of states at -23133 1/cm => truncating
         B5 Barrier:        grid size = 965
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23132 1/cm
         B6 Barrier:        grid size = 473
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1467 1/cm
         B7 Barrier:        grid size = 408
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4717 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16767 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.99157, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 575
      MasterEquation::Barrier::truncate: real weight = 2.2614e+57
      MasterEquation::Barrier::truncate: effective weight = 5.15183e+53
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 575
      MasterEquation::Barrier::truncate: real weight = 3.27226e+59
      MasterEquation::Barrier::truncate: effective weight = 7.45324e+55
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 575
      MasterEquation::Barrier::truncate: real weight = 3.07063e+65
      MasterEquation::Barrier::truncate: effective weight = 3.50467e+55
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3632  -3632    4e+09 3.42e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -32 2.86e+14
         B2    168  3.9e+13
         B3  -3632 9.11e+12
         B4  -3632 1.19e+13
         B5  -3632 1.22e+12
         B6   1468 1.56e+14
         B7   4718 1.22e+13
         B8  16767 9.32e+09
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.84e-06  5.56e-06  5.65e-15  2.41e-18     6e-56    0.0317  2.56e+05  1.44e+31
          R  5.44e+05         1      3.02  3.07e-09  1.31e-12  3.27e-50  1.72e+04  1.39e+11  7.83e+36
         P1   1.8e+05     0.331         1  1.02e-09  4.34e-13  1.08e-50   5.7e+03  4.61e+10  2.59e+36
         P2  1.77e+14  3.25e+08  9.83e+08         1  0.000427  1.06e-41  5.61e+12  4.53e+19  2.55e+45
         P3  4.14e+17  7.62e+11   2.3e+12  2.34e+03         1  2.49e-38  1.31e+16  1.06e+23  5.97e+48
         P4  1.67e+55  3.06e+49  9.25e+49  9.41e+40  4.02e+37         1  5.28e+53  4.26e+60   2.4e+86
         P5      31.6   5.8e-05  0.000175  1.78e-13  7.62e-17  1.89e-54         1  8.08e+06  4.54e+32
         P6  3.91e-06  7.18e-12  2.17e-11  2.21e-20  9.42e-24  2.34e-61  1.24e-07         1  5.62e+25
         P7  6.95e-32  1.28e-37  3.86e-37  3.92e-46  1.68e-49  4.17e-87   2.2e-33  1.78e-26         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   4.3e+40   1.3e+41  1.32e+32  5.64e+28   1.4e-09  7.41e+44  5.99e+51  3.37e+77
          R  2.33e-41         1      3.02  3.07e-09  1.31e-12  3.27e-50  1.72e+04  1.39e+11  7.83e+36
         P1  7.69e-42     0.331         1  1.02e-09  4.34e-13  1.08e-50   5.7e+03  4.61e+10  2.59e+36
         P2  7.56e-33  3.25e+08  9.83e+08         1  0.000427  1.06e-41  5.61e+12  4.53e+19  2.55e+45
         P3  1.77e-29  7.62e+11   2.3e+12  2.34e+03         1  2.49e-38  1.31e+16  1.06e+23  5.97e+48
         P4  7.12e+08  3.06e+49  9.25e+49  9.41e+40  4.02e+37         1  5.28e+53  4.26e+60   2.4e+86
         P5  1.35e-45   5.8e-05  0.000175  1.78e-13  7.62e-17  1.89e-54         1  8.08e+06  4.54e+32
         P6  1.67e-52  7.18e-12  2.17e-11  2.21e-20  9.42e-24  2.34e-61  1.24e-07         1  5.62e+25
         P7  2.97e-78  1.28e-37  3.86e-37  3.92e-46  1.68e-49  4.17e-87   2.2e-33  1.78e-26         1
   MasterEquation::set:  done, cpu time[sec] = 5.00671, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.71313e+08
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.673222, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.24969, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5317.35      726.019      169.686      221.543      22.7229      2897.59      226.555     0.173427
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081255, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006142, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.08794, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.06874e-07  1.06874e-07  1.27976e-09
      low eigenvalue method done, cpu time[sec] = 0.088251, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.07e-07  1.28e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.12e-08  1.28e-09         1
         *Z       ---       ---  5.12e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.27976e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.97641e-60  3.51681e-60  1.39463e-61   1.7861e-60  4.30442e-62  8.83088e-64  2.77289e-72     2.85e-95

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.36772, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.41394e+09
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.673309, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.41579, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1772.45      242.006      56.5619      73.8475      7.57431      965.863      75.5184     0.057809
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081118, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006145, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.087796, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    3.644e-08    3.644e-08  3.09019e-10
      low eigenvalue method done, cpu time[sec] = 0.088112, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.64e-08  3.09e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.77e-09  3.09e-10         1
         *Z       ---       ---  5.12e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.09019e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.86551e-60   8.2002e-61  2.70853e-62  2.88797e-61  7.29574e-63  6.25183e-64  2.79735e-72 -9.64544e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.4727, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         2.35656e+09
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.674135, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.44813, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1063.47      145.204      33.9371      44.3085      4.54459      579.518      45.3111    0.0346854
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081166, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006138, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.087857, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.20608e-08  2.20608e-08  1.47724e-10
      low eigenvalue method done, cpu time[sec] = 0.088181, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.21e-08  1.48e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.27e-09  1.48e-10         1
         *Z       ---       ---  5.12e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.47724e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.22275e-61  3.80852e-61  1.20094e-62  1.19907e-61  3.08943e-63  4.52665e-64   2.8235e-72 -3.57648e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.5103, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         3.29919e+09
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.675583, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.44272, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            759.622      103.717      24.2408      31.6489      3.24613      413.941       32.365    0.0247753
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081236, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.006116, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.087893, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.58425e-08  1.58425e-08  8.84288e-11
      low eigenvalue method done, cpu time[sec] = 0.088206, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.58e-08  8.84e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.62e-09  8.84e-11         1
         *Z       ---       ---  5.12e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.84286e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.62419e-61  2.23418e-61  6.89586e-63  6.63419e-62  1.72964e-63  3.44657e-64  2.85121e-72  7.69154e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.5017, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.24181e+09
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.673665, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.45265, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            590.817      80.6688       18.854      24.6158      2.52477      321.954      25.1728    0.0192697
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081255, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006134, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.087929, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.23682e-08  1.23682e-08  5.94661e-11
      low eigenvalue method done, cpu time[sec] = 0.088242, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.24e-08  5.95e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.27e-09  5.95e-11         1
         *Z       ---       ---  5.12e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.94653e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.8286e-61  1.47992e-61  4.51234e-63  4.23496e-62  1.11317e-63  2.72739e-64   2.8801e-72  9.10967e-97

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.5159, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         4.71313e+09
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.675931, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.4526, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            531.735      72.6019      16.9686      22.1543      2.27229      289.759      22.6555    0.0173427
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081268, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006114, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.087922, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.11482e-08  1.11482e-08  5.01857e-11
      low eigenvalue method done, cpu time[sec] = 0.088233, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.11e-08  5.02e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.14e-09  5.02e-11         1
         *Z       ---       ---  5.12e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.01856e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.24642e-61   1.2412e-61  3.76817e-63  3.50257e-62  9.23651e-64  2.45392e-64  2.89483e-72 -1.18247e-95

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.5169, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         7.06969e+09
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.674202, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.44193, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             354.49      48.4013      11.3124      14.7695      1.51486      193.173      15.1037    0.0115618
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081926, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006131, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088673, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   7.4729e-09  7.47289e-09  2.56685e-11
      low eigenvalue method done, cpu time[sec] = 0.088985, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.47e-09  2.57e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.61e-10  2.57e-11         1
         *Z       ---       ---  5.12e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.56684e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.68759e-61   6.2032e-62  1.85923e-63  1.67152e-62  4.45875e-64  1.57005e-64  2.96848e-72 -9.01991e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.4988, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         9.42625e+09
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.673278, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.44062, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            265.868      36.3009      8.48429      11.0771      1.13615      144.879      11.3278   0.00867134
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081288, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006129, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.087963, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.62485e-09  5.62484e-09  1.57008e-11
      low eigenvalue method done, cpu time[sec] = 0.088275, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.62e-09  1.57e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.71e-10  1.57e-11         1
         *Z       ---       ---  5.12e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.57006e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.04235e-61  3.73698e-62  1.11318e-63  9.80783e-63    2.635e-64  1.10258e-64  3.03643e-72  2.12695e-95

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.4986, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.17828e+10
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.675262, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.42417, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            212.694      29.0408      6.78743      8.86171     0.908917      115.904      9.06221   0.00693708
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081286, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006117, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.087949, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.51176e-09  4.51175e-09  1.06343e-11
      low eigenvalue method done, cpu time[sec] = 0.088263, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.51e-09  1.06e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.57e-10  1.06e-11         1
         *Z       ---       ---  5.12e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.06339e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.10682e-62  2.50345e-62  7.43147e-64  6.45774e-63  1.74362e-64  8.21963e-65  3.09321e-72 -4.11773e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.4871, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.41394e+10
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.67637, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.44541, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            177.245      24.2006      5.65619      7.38475     0.757431      96.5863      7.55184    0.0057809
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081332, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006144, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088016, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.76757e-09  3.76756e-09  7.69598e-12
      low eigenvalue method done, cpu time[sec] = 0.088327, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.77e-09   7.7e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.81e-10   7.7e-12         1
         *Z       ---       ---  5.12e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.69607e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.16818e-62  1.79663e-62  5.32179e-64  4.57771e-63   1.2406e-64  6.38912e-65  3.13614e-72 -3.32994e-96

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.5093, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.64959e+10
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.674994, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.44882, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            151.924      20.7434      4.84816      6.32979     0.649227      82.7882      6.47301   0.00495505
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081332, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006148, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088025, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.2348e-09  3.23479e-09  5.83556e-12
      low eigenvalue method done, cpu time[sec] = 0.088351, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.23e-09  5.84e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.27e-10  5.84e-12         1
         *Z       ---       ---  5.12e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.83511e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.93349e-62   1.3533e-62   4.0029e-64  3.41631e-63  9.28531e-65  5.12249e-65  3.16463e-72  -2.3079e-95

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.5106, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 300 K
            Well    Collision, 1/sec
              W1         1.88525e+10
      global relaxation matrix dimension = 575
      setting global matrices ... done, cpu time[sec] = 0.674941, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.46255, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            132.934      18.1505      4.24214      5.53857     0.568073      72.4397      5.66388   0.00433567
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.081564, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.006164, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.088326, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.83448e-09  2.83447e-09  4.58114e-12
      low eigenvalue method done, cpu time[sec] = 0.088646, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.83e-09  4.58e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.86e-10  4.58e-12         1
         *Z       ---       ---  5.12e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.58122e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.09715e-62  1.05665e-62  3.12238e-64  2.64816e-63  7.21431e-65  4.20646e-65   3.1793e-72 -1.21629e-95

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0985, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 310 K
      Energy reference = 25395 1/cm
      Energy step      = 52 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006302
         W1 Well: collisional kernel bandwidth = 60
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.399598
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.384755
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.57858
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.81116
         W1 Well: minimal relaxation eigenvalue = 0.0959371
         W1 Well: maximal relaxation eigenvalue = 0.987815
         W1 Well:       grid size = 560
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3725 1/cm
         B1 Barrier:        grid size = 489
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -33 1/cm
         B2 Barrier:        grid size = 485
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 174 1/cm
         B3 Barrier:        grid size = 577
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4609 1/cm
         B4 Barrier:        grid size = 608
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6221 1/cm
         B5 Barrier: nonpositive number of states at -23121 1/cm => truncating
         B5 Barrier:        grid size = 933
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23121 1/cm
         B6 Barrier:        grid size = 460
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1474 1/cm
         B7 Barrier:        grid size = 398
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4698 1/cm
         B8 Barrier:        grid size = 166
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16763 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 5.97887, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 560
      MasterEquation::Barrier::truncate: real weight = 1.58535e+56
      MasterEquation::Barrier::truncate: effective weight = 3.75615e+52
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 560
      MasterEquation::Barrier::truncate: real weight = 1.93404e+58
      MasterEquation::Barrier::truncate: effective weight = 4.58191e+54
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 560
      MasterEquation::Barrier::truncate: real weight = 1.93679e+63
      MasterEquation::Barrier::truncate: effective weight = 1.89759e+54
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3725  -3725 3.88e+09 3.59e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -33 3.11e+14
         B2    175  4.3e+13
         B3  -3725 1.01e+13
         B4  -3725 1.31e+13
         B5  -3725 1.35e+12
         B6   1475 1.72e+14
         B7   4699 1.36e+13
         B8  16763 1.13e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.34e-06  3.92e-06  8.47e-15  4.65e-18  1.94e-54    0.0188  9.37e+04  8.21e+29
          R  7.45e+05         1      2.92  6.31e-09  3.47e-12  1.45e-48   1.4e+04  6.99e+10  6.12e+35
         P1  2.55e+05     0.343         1  2.16e-09  1.19e-12  4.96e-49  4.81e+03  2.39e+10   2.1e+35
         P2  1.18e+14  1.58e+08  4.62e+08         1  0.000549  2.29e-40  2.22e+12  1.11e+19   9.7e+43
         P3  2.15e+17  2.88e+11  8.42e+11  1.82e+03         1  4.18e-37  4.05e+15  2.02e+22  1.77e+47
         P4  5.15e+53   6.9e+47  2.02e+48  4.36e+39  2.39e+36         1  9.69e+51  4.82e+58  4.23e+83
         P5      53.1  7.12e-05  0.000208   4.5e-13  2.47e-16  1.03e-52         1  4.98e+06  4.36e+31
         P6  1.07e-05  1.43e-11  4.18e-11  9.03e-20  4.96e-23  2.07e-59  2.01e-07         1  8.76e+24
         P7  1.22e-30  1.63e-36  4.77e-36  1.03e-44  5.66e-48  2.37e-84  2.29e-32  1.14e-25         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.02e+38   8.8e+38   1.9e+30  1.05e+27  4.37e-10  4.23e+42  2.11e+49  1.85e+74
          R  3.32e-39         1      2.92  6.31e-09  3.47e-12  1.45e-48   1.4e+04  6.99e+10  6.12e+35
         P1  1.14e-39     0.343         1  2.16e-09  1.19e-12  4.96e-49  4.81e+03  2.39e+10   2.1e+35
         P2  5.25e-31  1.58e+08  4.62e+08         1  0.000549  2.29e-40  2.22e+12  1.11e+19   9.7e+43
         P3  9.57e-28  2.88e+11  8.42e+11  1.82e+03         1  4.18e-37  4.05e+15  2.02e+22  1.77e+47
         P4  2.29e+09   6.9e+47  2.02e+48  4.36e+39  2.39e+36         1  9.69e+51  4.82e+58  4.23e+83
         P5  2.36e-43  7.12e-05  0.000208   4.5e-13  2.47e-16  1.03e-52         1  4.98e+06  4.36e+31
         P6  4.75e-50  1.43e-11  4.18e-11  9.03e-20  4.96e-23  2.07e-59  2.01e-07         1  8.76e+24
         P7  5.42e-75  1.63e-36  4.77e-36  1.03e-44  5.66e-48  2.37e-84  2.29e-32  1.14e-25         1
   MasterEquation::set:  done, cpu time[sec] = 5.99383, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.60454e+08
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.639507, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.20607, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5643.06      778.796      183.093      238.319      24.5403      3115.97      247.236     0.205564
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075994, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005778, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.082311, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.00401e-07  1.00401e-07  1.70847e-09
      low eigenvalue method done, cpu time[sec] = 0.082615, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     1e-07  1.71e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.04e-08  1.71e-09         1
         *Z       ---       ---  1.28e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.70847e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.0271e-57  5.10252e-58  1.95304e-59  2.38084e-58  5.78514e-60   1.4985e-61   7.7807e-70  2.95464e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.1604, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.38136e+09
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.639457, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.19312, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1881.02      259.599      61.0311      79.4396      8.18009      1038.66      82.4119    0.0685215
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.07596, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005742, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.082231, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.4427e-08   3.4427e-08  4.27492e-10
      low eigenvalue method done, cpu time[sec] = 0.082539, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.44e-08  4.27e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.53e-09  4.27e-10         1
         *Z       ---       ---  1.28e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.27492e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.83514e-58  1.22084e-58  3.92716e-60   3.9966e-59  1.02085e-60  1.07657e-61  7.84905e-70 -4.56232e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.1392, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         2.30227e+09
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.639452, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.15035, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1128.61      155.759      36.6187      47.6638      4.90806      623.194      49.4472    0.0411129
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.07578, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005739, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.082051, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.08855e-08  2.08855e-08  2.07546e-10
      low eigenvalue method done, cpu time[sec] = 0.08235, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.09e-08  2.08e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.13e-09  2.08e-10         1
         *Z       ---       ---  1.28e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.07546e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.42259e-58  5.73808e-59  1.76773e-60   1.6849e-59  4.39472e-61  7.88129e-62  7.92213e-70 -1.36594e-94

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0939, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         3.22318e+09
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.640128, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.13967, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            806.152      111.257      26.1562      34.0455      3.50575      445.139      35.3194    0.0293664
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075673, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005737, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081931, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.50157e-08  1.50157e-08  1.25456e-10
      low eigenvalue method done, cpu time[sec] = 0.08223, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.5e-08  1.25e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.53e-09  1.25e-10         1
         *Z       ---       ---  1.28e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.25456e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.75848e-59  3.39172e-59  1.02464e-60  9.40824e-60   2.4851e-61  6.05112e-62  7.99951e-70 -6.09871e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0967, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.14409e+09
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.641799, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.1485, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            627.007      86.5329      20.3437      26.4799       2.7267      346.219      27.4706    0.0228405
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.07658, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005754, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.082855, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.17315e-08  1.17315e-08  8.49591e-11
      low eigenvalue method done, cpu time[sec] = 0.083221, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.17e-08   8.5e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.19e-09   8.5e-11         1
         *Z       ---       ---  1.28e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.49594e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.00376e-59  2.25895e-59   6.7499e-61  6.04425e-60  1.61057e-61  4.82046e-62  8.08006e-70 -5.31949e-94

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0955, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         4.60454e+09
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.640769, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.19163, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            564.306      77.8796      18.3093      23.8319      2.45403      311.597      24.7236    0.0205564
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075617, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005727, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081865, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.05773e-08  1.05773e-08  7.19052e-11
      low eigenvalue method done, cpu time[sec] = 0.082162, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.06e-08  7.19e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.07e-09  7.19e-11         1
         *Z       ---       ---  1.28e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.19054e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.10534e-59  1.89876e-59  5.65207e-61  5.01172e-60  1.34011e-61  4.34962e-62  8.12107e-70  3.60161e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.145, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         6.90681e+09
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.641225, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.19032, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            376.204      51.9197      12.2062      15.8879      1.63602      207.731      16.4824    0.0137043
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075685, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005746, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081948, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.09703e-09  7.09703e-09  3.71649e-11
      low eigenvalue method done, cpu time[sec] = 0.082247, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.1e-09  3.72e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.17e-10  3.72e-11         1
         *Z       ---       ---  1.28e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.71652e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.68201e-59  9.56678e-60  2.81653e-61  2.41357e-60  6.53438e-62  2.81474e-62  8.32565e-70 -1.22331e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.97754, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         9.20908e+09
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.639758, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.14475, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            282.153      38.9398      9.15467      11.9159      1.22701      155.799      12.3618    0.0102782
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075671, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005723, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081909, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.3449e-09  5.34491e-09  2.28899e-11
      low eigenvalue method done, cpu time[sec] = 0.082203, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.34e-09  2.29e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.39e-10  2.29e-11         1
         *Z       ---       ---  1.28e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.28899e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.66816e-59  5.79379e-60  1.69723e-61  1.42435e-60  3.88641e-62  1.99293e-62  8.51392e-70  3.20295e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0871, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.15114e+10
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.640067, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.13883, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            225.723      31.1518      7.32373      9.53275     0.981611      124.639      9.88943   0.00822258
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075863, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005733, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.082103, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.28881e-09   4.2888e-09   1.5581e-11
      low eigenvalue method done, cpu time[sec] = 0.082411, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.29e-09  1.56e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.31e-10  1.56e-11         1
         *Z       ---       ---  1.28e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.55813e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.14317e-59  3.89609e-60  1.13832e-61  9.41631e-61   2.5834e-62  1.49515e-62  8.67119e-70  8.85696e-94

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0879, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.38136e+10
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.639325, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.20175, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            188.102      25.9599      6.10311      7.94396     0.818009      103.866      8.24119   0.00685215
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.07571, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005715, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081939, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.58235e-09  3.58235e-09  1.13192e-11
      low eigenvalue method done, cpu time[sec] = 0.082241, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.58e-09  1.13e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.6e-10  1.13e-11         1
         *Z       ---       ---  1.28e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.13192e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.34601e-60  2.80417e-60  8.18055e-62  6.69528e-61  1.84442e-62  1.16812e-62  8.79044e-70 -7.97629e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.153, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.61159e+10
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.639057, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.08596, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             161.23      22.2513      5.23124      6.80911     0.701151      89.0278      7.06388   0.00587327
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075666, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005732, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081912, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.07638e-09  3.07639e-09  8.60927e-12
      low eigenvalue method done, cpu time[sec] = 0.082209, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.08e-09  8.61e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.08e-10  8.61e-12         1
         *Z       ---       ---  1.28e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.60934e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.37217e-60  2.11708e-60  6.17051e-62  5.00857e-61  1.38421e-62  9.40524e-63  8.87016e-70 -9.10341e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0313, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 310 K
            Well    Collision, 1/sec
              W1         1.84182e+10
      global relaxation matrix dimension = 560
      setting global matrices ... done, cpu time[sec] = 0.638779, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.14246, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            141.077      19.4699      4.57733      5.95797     0.613507      77.8993       6.1809   0.00513911
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.075687, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005725, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.081934, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.6961e-09   2.6961e-09  6.77566e-12
      low eigenvalue method done, cpu time[sec] = 0.082231, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.7e-09  6.78e-12         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.7e-10  6.78e-12         1
         *Z       ---       ---  1.28e+37
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.77569e-12
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.03037e-60  1.65612e-60  4.82428e-62  3.88992e-61  1.07784e-62  7.75122e-63  8.91211e-70 -5.10034e-93

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0841, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 320 K
      Energy reference = 25673 1/cm
      Energy step      = 53 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008041
         W1 Well: collisional kernel bandwidth = 60
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.686775
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.433973
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.386621
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.75936
         W1 Well: minimal relaxation eigenvalue = 0.0951007
         W1 Well: maximal relaxation eigenvalue = 0.990724
         W1 Well:       grid size = 556
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3795 1/cm
         B1 Barrier:        grid size = 485
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -32 1/cm
         B2 Barrier:        grid size = 481
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 179 1/cm
         B3 Barrier:        grid size = 572
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4643 1/cm
         B4 Barrier:        grid size = 601
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6180 1/cm
         B5 Barrier: nonpositive number of states at -23193 1/cm => truncating
         B5 Barrier:        grid size = 922
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23193 1/cm
         B6 Barrier:        grid size = 457
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1451 1/cm
         B7 Barrier:        grid size = 396
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4684 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16769 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.74683, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 556
      MasterEquation::Barrier::truncate: real weight = 1.31915e+55
      MasterEquation::Barrier::truncate: effective weight = 3.18555e+51
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 556
      MasterEquation::Barrier::truncate: real weight = 1.37264e+57
      MasterEquation::Barrier::truncate: effective weight = 3.31458e+53
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 556
      MasterEquation::Barrier::truncate: real weight = 1.85215e+61
      MasterEquation::Barrier::truncate: effective weight = 1.16494e+53
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3795  -3795  3.8e+09 3.77e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -32 3.39e+14
         B2    180 4.73e+13
         B3  -3795 1.12e+13
         B4  -3795 1.45e+13
         B5  -3795  1.5e+12
         B6   1452  1.9e+14
         B7   4685 1.53e+13
         B8  16769 1.37e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.24e-07  2.61e-06  1.15e-14  7.96e-18  4.69e-53    0.0107  3.38e+04  5.19e+28
          R  1.08e+06         1      2.83  1.24e-08  8.62e-12  5.07e-47  1.16e+04  3.66e+10  5.62e+34
         P1  3.83e+05     0.354         1  4.39e-09  3.05e-12  1.79e-47   4.1e+03   1.3e+10  1.99e+34
         P2  8.73e+13  8.07e+07  2.28e+08         1  0.000695  4.09e-39  9.34e+11  2.95e+18  4.53e+42
         P3  1.26e+17  1.16e+11  3.28e+11  1.44e+03         1  5.88e-36  1.34e+15  4.25e+21  6.52e+45
         P4  2.13e+52  1.97e+46  5.57e+46  2.44e+38   1.7e+35         1  2.28e+50  7.22e+56  1.11e+81
         P5      93.5  8.64e-05  0.000244  1.07e-12  7.44e-16  4.38e-51         1  3.16e+06  4.85e+30
         P6  2.95e-05  2.73e-11  7.72e-11  3.38e-19  2.35e-22  1.38e-57  3.16e-07         1  1.53e+24
         P7  1.93e-29  1.78e-35  5.03e-35  2.21e-43  1.53e-46  9.03e-82  2.06e-31  6.52e-25         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.88e+36  8.13e+36  3.57e+28  2.48e+25  1.46e-10  3.33e+40  1.05e+47  1.62e+71
          R  3.48e-37         1      2.83  1.24e-08  8.62e-12  5.07e-47  1.16e+04  3.66e+10  5.62e+34
         P1  1.23e-37     0.354         1  4.39e-09  3.05e-12  1.79e-47   4.1e+03   1.3e+10  1.99e+34
         P2   2.8e-29  8.07e+07  2.28e+08         1  0.000695  4.09e-39  9.34e+11  2.95e+18  4.53e+42
         P3  4.03e-26  1.16e+11  3.28e+11  1.44e+03         1  5.88e-36  1.34e+15  4.25e+21  6.52e+45
         P4  6.85e+09  1.97e+46  5.57e+46  2.44e+38   1.7e+35         1  2.28e+50  7.22e+56  1.11e+81
         P5     3e-41  8.64e-05  0.000244  1.07e-12  7.44e-16  4.38e-51         1  3.16e+06  4.85e+30
         P6  9.49e-48  2.73e-11  7.72e-11  3.38e-19  2.35e-22  1.38e-57  3.16e-07         1  1.53e+24
         P7  6.19e-72  1.78e-35  5.03e-35  2.21e-43  1.53e-46  9.03e-82  2.06e-31  6.52e-25         1
   MasterEquation::set:  done, cpu time[sec] = 4.76187, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          4.5024e+08
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.628606, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.21725, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5980.44       834.21      197.259      255.987      26.4622      3345.48      269.306     0.242326
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074188, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005705, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080409, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.04027e-07  1.04027e-07  2.46116e-09
      low eigenvalue method done, cpu time[sec] = 0.080706, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-07  2.46e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.07e-08  2.46e-09         1
         *Z       ---       ---  3.39e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.46116e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.1063e-55  5.41683e-56  2.01017e-57   2.3495e-56  5.75451e-58  1.85048e-59  1.53612e-67  8.46937e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.13654, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.35072e+09
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.6319, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.13702, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1993.48       278.07      65.7529       85.329      8.82074      1115.16      89.7687    0.0807752
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.07417, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005687, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.08037, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.59427e-08  3.59427e-08  6.36826e-10
      low eigenvalue method done, cpu time[sec] = 0.080673, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.59e-08  6.37e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.66e-09  6.37e-10         1
         *Z       ---       ---  3.39e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.36826e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.14832e-56  1.32871e-56  4.17917e-58  4.08749e-57  1.05492e-58   1.3463e-59  1.54957e-67 -9.74267e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0546, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          2.2512e+09
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.63299, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.1326, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1196.09      166.842      39.4517      51.1974      5.29244      669.097      53.8612    0.0484651
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074272, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005679, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080455, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.18671e-08  2.18671e-08   3.1381e-10
      low eigenvalue method done, cpu time[sec] = 0.080757, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.19e-08  3.14e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.22e-09  3.14e-10         1
         *Z       ---       ---  3.39e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.1381e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.60263e-56  6.31822e-57    1.909e-58  1.74884e-57  4.61389e-59  9.95518e-60  1.56395e-67  8.01173e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0502, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         3.15168e+09
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.630462, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.09759, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            854.348      119.173      28.1798      36.5696      3.78032      477.926      38.4723    0.0346179
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074124, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005713, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080337, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.57465e-08  1.57465e-08  1.91495e-10
      low eigenvalue method done, cpu time[sec] = 0.08063, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.57e-08  1.91e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.59e-09  1.91e-10         1
         *Z       ---       ---  3.39e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.91495e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.95942e-57  3.76262e-57  1.11682e-58  9.85332e-58  2.63446e-59  7.70292e-60  1.57915e-67   -1.457e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0157, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         4.05216e+09
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.633333, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.08642, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            664.493      92.6901      21.9176       28.443      2.94025       371.72      29.9229    0.0269251
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074201, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005713, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080414, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.23152e-08  1.23152e-08  1.30572e-10
      low eigenvalue method done, cpu time[sec] = 0.080711, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.23e-08  1.31e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.24e-09  1.31e-10         1
         *Z       ---       ---  3.39e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.30572e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.87368e-57  2.51955e-57  7.40616e-59  6.37012e-58  1.71907e-59  6.17484e-60  1.59496e-67  9.42298e-92

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0078, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          4.5024e+09
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.631754, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.1726, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            598.044       83.421      19.7259      25.5987      2.64622      334.548      26.9306    0.0242326
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.073997, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005696, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080213, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.11081e-08  1.11081e-08   1.1082e-10
      low eigenvalue method done, cpu time[sec] = 0.080511, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.11e-08  1.11e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.12e-09  1.11e-10         1
         *Z       ---       ---  3.39e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.1082e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.86151e-57  2.12249e-57  6.21839e-59  5.29527e-58  1.43434e-59  5.58686e-60    1.603e-67 -1.83251e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0944, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         6.75361e+09
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.631964, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.14823, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            398.696       55.614      13.1506      17.0658      1.76415      223.032      17.9537     0.016155
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074131, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005702, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.08034, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.46327e-09  7.46324e-09  5.78752e-11
      low eigenvalue method done, cpu time[sec] = 0.080683, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.46e-09  5.79e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.49e-10  5.79e-11         1
         *Z       ---       ---  3.39e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.78753e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.11156e-57  1.07811e-57  3.12963e-59  2.57338e-58  7.06385e-60  3.65474e-60    1.643e-67 -1.40443e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0698, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         9.00481e+09
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.631956, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.14674, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            299.022      41.7105      9.86294      12.7993      1.32311      167.274      13.4653    0.0121163
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074089, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005699, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.08029, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.62518e-09  5.62516e-09  3.58912e-11
      low eigenvalue method done, cpu time[sec] = 0.080582, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.63e-09  3.59e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.63e-10  3.59e-11         1
         *Z       ---       ---  3.39e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.58913e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.94888e-57  6.56415e-58  1.89824e-59  1.52749e-58   4.2284e-60  2.60818e-60  1.67972e-67  4.17781e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0659, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1          1.1256e+10
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.631952, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.1486, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            239.218      33.3684      7.89035      10.2395      1.05849      133.819      10.7722   0.00969302
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074047, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005689, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080243, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.51607e-09  4.51607e-09  2.45539e-11
      low eigenvalue method done, cpu time[sec] = 0.080541, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.52e-09  2.46e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.51e-10  2.46e-11         1
         *Z       ---       ---  3.39e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.45535e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.34239e-57   4.4312e-58  1.27916e-59  1.01399e-58  2.82368e-60  1.96876e-60  1.71037e-67  9.78144e-91

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0745, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.35072e+10
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.632695, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.14841, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            199.348       27.807      6.57529       8.5329     0.882074      111.516      8.97687   0.00807752
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074098, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005715, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080317, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.77364e-09  3.77362e-09  1.79071e-11
      low eigenvalue method done, cpu time[sec] = 0.080612, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.77e-09  1.79e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.76e-10  1.79e-11         1
         *Z       ---       ---  3.39e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.79072e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.83949e-58  3.19877e-58  9.22613e-60   7.2323e-59  2.02305e-60  1.54582e-60  1.73367e-67  2.34124e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.067, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.57584e+10
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.632326, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.13982, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             170.87      23.8346      5.63596      7.31391     0.756063      95.5852      7.69446   0.00692359
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.074085, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005706, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.0803, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.24161e-09  3.24159e-09  1.36624e-11
      low eigenvalue method done, cpu time[sec] = 0.080601, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.24e-09  1.37e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.23e-10  1.37e-11         1
         *Z       ---       ---  3.39e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.36622e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.53652e-58   2.4207e-58  6.97941e-60  5.42365e-59  1.52249e-60  1.24981e-60  1.74935e-67 -5.06719e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 10.0594, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 320 K
            Well    Collision, 1/sec
              W1         1.80096e+10
      global relaxation matrix dimension = 556
      setting global matrices ... done, cpu time[sec] = 0.632916, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 8.10961, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            149.511      20.8553      4.93147      6.39967     0.661555      83.6371      6.73266   0.00605814
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.07409, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005683, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.080287, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.84154e-09  2.84153e-09  1.07803e-11
      low eigenvalue method done, cpu time[sec] = 0.08059, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.84e-09  1.08e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.83e-10  1.08e-11         1
         *Z       ---       ---  3.39e+36
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.07803e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.96533e-58   1.8973e-58  5.46976e-60  4.22075e-59  1.18822e-60  1.03367e-60  1.75775e-67  1.26697e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.8657, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 330 K
      Energy reference = 25951 1/cm
      Energy step      = 55 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007575
         W1 Well: collisional kernel bandwidth = 60
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.654545
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.411438
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.351101
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.55763
         W1 Well: minimal relaxation eigenvalue = 0.0942545
         W1 Well: maximal relaxation eigenvalue = 0.988973
         W1 Well:       grid size = 542
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3859 1/cm
         B1 Barrier:        grid size = 472
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -9 1/cm
         B2 Barrier:        grid size = 468
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 210 1/cm
         B3 Barrier:        grid size = 556
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4629 1/cm
         B4 Barrier:        grid size = 585
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6224 1/cm
         B5 Barrier: nonpositive number of states at -23109 1/cm => truncating
         B5 Barrier:        grid size = 892
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23109 1/cm
         B6 Barrier:        grid size = 445
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1475 1/cm
         B7 Barrier:        grid size = 387
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4666 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16766 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.45007, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 542
      MasterEquation::Barrier::truncate: real weight = 1.2824e+54
      MasterEquation::Barrier::truncate: effective weight = 3.21367e+50
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 542
      MasterEquation::Barrier::truncate: real weight = 1.15008e+56
      MasterEquation::Barrier::truncate: effective weight = 2.88202e+52
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 542
      MasterEquation::Barrier::truncate: real weight = 2.58752e+59
      MasterEquation::Barrier::truncate: effective weight = 8.52329e+51
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3859  -3859 3.73e+09 3.96e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -9 3.69e+14
         B2    211  5.2e+13
         B3  -3859 1.24e+13
         B4  -3859  1.6e+13
         B5  -3859 1.66e+12
         B6   1476 2.09e+14
         B7   4666 1.71e+13
         B8  16766 1.66e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.19e-07   1.7e-06  1.45e-14  1.26e-17  8.87e-52   0.00598  1.24e+04   3.7e+27
          R  1.62e+06         1      2.74  2.34e-08  2.03e-11  1.43e-45  9.67e+03     2e+10  5.97e+33
         P1  5.89e+05     0.365         1  8.53e-09   7.4e-12  5.22e-46  3.52e+03  7.29e+09  2.18e+33
         P2  6.91e+13  4.28e+07  1.17e+08         1  0.000868  6.13e-38  4.13e+11  8.55e+17  2.55e+41
         P3  7.96e+16  4.93e+10  1.35e+11  1.15e+03         1  7.06e-35  4.76e+14  9.85e+20  2.94e+44
         P4  1.13e+51  6.98e+44  1.91e+45  1.63e+37  1.42e+34         1  6.75e+48  1.39e+55  4.17e+78
         P5       167  0.000103  0.000284  2.42e-12   2.1e-15  1.48e-49         1  2.07e+06  6.18e+29
         P6  8.09e-05     5e-11  1.37e-10  1.17e-18  1.02e-21  7.17e-56  4.84e-07         1  2.99e+23
         P7  2.71e-28  1.67e-34  4.59e-34  3.92e-42   3.4e-45   2.4e-79  1.62e-30  3.35e-24         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.63e+34  9.96e+34  8.49e+26  7.37e+23   5.2e-11  3.51e+38  7.26e+44  2.17e+68
          R  2.75e-35         1      2.74  2.34e-08  2.03e-11  1.43e-45  9.67e+03     2e+10  5.97e+33
         P1     1e-35     0.365         1  8.53e-09   7.4e-12  5.22e-46  3.52e+03  7.29e+09  2.18e+33
         P2  1.18e-27  4.28e+07  1.17e+08         1  0.000868  6.13e-38  4.13e+11  8.55e+17  2.55e+41
         P3  1.36e-24  4.93e+10  1.35e+11  1.15e+03         1  7.06e-35  4.76e+14  9.85e+20  2.94e+44
         P4  1.92e+10  6.98e+44  1.91e+45  1.63e+37  1.42e+34         1  6.75e+48  1.39e+55  4.17e+78
         P5  2.85e-39  0.000103  0.000284  2.42e-12   2.1e-15  1.48e-49         1  2.07e+06  6.18e+29
         P6  1.38e-45     5e-11  1.37e-10  1.17e-18  1.02e-21  7.17e-56  4.84e-07         1  2.99e+23
         P7  4.61e-69  1.67e-34  4.59e-34  3.92e-42   3.4e-45   2.4e-79  1.62e-30  3.35e-24         1
   MasterEquation::set:  done, cpu time[sec] = 4.465, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         4.40612e+08
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.60264, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.21958, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6329.63      892.355      212.211      274.579      28.4929      3586.45      292.831      0.28459
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068994, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005262, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.07475, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.11987e-07  1.11988e-07  3.57559e-09
      low eigenvalue method done, cpu time[sec] = 0.075112, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.12e-07  3.58e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-08  3.58e-09         1
         *Z       ---       ---  9.48e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.57558e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.97492e-54   4.3327e-54  1.56479e-55  1.76402e-54  4.35356e-56  1.69972e-57  2.20436e-65  4.87505e-87

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.03454, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.32184e+09
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.600522, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.91484, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2109.88      297.452      70.7371      91.5264      9.49764      1195.48      97.6104    0.0948632
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.069046, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005276, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.07481, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.90649e-08  3.90649e-08  9.55113e-10
      low eigenvalue method done, cpu time[sec] = 0.075099, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.91e-08  9.55e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.96e-09  9.55e-10         1
         *Z       ---       ---  9.48e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.55112e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.63041e-54  1.08877e-54  3.35941e-56  3.17529e-55  8.27459e-57  1.25365e-57  2.22359e-65 -1.96812e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.73689, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         2.20306e+09
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.602307, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.91712, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1265.93      178.471      42.4423      54.9159      5.69858      717.291      58.5663    0.0569179
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.069324, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005286, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.075097, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.38527e-08  2.38527e-08  4.77474e-10
      low eigenvalue method done, cpu time[sec] = 0.075379, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.39e-08  4.77e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.4e-09  4.77e-10         1
         *Z       ---       ---  9.48e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.77474e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.3579e-54  5.23675e-55  1.55673e-56   1.3781e-55  3.67466e-57  9.36584e-58  2.24416e-65  3.73023e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.73602, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         3.08429e+09
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.602075, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.89155, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            904.232      127.479      30.3159      39.2256      4.07042       512.35       41.833    0.0406557
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068927, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005284, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074689, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.72113e-08  1.72113e-08  2.94073e-10
      low eigenvalue method done, cpu time[sec] = 0.074977, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.72e-08  2.94e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.73e-09  2.94e-10         1
         *Z       ---       ---  9.48e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.94073e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.51617e-55  3.14169e-55  9.19071e-57  7.83295e-56  2.11807e-57  7.30395e-58   2.2659e-65 -2.75301e-89

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.71146, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         3.96551e+09
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.603104, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.92129, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            703.292      99.1505       23.579      30.5088      3.16588      398.495      32.5368    0.0316211
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068929, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005276, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074691, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.34789e-08  1.34789e-08   2.0187e-10
      low eigenvalue method done, cpu time[sec] = 0.074985, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.35e-08  2.02e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.35e-09  2.02e-10         1
         *Z       ---       ---  9.48e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.01869e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.91722e-55  2.11509e-55  6.13506e-57  5.09544e-56  1.39141e-57  5.89193e-58  2.28845e-65  2.89767e-89

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.73983, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         4.40612e+09
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.602456, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.92196, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            632.963      89.2355      21.2211      27.4579      2.84929      358.645      29.2831     0.028459
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.06893, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005263, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.07468, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.21639e-08  1.21639e-08  1.71808e-10
      low eigenvalue method done, cpu time[sec] = 0.074965, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.22e-08  1.72e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.22e-09  1.72e-10         1
         *Z       ---       ---  9.48e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.71807e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.05992e-55   1.7857e-55  5.16505e-57  4.24629e-56   1.1641e-57  5.34544e-58   2.2999e-65 -4.19299e-90

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.74058, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         6.60918e+09
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.601629, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.91334, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            421.975      59.4903      14.1474      18.3053      1.89953      239.097      19.5221    0.0189726
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068933, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005271, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074689, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.18697e-09  8.18697e-09  9.06534e-11
      low eigenvalue method done, cpu time[sec] = 0.074973, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.19e-09  9.07e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.16e-10  9.07e-11         1
         *Z       ---       ---  9.48e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.06528e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.71404e-55  9.14464e-56  2.62549e-57  2.08238e-56  5.79006e-58  3.53492e-58  2.35676e-65 -3.52272e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.72567, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         8.81225e+09
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.602446, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.91916, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            316.481      44.6177      10.6106       13.729      1.42465      179.323      14.6416    0.0142295
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068913, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005278, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074673, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.17698e-09    6.177e-09  5.66067e-11
      low eigenvalue method done, cpu time[sec] = 0.074964, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.18e-09  5.66e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.14e-10  5.66e-11         1
         *Z       ---       ---  9.48e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.66061e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.71181e-55  5.59791e-56  1.60299e-57  1.24331e-56  3.48837e-58  2.54265e-58  2.40881e-65 -5.67245e-89

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.7343, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.10153e+10
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.600705, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.92113, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            253.185      35.6942      8.48846      10.9832      1.13972      143.458      11.7133    0.0113836
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068887, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005278, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074649, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.96251e-09  4.96252e-09  3.89222e-11
      low eigenvalue method done, cpu time[sec] = 0.074939, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.96e-09  3.89e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.92e-10  3.89e-11         1
         *Z       ---       ---  9.48e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.89218e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.1852e-55  3.79382e-56  1.08541e-57  8.28815e-57  2.34038e-58  1.93114e-58  2.45223e-65 -3.02087e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.74055, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.32184e+10
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.602397, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.89809, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            210.988      29.7452      7.07371      9.15264     0.949764      119.548      9.76104   0.00948632
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.068878, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005274, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074633, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.14872e-09  4.14873e-09  2.84977e-11
      low eigenvalue method done, cpu time[sec] = 0.074921, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.15e-09  2.85e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.11e-10  2.85e-11         1
         *Z       ---       ---  9.48e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.84972e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.72228e-56  2.74699e-56  7.85788e-58  5.93049e-57  1.68279e-58  1.52387e-58   2.4853e-65 -4.27758e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.71911, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.54214e+10
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.603059, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.89421, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            180.846      25.4958      6.06318      7.84512     0.814084       102.47      8.36661   0.00813113
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.069079, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005272, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074837, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.56516e-09  3.56517e-09  2.18117e-11
      low eigenvalue method done, cpu time[sec] = 0.075123, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.57e-09  2.18e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.52e-10  2.18e-11         1
         *Z       ---       ---  9.48e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.18108e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.70258e-56  2.08388e-56  5.96216e-58  4.45872e-57  1.27004e-58  1.23722e-58  2.50768e-65  5.76468e-89

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.54798, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 330 K
            Well    Collision, 1/sec
              W1         1.76245e+10
      global relaxation matrix dimension = 542
      setting global matrices ... done, cpu time[sec] = 0.600248, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.89951, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            158.241      22.3089      5.30529      6.86448     0.712323      89.6613      7.32078   0.00711474
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.069048, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00527, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.074803, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.1261e-09  3.12612e-09  1.72559e-11
      low eigenvalue method done, cpu time[sec] = 0.075094, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.13e-09  1.73e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.09e-10  1.73e-11         1
         *Z       ---       ---  9.48e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.72549e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.31961e-56  1.63659e-56  4.68411e-58  3.47706e-57  9.93524e-59  1.02692e-58  2.51989e-65  2.94414e-88

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.71261, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 340 K
      Energy reference = 26229 1/cm
      Energy step      = 57 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007616
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.63073
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.392846
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.338356
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.37464
         W1 Well: minimal relaxation eigenvalue = 0.0934324
         W1 Well: maximal relaxation eigenvalue = 0.987344
         W1 Well:       grid size = 529
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -3924 1/cm
         B1 Barrier:        grid size = 461
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -48 1/cm
         B2 Barrier:        grid size = 457
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 179 1/cm
         B3 Barrier:        grid size = 541
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4608 1/cm
         B4 Barrier:        grid size = 569
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6204 1/cm
         B5 Barrier: nonpositive number of states at -23133 1/cm => truncating
         B5 Barrier:        grid size = 866
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23133 1/cm
         B6 Barrier:        grid size = 434
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1490 1/cm
         B7 Barrier:        grid size = 378
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4682 1/cm
         B8 Barrier:        grid size = 166
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16767 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.20384, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 529
      MasterEquation::Barrier::truncate: real weight = 1.4364e+53
      MasterEquation::Barrier::truncate: effective weight = 3.7305e+49
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 529
      MasterEquation::Barrier::truncate: real weight = 1.12071e+55
      MasterEquation::Barrier::truncate: effective weight = 2.91059e+51
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 529
      MasterEquation::Barrier::truncate: real weight = 5.11034e+57
      MasterEquation::Barrier::truncate: effective weight = 7.26659e+50
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -3924  -3924 3.65e+09 4.16e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -48 4.01e+14
         B2    180 5.71e+13
         B3  -3924 1.37e+13
         B4  -3924 1.76e+13
         B5  -3924 1.84e+12
         B6   1491  2.3e+14
         B7   4683  1.9e+13
         B8  16767    2e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.24e-07  1.13e-06   1.8e-14  1.93e-17  1.41e-50   0.00346  4.79e+03  3.07e+26
          R  2.36e+06         1      2.67  4.25e-08  4.54e-11  3.33e-44  8.15e+03  1.13e+10  7.25e+32
         P1  8.85e+05     0.375         1  1.59e-08   1.7e-11  1.25e-44  3.06e+03  4.24e+09  2.72e+32
         P2  5.55e+13  2.35e+07  6.28e+07         1   0.00107  7.83e-37  1.92e+11  2.66e+17  1.71e+40
         P3  5.19e+16   2.2e+10  5.87e+10       935         1  7.32e-34  1.79e+14  2.49e+20   1.6e+43
         P4  7.09e+49  3.01e+43  8.02e+43  1.28e+36  1.37e+33         1  2.45e+47   3.4e+53  2.18e+76
         P5       289  0.000123  0.000327  5.21e-12  5.57e-15  4.08e-48         1  1.39e+06  8.89e+28
         P6  0.000209  8.85e-11  2.36e-10  3.76e-18  4.02e-21  2.94e-54  7.21e-07         1  6.41e+22
         P7  3.26e-27  1.38e-33  3.68e-33  5.86e-41  6.27e-44  4.59e-77  1.12e-29  1.56e-23         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.92e+32  1.58e+33  2.51e+25  2.69e+22  1.97e-11  4.82e+36  6.69e+42  4.29e+65
          R  1.69e-33         1      2.67  4.25e-08  4.54e-11  3.33e-44  8.15e+03  1.13e+10  7.25e+32
         P1  6.34e-34     0.375         1  1.59e-08   1.7e-11  1.25e-44  3.06e+03  4.24e+09  2.72e+32
         P2  3.98e-26  2.35e+07  6.28e+07         1   0.00107  7.83e-37  1.92e+11  2.66e+17  1.71e+40
         P3  3.72e-23   2.2e+10  5.87e+10       935         1  7.32e-34  1.79e+14  2.49e+20   1.6e+43
         P4  5.08e+10  3.01e+43  8.02e+43  1.28e+36  1.37e+33         1  2.45e+47   3.4e+53  2.18e+76
         P5  2.07e-37  0.000123  0.000327  5.21e-12  5.57e-15  4.08e-48         1  1.39e+06  8.89e+28
         P6   1.5e-43  8.85e-11  2.36e-10  3.76e-18  4.02e-21  2.94e-54  7.21e-07         1  6.41e+22
         P7  2.33e-66  1.38e-33  3.68e-33  5.86e-41  6.27e-44  4.59e-77  1.12e-29  1.56e-23         1
   MasterEquation::set:  done, cpu time[sec] = 4.21891, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         4.31518e+08
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.571217, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.26478, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6690.89       953.32      227.982      294.128      30.6367      3839.23      317.876     0.333256
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064452, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005005, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069925, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.21536e-07  1.21536e-07  5.07737e-09
      low eigenvalue method done, cpu time[sec] = 0.070201, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.22e-07  5.08e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.24e-08  5.08e-09         1
         *Z       ---       ---  2.86e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.07737e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.61962e-52   2.6749e-52  9.43334e-54  1.03053e-52   2.5619e-54  1.20164e-55  2.35847e-63  -8.8674e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.99112, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.29455e+09
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.573147, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.73051, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2230.3      317.773      75.9938      98.0428      10.2122      1279.74      105.959     0.111085
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064297, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005034, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069792, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.28832e-08  4.28832e-08  1.39804e-09
      low eigenvalue method done, cpu time[sec] = 0.070075, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.29e-08   1.4e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.32e-09   1.4e-09         1
         *Z       ---       ---  2.86e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.39804e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.69441e-52   6.8814e-53  2.08887e-54  1.91626e-53  5.03909e-55  8.96391e-56  2.37896e-63  3.14037e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.46557, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         2.15759e+09
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.572412, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.73521, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1338.18      190.664      45.5963      58.8257      6.12733      767.845      63.5752    0.0666511
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064273, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005036, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069767, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.62988e-08  2.62988e-08  7.08701e-10
      low eigenvalue method done, cpu time[sec] = 0.070043, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.63e-08  7.09e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.63e-09  7.09e-10         1
         *Z       ---       ---  2.86e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.08701e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.86708e-53   3.3471e-53  9.81607e-55  8.43242e-54  2.27093e-55  6.75886e-56  2.40088e-63  6.44258e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.45672, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         3.02062e+09
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.571649, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.7517, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            955.842      136.189      32.5688      42.0184      4.37667      548.461      45.4109     0.047608
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064299, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005058, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069819, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.90233e-08  1.90234e-08  4.40438e-10
      low eigenvalue method done, cpu time[sec] = 0.070096, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.9e-08   4.4e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.9e-09   4.4e-10         1
         *Z       ---       ---  2.86e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.40438e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.61102e-53  2.02271e-53  5.84747e-55  4.83414e-54  1.32104e-55  5.30908e-56  2.42401e-63  1.19177e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.47934, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         3.88366e+09
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.573056, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.73046, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            743.432      105.924      25.3313      32.6809      3.40407      426.581      35.3196    0.0370284
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064276, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005019, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06976, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.49224e-08  1.49224e-08  3.04347e-10
      low eigenvalue method done, cpu time[sec] = 0.070039, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.49e-08  3.04e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.49e-09  3.04e-10         1
         *Z       ---       ---  2.86e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.04346e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.92447e-53  1.36903e-53  3.92886e-55  3.16392e-54  8.73544e-56  4.30793e-56  2.44797e-63  3.18743e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.45281, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         4.31518e+09
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.572776, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.74136, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            669.089       95.332      22.7982      29.4128      3.06367      383.923      31.7876    0.0333256
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064364, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005011, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069851, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.34751e-08  1.34751e-08   2.5973e-10
      low eigenvalue method done, cpu time[sec] = 0.07013, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.35e-08   2.6e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.34e-09   2.6e-10         1
         *Z       ---       ---  2.86e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.5973e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.36507e-53  1.15836e-53  3.31653e-55  2.64318e-54  7.32798e-56  3.91838e-56  2.46012e-63  6.04152e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.46086, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         6.47276e+09
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.573257, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.73257, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            446.059      63.5546      15.1988      19.6086      2.04244      255.948      21.1917     0.022217
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064344, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005004, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069809, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.08894e-09  9.08894e-09  1.38447e-10
      low eigenvalue method done, cpu time[sec] = 0.070086, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.09e-09  1.38e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     9e-10  1.38e-10         1
         *Z       ---       ---  2.86e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.38447e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.82357e-53  5.98055e-54  1.70267e-55  1.30797e-54  3.68081e-56  2.61801e-56  2.52033e-63 -1.18853e-85

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.4529, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         8.63035e+09
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.572772, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.72769, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            334.545       47.666      11.3991      14.7064      1.53183      191.961      15.8938    0.0166628
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064299, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00506, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06982, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.86623e-09  6.86622e-09  8.70461e-11
      low eigenvalue method done, cpu time[sec] = 0.070094, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.87e-09   8.7e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.78e-10   8.7e-11         1
         *Z       ---       ---  2.86e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.70459e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.1582e-53  3.68099e-54  1.04649e-55  7.85555e-55    2.232e-56  1.89744e-56  2.57533e-63  8.64518e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.44175, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.07879e+10
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.570486, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.74707, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            267.636      38.1328      9.11926      11.7651      1.22547      153.569       12.715    0.0133302
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064421, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005054, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069937, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.52091e-09  5.52092e-09  6.01564e-11
      low eigenvalue method done, cpu time[sec] = 0.070211, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.52e-09  6.02e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.44e-10  6.02e-11         1
         *Z       ---       ---  2.86e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.01561e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   8.0605e-54  2.50466e-54  7.12059e-56  5.25901e-55  1.50454e-56  1.44969e-56  2.62122e-63  2.53264e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.46913, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.29455e+10
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.571565, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.74345, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             223.03      31.7773      7.59938      9.80428      1.02122      127.974      10.5959    0.0111085
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064268, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005055, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069784, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.61839e-09   4.6184e-09  4.42197e-11
      low eigenvalue method done, cpu time[sec] = 0.070064, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.62e-09  4.42e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.54e-10  4.42e-11         1
         *Z       ---       ---  2.86e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.42197e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.95606e-54  1.81917e-54  5.17459e-56  3.77534e-55  1.08574e-56  1.14952e-56  2.65626e-63 -1.11932e-85

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.31016, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.51031e+10
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.574556, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.7522, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            191.168      27.2377      6.51376      8.40367     0.875334      109.692      9.08217   0.00952159
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064826, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.005027, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.070315, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.97063e-09  3.97064e-09  3.39541e-11
      low eigenvalue method done, cpu time[sec] = 0.07059, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.97e-09   3.4e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.9e-10   3.4e-11         1
         *Z       ---       ---  2.86e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.3954e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.59198e-54  1.38347e-54  3.93827e-56  2.84583e-55  8.21824e-57  9.37108e-57  2.68014e-63  -3.0517e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.47856, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 340 K
            Well    Collision, 1/sec
              W1         1.72607e+10
      global relaxation matrix dimension = 529
      setting global matrices ... done, cpu time[sec] = 0.570526, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.72997, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            167.272       23.833      5.69954      7.35321     0.765917      95.9806       7.9469   0.00833139
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.064919, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.005032, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.070406, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.48293e-09  3.48294e-09   2.6934e-11
      low eigenvalue method done, cpu time[sec] = 0.070693, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.48e-09  2.69e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.41e-10  2.69e-11         1
         *Z       ---       ---  2.86e+35
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.69336e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.65451e-54  1.08876e-54  3.10194e-56  2.22405e-55  6.44447e-57  7.80549e-57  2.69341e-63 -2.27496e-86

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.45206, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 350 K
      Energy reference = 26507 1/cm
      Energy step      = 58 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007717
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.63157
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.387644
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.321858
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.37869
         W1 Well: minimal relaxation eigenvalue = 0.0926631
         W1 Well: maximal relaxation eigenvalue = 0.990026
         W1 Well:       grid size = 526
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4001 1/cm
         B1 Barrier:        grid size = 458
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -56 1/cm
         B2 Barrier:        grid size = 454
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 175 1/cm
         B3 Barrier:        grid size = 537
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4638 1/cm
         B4 Barrier:        grid size = 564
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6205 1/cm
         B5 Barrier: nonpositive number of states at -23141 1/cm => truncating
         B5 Barrier:        grid size = 856
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23141 1/cm
         B6 Barrier:        grid size = 432
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1451 1/cm
         B7 Barrier:        grid size = 376
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4699 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16763 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.1858, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 526
      MasterEquation::Barrier::truncate: real weight = 1.83113e+52
      MasterEquation::Barrier::truncate: effective weight = 4.83908e+48
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 526
      MasterEquation::Barrier::truncate: real weight = 1.25351e+54
      MasterEquation::Barrier::truncate: effective weight = 3.31261e+50
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 526
      MasterEquation::Barrier::truncate: real weight = 1.38583e+56
      MasterEquation::Barrier::truncate: effective weight = 7.08635e+49
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4001  -4001 3.56e+09 4.37e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -56 4.36e+14
         B2    176 6.27e+13
         B3  -4001 1.51e+13
         B4  -4001 1.94e+13
         B5  -4001 2.03e+12
         B6   1452 2.53e+14
         B7   4700 2.12e+13
         B8  16763  2.4e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.15e-07  8.18e-07  2.35e-14  3.06e-17  2.03e-49   0.00219  2.08e+03  3.13e+25
          R  3.18e+06         1       2.6  7.47e-08  9.72e-11  6.45e-43  6.94e+03  6.61e+09  9.94e+31
         P1  1.22e+06     0.385         1  2.87e-08  3.74e-11  2.48e-43  2.67e+03  2.54e+09  3.83e+31
         P2  4.26e+13  1.34e+07  3.48e+07         1    0.0013  8.64e-36   9.3e+10  8.85e+16  1.33e+39
         P3  3.27e+16  1.03e+10  2.67e+10       768         1  6.64e-33  7.15e+13   6.8e+19  1.02e+42
         P4  4.92e+48  1.55e+42  4.03e+42  1.16e+35  1.51e+32         1  1.08e+46  1.02e+52  1.54e+74
         P5       458  0.000144  0.000374  1.08e-11   1.4e-14  9.29e-47         1  9.52e+05  1.43e+28
         P6  0.000481  1.51e-10  3.93e-10  1.13e-17  1.47e-20  9.76e-53  1.05e-06         1   1.5e+22
         P7   3.2e-26  1.01e-32  2.61e-32  7.51e-40  9.78e-43  6.49e-75  6.99e-29  6.65e-23         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.22e+31  3.16e+31  9.09e+23  1.18e+21  7.86e-12  8.46e+34  8.05e+40  1.21e+63
          R  8.21e-32         1       2.6  7.47e-08  9.72e-11  6.45e-43  6.94e+03  6.61e+09  9.94e+31
         P1  3.16e-32     0.385         1  2.87e-08  3.74e-11  2.48e-43  2.67e+03  2.54e+09  3.83e+31
         P2   1.1e-24  1.34e+07  3.48e+07         1    0.0013  8.64e-36   9.3e+10  8.85e+16  1.33e+39
         P3  8.45e-22  1.03e+10  2.67e+10       768         1  6.64e-33  7.15e+13   6.8e+19  1.02e+42
         P4  1.27e+11  1.55e+42  4.03e+42  1.16e+35  1.51e+32         1  1.08e+46  1.02e+52  1.54e+74
         P5  1.18e-35  0.000144  0.000374  1.08e-11   1.4e-14  9.29e-47         1  9.52e+05  1.43e+28
         P6  1.24e-41  1.51e-10  3.93e-10  1.13e-17  1.47e-20  9.76e-53  1.05e-06         1   1.5e+22
         P7  8.26e-64  1.01e-32  2.61e-32  7.51e-40  9.78e-43  6.49e-75  6.99e-29  6.65e-23         1
   MasterEquation::set:  done, cpu time[sec] = 4.2012, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1          4.2291e+08
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.568676, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.24805, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7064.34      1017.19        244.6      314.668      32.8978      4104.15      344.507     0.388856
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063406, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004894, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068757, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.27424e-07  1.27424e-07  6.75622e-09
      low eigenvalue method done, cpu time[sec] = 0.069031, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.27e-07  6.76e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.29e-08  6.76e-09         1
         *Z       ---       ---  9.55e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.75622e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.77577e-50  1.30313e-50  4.49899e-52  4.78069e-51  1.19677e-52  6.63767e-54  1.93635e-61  -3.6522e-83

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.95199, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.26873e+09
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.565354, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.72287, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2354.78      339.063      81.5333      104.889      10.9659      1368.05      114.836     0.129619
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063276, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00487, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068595, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.55515e-08  4.55514e-08  1.91478e-09
      low eigenvalue method done, cpu time[sec] = 0.068876, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.56e-08  1.91e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.56e-09  1.91e-09         1
         *Z       ---       ---  9.55e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.91478e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.60033e-51  3.42901e-51   1.0263e-52  9.16906e-52  2.43175e-53  5.01131e-54  1.95313e-61 -1.22552e-83

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.4264, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         2.11455e+09
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.565537, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.68944, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1412.87      203.438        48.92      62.9336      6.57957      820.829      68.9015    0.0777712
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063264, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004898, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068612, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.80761e-08  2.80761e-08  9.83773e-10
      low eigenvalue method done, cpu time[sec] = 0.068884, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.81e-08  9.84e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.8e-09  9.84e-10         1
         *Z       ---       ---  9.55e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.83773e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.56044e-51  1.68614e-51   4.8889e-53  4.08899e-52   1.1115e-53  3.81371e-54  1.97108e-61   3.9117e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.39014, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         2.96037e+09
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.565433, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.6909, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1009.19      145.313      34.9428      44.9526      4.69969      586.307      49.2153    0.0555508
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063273, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004884, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06861, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.03672e-08  2.03672e-08  6.16768e-10
      low eigenvalue method done, cpu time[sec] = 0.068884, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.04e-08  6.17e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.02e-09  6.17e-10         1
         *Z       ---       ---  9.55e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.16768e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.91104e-51  1.02626e-51  2.93801e-53   2.3638e-52  6.52376e-54   3.0172e-54     1.99e-61   -1.728e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.39126, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         3.80619e+09
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.567541, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.66895, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            784.926      113.021      27.1778      34.9631      3.65532      456.016      38.2786    0.0432062
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.06327, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004897, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068624, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.60069e-08  1.60069e-08  4.28949e-10
      low eigenvalue method done, cpu time[sec] = 0.068898, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.6e-08  4.29e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.58e-09  4.29e-10         1
         *Z       ---       ---  9.55e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.28949e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.04922e-51  6.98255e-52  1.98672e-53  1.55638e-52   4.3417e-54  2.46247e-54  2.00957e-61 -5.66617e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.37576, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1          4.2291e+09
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.567308, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.66076, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            706.434      101.719        24.46      31.4668      3.28978      410.415      34.4507    0.0388856
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063288, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004863, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068598, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.44651e-08   1.4465e-08  3.67045e-10
      low eigenvalue method done, cpu time[sec] = 0.068888, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.45e-08  3.67e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.43e-09  3.67e-10         1
         *Z       ---       ---  9.55e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.67045e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.76183e-51  5.92088e-52  1.68152e-53   1.3034e-52  3.65175e-54  2.24546e-54  2.01949e-61  6.43792e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.36236, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         6.34365e+09
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.565049, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.67804, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            470.956      67.8126      16.3067      20.9779      2.19319       273.61      22.9672    0.0259237
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063283, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004928, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068661, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.78115e-09  9.78116e-09  1.97623e-10
      low eigenvalue method done, cpu time[sec] = 0.068934, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.78e-09  1.98e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.62e-10  1.98e-10         1
         *Z       ---       ---  9.55e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.97622e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.64447e-52  3.08177e-52  8.71833e-54  6.50783e-53  1.85216e-54  1.51555e-54  2.06847e-61 -4.82041e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.23079, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         8.45821e+09
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.565187, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.66981, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            353.217      50.8595        12.23      15.7334      1.64489      205.207      17.2254    0.0194428
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063281, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004877, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06861, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.40011e-09  7.40012e-09    1.251e-10
      low eigenvalue method done, cpu time[sec] = 0.068887, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.4e-09  1.25e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.26e-10  1.25e-10         1
         *Z       ---       ---  9.55e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.251e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.16786e-52  1.90717e-52  5.39414e-54  3.93167e-53  1.13041e-54  1.10666e-54  2.11309e-61 -2.82379e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.37328, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.05728e+10
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.567274, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.66531, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            282.573      40.6876        9.784      12.5867      1.31591      164.166      13.7803    0.0155542
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063302, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004889, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068649, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.95615e-09  5.95614e-09  8.68938e-11
      low eigenvalue method done, cpu time[sec] = 0.068925, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.96e-09  8.69e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.83e-10  8.69e-11         1
         *Z       ---       ---  9.55e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.68938e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.31465e-52  1.30292e-52  3.68839e-54  2.64344e-53  7.65598e-55  8.50488e-55  2.15029e-61 -4.54227e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.36606, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.26873e+10
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.567599, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.66665, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            235.478      33.9063      8.15333      10.4889      1.09659      136.805      11.4836    0.0129619
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.06326, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004981, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068703, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.98608e-09  4.98607e-09  6.41282e-11
      low eigenvalue method done, cpu time[sec] = 0.068985, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.99e-09  6.41e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.87e-10  6.41e-11         1
         *Z       ---       ---  9.55e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.41285e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.20112e-52  9.49298e-53   2.6907e-54  1.90398e-53  5.54523e-55  6.77637e-55  2.17873e-61 -1.16313e-83

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.37569, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.48019e+10
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.565751, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.67159, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            201.838      29.0625      6.98857      8.99051     0.939938      117.261      9.84307    0.0111102
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.06331, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004893, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068662, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.28909e-09  4.28909e-09  4.94004e-11
      low eigenvalue method done, cpu time[sec] = 0.068936, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.29e-09  4.94e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.18e-10  4.94e-11         1
         *Z       ---       ---  9.55e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.94003e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.47614e-52  7.23769e-53  2.05422e-54  1.43903e-53   4.2098e-55  5.54658e-55   2.1982e-61  1.69324e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.36989, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 350 K
            Well    Collision, 1/sec
              W1         1.69164e+10
      global relaxation matrix dimension = 526
      setting global matrices ... done, cpu time[sec] = 0.566108, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.66787, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            176.608      25.4297        6.115       7.8667     0.822446      102.604      8.61268    0.0097214
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.063292, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004902, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.068653, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.76393e-09  3.76392e-09  3.92929e-11
      low eigenvalue method done, cpu time[sec] = 0.068928, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.76e-09  3.93e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.67e-10  3.93e-11         1
         *Z       ---       ---  9.55e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.9293e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.97609e-52  5.70789e-53   1.6222e-54   1.1271e-53  3.30932e-55  4.63602e-55  2.20917e-61  3.86002e-84

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.36924, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 360 K
      Energy reference = 26785 1/cm
      Energy step      = 60 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007574
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.609214
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.372458
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.344425
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.23238
         W1 Well: minimal relaxation eigenvalue = 0.0918867
         W1 Well: maximal relaxation eigenvalue = 0.988445
         W1 Well:       grid size = 514
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4055 1/cm
         B1 Barrier:        grid size = 447
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -34 1/cm
         B2 Barrier:        grid size = 443
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 204 1/cm
         B3 Barrier:        grid size = 524
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4655 1/cm
         B4 Barrier:        grid size = 550
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6215 1/cm
         B5 Barrier: nonpositive number of states at -23135 1/cm => truncating
         B5 Barrier:        grid size = 832
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23135 1/cm
         B6 Barrier:        grid size = 422
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1464 1/cm
         B7 Barrier:        grid size = 368
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4704 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16765 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.00778, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 514
      MasterEquation::Barrier::truncate: real weight = 2.62796e+51
      MasterEquation::Barrier::truncate: effective weight = 7.1843e+47
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 514
      MasterEquation::Barrier::truncate: real weight = 1.59059e+53
      MasterEquation::Barrier::truncate: effective weight = 4.34835e+49
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 514
      MasterEquation::Barrier::truncate: real weight = 5.02779e+54
      MasterEquation::Barrier::truncate: effective weight = 7.81975e+48
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4055  -4055  3.5e+09 4.59e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -34 4.73e+14
         B2    205 6.88e+13
         B3  -4055 1.66e+13
         B4  -4055 2.13e+13
         B5  -4055 2.24e+12
         B6   1465 2.78e+14
         B7   4705 2.37e+13
         B8  16765 2.87e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.13e-07   5.4e-07  2.71e-14  4.25e-17  2.27e-48   0.00127       849  3.25e+24
          R  4.69e+06         1      2.53  1.27e-07  1.99e-10  1.06e-41  5.97e+03  3.98e+09  1.52e+31
         P1  1.85e+06     0.395         1  5.02e-08  7.86e-11  4.19e-42  2.35e+03  1.57e+09  6.01e+30
         P2  3.69e+13  7.87e+06  1.99e+07         1   0.00157  8.36e-35  4.69e+10  3.13e+16   1.2e+38
         P3  2.35e+16  5.02e+09  1.27e+10       638         1  5.33e-32  2.99e+13     2e+19  7.64e+40
         P4  4.41e+47  9.41e+40  2.39e+41   1.2e+34  1.88e+31         1  5.62e+44  3.75e+50  1.43e+72
         P5       786  0.000168  0.000425  2.13e-11  3.34e-14  1.78e-45         1  6.68e+05  2.55e+27
         P6   0.00118  2.51e-10  6.36e-10  3.19e-17     5e-20  2.67e-51   1.5e-06         1  3.82e+21
         P7  3.08e-25  6.57e-32  1.66e-31  8.35e-39  1.31e-41  6.98e-73  3.92e-28  2.61e-22         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.11e+29  7.87e+29  3.95e+22  6.19e+19   3.3e-12  1.85e+33  1.24e+39  4.73e+60
          R  3.22e-30         1      2.53  1.27e-07  1.99e-10  1.06e-41  5.97e+03  3.98e+09  1.52e+31
         P1  1.27e-30     0.395         1  5.02e-08  7.86e-11  4.19e-42  2.35e+03  1.57e+09  6.01e+30
         P2  2.53e-23  7.87e+06  1.99e+07         1   0.00157  8.36e-35  4.69e+10  3.13e+16   1.2e+38
         P3  1.62e-20  5.02e+09  1.27e+10       638         1  5.33e-32  2.99e+13     2e+19  7.64e+40
         P4  3.03e+11  9.41e+40  2.39e+41   1.2e+34  1.88e+31         1  5.62e+44  3.75e+50  1.43e+72
         P5   5.4e-34  0.000168  0.000425  2.13e-11  3.34e-14  1.78e-45         1  6.68e+05  2.55e+27
         P6  8.08e-40  2.51e-10  6.36e-10  3.19e-17     5e-20  2.67e-51   1.5e-06         1  3.82e+21
         P7  2.11e-61  6.57e-32  1.66e-31  8.35e-39  1.31e-41  6.98e-73  3.92e-28  2.61e-22         1
   MasterEquation::set:  done, cpu time[sec] = 4.02273, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1          4.1475e+08
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.540845, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.25122, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7450.22      1084.05      262.098      336.232      35.2809      4381.57      372.794     0.451653
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059271, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004636, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064357, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.46904e-07  1.46904e-07   9.6786e-09
      low eigenvalue method done, cpu time[sec] = 0.064632, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.47e-07  9.68e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.48e-08  9.68e-09         1
         *Z       ---       ---  3.21e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.6786e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.10376e-48  5.11299e-49  1.73204e-50  1.79594e-49  4.52514e-51   2.9316e-52  1.24359e-59  5.73468e-81

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.88105, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.24425e+09
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.541165, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.5148, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2483.41       361.35       87.366      112.077      11.7603      1460.52      124.265     0.150551
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059335, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00463, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064401, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.33128e-08  5.33128e-08  2.81994e-09
      low eigenvalue method done, cpu time[sec] = 0.064663, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.33e-08  2.82e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.31e-09  2.82e-09         1
         *Z       ---       ---  3.21e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.81994e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.51099e-49  1.37522e-49  4.06612e-51  3.54788e-50  9.48432e-52  2.23932e-52  1.25434e-59 -2.03632e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.14384, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         2.07375e+09
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.540525, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.52754, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1490.04       216.81      52.4196      67.2464      7.05618      876.313      74.5588    0.0903306
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059328, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004614, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064373, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.30528e-08  3.30528e-08  1.46784e-09
      low eigenvalue method done, cpu time[sec] = 0.064632, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.31e-08  1.47e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.27e-09  1.47e-09         1
         *Z       ---       ---  3.21e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.46784e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.8858e-49  6.83488e-50  1.96282e-51  1.60278e-50  4.39479e-52  1.71965e-52  1.26582e-59  8.29268e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.16197, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         2.90325e+09
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.540807, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.52839, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1064.32      154.864      37.4426      48.0331      5.04013      625.938      53.2563    0.0645219
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059364, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004618, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064422, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.4058e-08   2.4058e-08  9.28158e-10
      low eigenvalue method done, cpu time[sec] = 0.064684, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.41e-08  9.28e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.37e-09  9.28e-10         1
         *Z       ---       ---  3.21e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.28158e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.21405e-49  4.18936e-50  1.18978e-51  9.34146e-51  2.60199e-52  1.37005e-52  1.27792e-59  6.80746e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.0533, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         3.73275e+09
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.542102, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.53434, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            827.803       120.45       29.122      37.3591       3.9201      486.841      41.4216    0.0501837
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059349, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004626, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064412, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.89498e-08  1.89498e-08  6.49614e-10
      low eigenvalue method done, cpu time[sec] = 0.064672, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.89e-08   6.5e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.86e-09   6.5e-10         1
         *Z       ---       ---  3.21e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.49614e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.60052e-50   2.8652e-50  8.09654e-52  6.18695e-51  1.74265e-52  1.12452e-52  1.29041e-59  3.99877e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.16863, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1          4.1475e+09
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.540643, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.52689, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            745.022      108.405      26.2098      33.6232      3.52809      438.157      37.2794    0.0451653
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059344, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004638, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064415, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.71394e-08  1.71394e-08  5.57327e-10
      low eigenvalue method done, cpu time[sec] = 0.064676, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.71e-08  5.57e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.68e-09  5.57e-10         1
         *Z       ---       ---  3.21e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.57328e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.41388e-50  2.43479e-50   6.8707e-52  5.19378e-51  1.46953e-52  1.02796e-52  1.29672e-59  -1.4753e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.15935, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         6.22124e+09
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.541624, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.51016, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            496.682        72.27      17.4732      22.4155      2.35206      292.104      24.8529    0.0301102
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059367, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004622, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064423, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.16241e-08  1.16241e-08  3.03063e-10
      low eigenvalue method done, cpu time[sec] = 0.064685, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.16e-08  3.03e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.14e-09  3.03e-10         1
         *Z       ---       ---  3.21e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.03063e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.09916e-50  1.27756e-50  3.59747e-52  2.61644e-51  7.52562e-53  7.00752e-53  1.32787e-59  5.27768e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.1399, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         8.29499e+09
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.543453, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.50969, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            372.511      54.2025      13.1049      16.8116      1.76404      219.078      18.6397    0.0225827
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059327, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004618, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064386, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.81008e-09  8.81007e-09  1.93151e-10
      low eigenvalue method done, cpu time[sec] = 0.06465, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.81e-09  1.93e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.59e-10  1.93e-10         1
         *Z       ---       ---  3.21e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.93151e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.63953e-50  7.94959e-51  2.24068e-52  1.59009e-51   4.6228e-53  5.15466e-53  1.35619e-59 -2.42289e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.14339, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.03687e+10
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.541126, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.51427, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            298.009       43.362      10.4839      13.4493      1.41124      175.263      14.9118    0.0180661
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059294, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004631, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064365, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.09947e-09  7.09948e-09  1.34843e-10
      low eigenvalue method done, cpu time[sec] = 0.064623, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.1e-09  1.35e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.91e-10  1.35e-10         1
         *Z       ---       ---  3.21e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.34843e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.85597e-50    5.453e-51  1.53973e-52  1.07374e-51  3.14588e-53  3.98448e-53  1.37978e-59  8.17209e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.13867, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.24425e+10
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.54096, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.51497, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            248.341       36.135       8.7366      11.2077      1.17603      146.052      12.4265    0.0150551
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059468, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004623, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064523, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.9484e-09  5.94839e-09  9.99132e-11
      low eigenvalue method done, cpu time[sec] = 0.064781, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.95e-09  9.99e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.77e-10  9.99e-11         1
         *Z       ---       ---  3.21e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.99132e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.38258e-50  3.98565e-51  1.12762e-52  7.75988e-52  2.28706e-53  3.18982e-53  1.39786e-59 -8.28173e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.14267, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1         1.45162e+10
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.546641, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.52347, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            212.864      30.9729      7.48852      9.60663      1.00803      125.188      10.6513    0.0129044
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059768, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004623, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064826, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.12033e-09  5.12032e-09  7.72186e-11
      low eigenvalue method done, cpu time[sec] = 0.065093, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.12e-09  7.72e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.96e-10  7.72e-11         1
         *Z       ---       ---  3.21e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.72191e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.07302e-50   3.0466e-51  8.63622e-53  5.88092e-52  1.74153e-53  2.62142e-53  1.41032e-59  8.28915e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.99686, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 360 K
            Well    Collision, 1/sec
              W1           1.659e+10
      global relaxation matrix dimension = 514
      setting global matrices ... done, cpu time[sec] = 0.543023, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.516, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            186.256      27.1013      6.55245       8.4058     0.882022      109.539      9.31986    0.0112913
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.059712, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004618, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.064768, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.49576e-09  4.49575e-09  6.15877e-11
      low eigenvalue method done, cpu time[sec] = 0.065104, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.5e-09  6.16e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.35e-10  6.16e-11         1
         *Z       ---       ---  3.21e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.15881e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.58721e-51  2.40783e-51  6.83804e-53  4.61652e-52  1.37246e-53  2.19866e-53  1.41744e-59  1.69659e-82

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 9.14097, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 370 K
      Energy reference = 27063 1/cm
      Energy step      = 62 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007332
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.586153
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.355191
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.288152
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.07171
         W1 Well: minimal relaxation eigenvalue = 0.0911276
         W1 Well: maximal relaxation eigenvalue = 0.98697
         W1 Well:       grid size = 503
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4123 1/cm
         B1 Barrier:        grid size = 437
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -31 1/cm
         B2 Barrier:        grid size = 434
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 155 1/cm
         B3 Barrier:        grid size = 511
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4619 1/cm
         B4 Barrier:        grid size = 537
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6231 1/cm
         B5 Barrier: nonpositive number of states at -23157 1/cm => truncating
         B5 Barrier:        grid size = 810
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23157 1/cm
         B6 Barrier:        grid size = 413
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1456 1/cm
         B7 Barrier:        grid size = 361
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4680 1/cm
         B8 Barrier:        grid size = 166
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16771 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.74246, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 503
      MasterEquation::Barrier::truncate: real weight = 4.20494e+50
      MasterEquation::Barrier::truncate: effective weight = 1.18787e+47
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 503
      MasterEquation::Barrier::truncate: real weight = 2.26607e+52
      MasterEquation::Barrier::truncate: effective weight = 6.40146e+48
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 503
      MasterEquation::Barrier::truncate: real weight = 2.38408e+53
      MasterEquation::Barrier::truncate: effective weight = 9.84743e+47
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4123  -4123 3.43e+09 4.82e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -31 5.13e+14
         B2    156 7.55e+13
         B3  -4123 1.83e+13
         B4  -4123 2.35e+13
         B5  -4123 2.47e+12
         B6   1457 3.06e+14
         B7   4681 2.63e+13
         B8  16771 3.42e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.54e-07  3.82e-07  3.25e-14  6.07e-17  2.32e-47  0.000798       381  3.99e+23
          R  6.48e+06         1      2.48   2.1e-07  3.93e-10   1.5e-40  5.17e+03  2.47e+09  2.59e+30
         P1  2.62e+06     0.404         1   8.5e-08  1.59e-10  6.07e-41  2.09e+03  9.96e+08  1.04e+30
         P2  3.08e+13  4.75e+06  1.18e+07         1   0.00187  7.15e-34  2.46e+10  1.17e+16  1.23e+37
         P3  1.65e+16  2.54e+09   6.3e+09       535         1  3.82e-31  1.31e+13  6.27e+18  6.58e+39
         P4  4.31e+46  6.65e+39  1.65e+40   1.4e+33  2.62e+30         1  3.44e+43  1.64e+49  1.72e+70
         P5  1.25e+03  0.000194  0.000479  4.07e-11  7.61e-14  2.91e-44         1  4.78e+05  5.01e+26
         P6   0.00262  4.05e-10     1e-09  8.53e-17  1.59e-19  6.09e-50  2.09e-06         1  1.05e+21
         P7   2.5e-24  3.87e-31  9.58e-31  8.14e-38  1.52e-40  5.81e-71     2e-27  9.54e-22         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.64e+27  2.39e+28  2.03e+21  3.79e+18  1.45e-12  4.98e+31  2.38e+37  2.49e+58
          R  1.04e-28         1      2.48   2.1e-07  3.93e-10   1.5e-40  5.17e+03  2.47e+09  2.59e+30
         P1  4.19e-29     0.404         1   8.5e-08  1.59e-10  6.07e-41  2.09e+03  9.96e+08  1.04e+30
         P2  4.93e-22  4.75e+06  1.18e+07         1   0.00187  7.15e-34  2.46e+10  1.17e+16  1.23e+37
         P3  2.64e-19  2.54e+09   6.3e+09       535         1  3.82e-31  1.31e+13  6.27e+18  6.58e+39
         P4  6.89e+11  6.65e+39  1.65e+40   1.4e+33  2.62e+30         1  3.44e+43  1.64e+49  1.72e+70
         P5  2.01e-32  0.000194  0.000479  4.07e-11  7.61e-14  2.91e-44         1  4.78e+05  5.01e+26
         P6   4.2e-38  4.05e-10     1e-09  8.53e-17  1.59e-19  6.09e-50  2.09e-06         1  1.05e+21
         P7  4.01e-59  3.87e-31  9.58e-31  8.14e-38  1.52e-40  5.81e-71     2e-27  9.54e-22         1
   MasterEquation::set:  done, cpu time[sec] = 3.75774, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         4.06999e+08
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.517754, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.30866, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7848.71      1154.02      280.508      358.855      37.7904      4671.84      402.807     0.522288
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.0558, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004371, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060591, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.62469e-07  1.62469e-07  1.29616e-08
      low eigenvalue method done, cpu time[sec] = 0.060847, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.62e-07   1.3e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.63e-08   1.3e-08         1
         *Z       ---       ---  1.18e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.29616e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.5944e-47  1.64299e-47  5.47293e-49  5.55161e-48  1.40747e-49  1.05605e-50  6.36846e-58 -3.42213e-79

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.85051, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.221e+09
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.51932, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.3803, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2616.24      384.675      93.5027      119.618      12.5968      1557.28      134.269     0.174096
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055813, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004369, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06061, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.99289e-08  5.99289e-08  3.87808e-09
      low eigenvalue method done, cpu time[sec] = 0.060866, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.99e-08  3.88e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.93e-09  3.88e-09         1
         *Z       ---       ---  1.18e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.87808e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.17271e-47  4.51424e-48   1.3209e-49   1.1282e-48  3.03854e-50  8.15351e-51  6.42324e-58  1.22463e-79

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.92148, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         2.03499e+09
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.518369, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.38518, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1569.74      230.805      56.1016       71.771      7.55808      934.368      80.5615     0.104458
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055807, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004364, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060593, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.73914e-08  3.73914e-08  2.04431e-09
      low eigenvalue method done, cpu time[sec] = 0.06085, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.74e-08  2.04e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.68e-09  2.04e-09         1
         *Z       ---       ---  1.18e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.04431e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.37776e-48  2.26715e-48  6.45936e-50  5.16094e-49  1.42674e-50  6.31475e-51  6.48177e-58 -3.41849e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.92657, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         2.84899e+09
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.517432, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.38995, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1121.24      164.861      40.0726       51.265      5.39863      667.405      57.5439    0.0746125
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055729, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00437, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060525, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.73155e-08  2.73155e-08  1.30351e-09
      low eigenvalue method done, cpu time[sec] = 0.060775, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.73e-08   1.3e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.68e-09   1.3e-09         1
         *Z       ---       ---  1.18e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.30351e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.14012e-48  1.39926e-48  3.94862e-50  3.03205e-49   8.5192e-51  5.06451e-51  6.54334e-58  6.80394e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.92717, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         3.66299e+09
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.519881, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.37867, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            872.078      128.225      31.1676      39.8728      4.19893      519.093      44.7564     0.058032
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05576, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004365, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060545, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.15683e-08  2.15683e-08  9.17996e-10
      low eigenvalue method done, cpu time[sec] = 0.060799, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.16e-08  9.18e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.11e-09  9.18e-10         1
         *Z       ---       ---  1.18e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.17996e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.95115e-48  9.61906e-49  2.70386e-50  2.01981e-49  5.74107e-51  4.17949e-51  6.60681e-58  3.87921e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.92318, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         4.06999e+09
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.518131, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.39321, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            784.871      115.402      28.0508      35.8855      3.77904      467.184      40.2807    0.0522288
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055762, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004361, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060554, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.95263e-08  1.95263e-08  7.89618e-10
      low eigenvalue method done, cpu time[sec] = 0.060813, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.95e-08   7.9e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.91e-09   7.9e-10         1
         *Z       ---       ---  1.18e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.89618e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.55056e-48  8.19149e-49  2.30043e-50  1.69961e-49  4.85365e-51  3.82969e-51  6.63888e-58  4.45356e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.93395, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         6.10498e+09
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.519711, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.38741, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            523.247       76.935      18.7005      23.9237      2.51936      311.456      26.8538    0.0348192
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.05581, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004359, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060585, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.32864e-08  1.32863e-08  4.33595e-10
      low eigenvalue method done, cpu time[sec] = 0.060839, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.33e-08  4.34e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.29e-09  4.34e-10         1
         *Z       ---       ---  1.18e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.33595e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.42414e-48  4.33278e-49  1.21628e-50  8.63798e-50  2.50944e-51  2.63581e-51  6.79673e-58   6.0758e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.92994, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1         8.13998e+09
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.516474, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.38476, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            392.435      57.7012      14.0254      17.9427      1.88952      233.592      20.1404    0.0261144
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.056502, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004344, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.061255, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.00897e-08  1.00897e-08  2.78206e-10
      low eigenvalue method done, cpu time[sec] = 0.061505, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.01e-08  2.78e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.78e-10  2.78e-10         1
         *Z       ---       ---  1.18e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.78206e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.23273e-49  2.71087e-49  7.62614e-51  5.28075e-50  1.55145e-51  1.95274e-51  6.93994e-58  6.89594e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.9263, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1          1.0175e+10
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.522323, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.39385, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            313.948       46.161      11.2203      14.3542      1.51162      186.874      16.1123    0.0208915
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055753, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.00437, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060547, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.14145e-09  8.14144e-09  1.95204e-10
      low eigenvalue method done, cpu time[sec] = 0.060798, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.14e-09  1.95e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.87e-10  1.95e-10         1
         *Z       ---       ---  1.18e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.95204e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.52517e-49  1.86711e-49  5.26661e-51  3.58154e-50  1.06085e-51  1.51798e-51  7.05936e-58  8.72308e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.93292, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.221e+10
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.517962, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.39084, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            261.624      38.4675      9.35027      11.9618      1.25968      155.728      13.4269    0.0174096
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055724, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004364, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06051, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.82803e-09  6.82803e-09  1.45218e-10
      low eigenvalue method done, cpu time[sec] = 0.06083, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.83e-09  1.45e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.59e-10  1.45e-10         1
         *Z       ---       ---  1.18e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.45217e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.88058e-49  1.36907e-49  3.87216e-51   2.5972e-50  7.74141e-52   1.2209e-51  7.15111e-58  9.66301e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.93035, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1          1.4245e+10
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.518912, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.39005, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            224.249      32.9721      8.01452       10.253      1.07973      133.481      11.5088    0.0149225
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055761, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004356, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060539, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.88188e-09  5.88187e-09  1.12601e-10
      low eigenvalue method done, cpu time[sec] = 0.060817, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.88e-09  1.13e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.66e-10  1.13e-10         1
         *Z       ---       ---  1.18e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.12601e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.80046e-49  1.04925e-49  2.97514e-51  1.97377e-50  5.91291e-52  1.00729e-51  7.21474e-58  8.21093e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.92869, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 370 K
            Well    Collision, 1/sec
              W1           1.628e+10
      global relaxation matrix dimension = 503
      setting global matrices ... done, cpu time[sec] = 0.517587, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.38927, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            196.218      28.8506       7.0127      8.97137      0.94476      116.796      10.0702    0.0130572
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055706, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004358, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060487, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.16745e-09  5.16746e-09  9.00558e-11
      low eigenvalue method done, cpu time[sec] = 0.060735, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.17e-09  9.01e-11         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.97e-10  9.01e-11         1
         *Z       ---       ---  1.18e+34
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.00555e-11
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.04999e-49  8.31073e-50  2.36203e-51  1.55298e-50  4.67177e-52  8.47721e-52  7.25175e-58  7.74722e-80

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.92939, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 380 K
      Energy reference = 27341 1/cm
      Energy step      = 63 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007122
         W1 Well: collisional kernel bandwidth = 59
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.572811
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.355796
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.30841
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 2.06981
         W1 Well: minimal relaxation eigenvalue = 0.0904106
         W1 Well: maximal relaxation eigenvalue = 0.989469
         W1 Well:       grid size = 501
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4222 1/cm
         B1 Barrier:        grid size = 434
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = 0 1/cm
         B2 Barrier:        grid size = 431
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 188 1/cm
         B3 Barrier: nonpositive number of states at -4600 1/cm => truncating
         B3 Barrier:        grid size = 507
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4599 1/cm
         B4 Barrier:        grid size = 533
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6238 1/cm
         B5 Barrier: nonpositive number of states at -23185 1/cm => truncating
         B5 Barrier:        grid size = 802
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23184 1/cm
         B6 Barrier:        grid size = 411
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1447 1/cm
         B7 Barrier:        grid size = 360
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4661 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16757 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.74163, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 501
      MasterEquation::Barrier::truncate: real weight = 7.43671e+49
      MasterEquation::Barrier::truncate: effective weight = 2.1347e+46
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 501
      MasterEquation::Barrier::truncate: real weight = 3.59124e+51
      MasterEquation::Barrier::truncate: effective weight = 1.03086e+48
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 501
      MasterEquation::Barrier::truncate: real weight = 1.44668e+52
      MasterEquation::Barrier::truncate: effective weight = 1.39163e+47
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4222  -4222 3.32e+09 5.06e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1      0 5.57e+14
         B2    189 8.27e+13
         B3  -4222 2.02e+13
         B4  -4222 2.58e+13
         B5  -4222 2.72e+12
         B6   1448 3.35e+14
         B7   4661 2.93e+13
         B8  16757 4.06e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.28e-07  3.11e-07  4.35e-14  9.61e-17  2.38e-46  0.000578       201  6.19e+22
          R   7.8e+06         1      2.42  3.39e-07  7.49e-10  1.85e-39  4.51e+03  1.57e+09  4.83e+29
         P1  3.22e+06     0.413         1   1.4e-07  3.09e-10  7.64e-40  1.86e+03  6.47e+08  1.99e+29
         P2   2.3e+13  2.95e+06  7.15e+06         1   0.00221  5.46e-33  1.33e+10  4.62e+15  1.42e+36
         P3  1.04e+16  1.34e+09  3.24e+09       453         1  2.47e-30  6.02e+12  2.09e+18  6.44e+38
         P4  4.21e+45   5.4e+38  1.31e+39  1.83e+32  4.04e+29         1  2.43e+42  8.47e+47  2.61e+68
         P5  1.73e+03  0.000222  0.000538  7.52e-11  1.66e-13  4.11e-43         1  3.48e+05  1.07e+26
         P6   0.00497  6.38e-10  1.55e-09  2.16e-16  4.77e-19  1.18e-48  2.87e-06         1  3.08e+20
         P7  1.62e-23  2.07e-30  5.02e-30  7.03e-37  1.55e-39  3.84e-69  9.34e-27  3.25e-21         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.59e+26   8.7e+26  1.22e+20  2.69e+17  6.65e-13  1.62e+30  5.63e+35  1.73e+56
          R  2.78e-27         1      2.42  3.39e-07  7.49e-10  1.85e-39  4.51e+03  1.57e+09  4.83e+29
         P1  1.15e-27     0.413         1   1.4e-07  3.09e-10  7.64e-40  1.86e+03  6.47e+08  1.99e+29
         P2  8.21e-21  2.95e+06  7.15e+06         1   0.00221  5.46e-33  1.33e+10  4.62e+15  1.42e+36
         P3  3.72e-18  1.34e+09  3.24e+09       453         1  2.47e-30  6.02e+12  2.09e+18  6.44e+38
         P4   1.5e+12   5.4e+38  1.31e+39  1.83e+32  4.04e+29         1  2.43e+42  8.47e+47  2.61e+68
         P5  6.18e-31  0.000222  0.000538  7.52e-11  1.66e-13  4.11e-43         1  3.48e+05  1.07e+26
         P6  1.78e-36  6.38e-10  1.55e-09  2.16e-16  4.77e-19  1.18e-48  2.87e-06         1  3.08e+20
         P7  5.77e-57  2.07e-30  5.02e-30  7.03e-37  1.55e-39  3.84e-69  9.34e-27  3.25e-21         1
   MasterEquation::set:  done, cpu time[sec] = 3.7561, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.99626e+08
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.513402, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.29783, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8259.95      1227.18      299.863      382.572       40.431      4975.31      434.619     0.601894
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055246, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004466, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060172, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.62823e-07  1.62823e-07  1.53539e-08
      low eigenvalue method done, cpu time[sec] = 0.060429, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.63e-07  1.54e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.62e-08  1.54e-08         1
         *Z       ---       ---  4.83e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.53539e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.73513e-46  4.39221e-46  1.44103e-47  1.43299e-46  3.65439e-48    3.151e-49  2.65322e-56   1.3529e-77

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.82832, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.19888e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.515279, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.34313, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2753.32       409.06      99.9544      127.524       13.477      1658.44      144.873     0.200631
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055153, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004335, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059911, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.10895e-08  6.10895e-08  4.71203e-09
      low eigenvalue method done, cpu time[sec] = 0.060171, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.11e-08  4.71e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.01e-09  4.71e-09         1
         *Z       ---       ---  4.83e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.71203e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.25449e-46  1.23182e-46  3.57195e-48  2.99195e-47   8.1153e-49  2.45694e-49  2.67596e-56  1.32888e-77

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.87403, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.99813e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.513734, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.35712, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1651.99      245.436      59.9726      76.5145       8.0862      995.062      86.9237     0.120379
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055099, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004328, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059851, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.83698e-08  3.83698e-08  2.51446e-09
      low eigenvalue method done, cpu time[sec] = 0.060104, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.84e-08  2.51e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.75e-09  2.51e-09         1
         *Z       ---       ---  4.83e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.51446e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.79141e-46  6.24959e-47  1.76882e-48  1.38536e-47  3.85954e-49  1.91814e-49  2.70025e-56  9.51727e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.88468, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         2.79738e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.514113, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.36743, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1179.99      175.311      42.8376      54.6532      5.77586      710.758      62.0884    0.0859848
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055138, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004328, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059887, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.8138e-08   2.8138e-08  1.61635e-09
      low eigenvalue method done, cpu time[sec] = 0.060149, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.81e-08  1.62e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.74e-09  1.62e-09         1
         *Z       ---       ---  4.83e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.61635e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.1723e-46  3.88332e-47  1.09025e-48  8.20247e-48  2.32368e-49  1.54812e-49  2.72576e-56  7.96028e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.89541, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.59663e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.513821, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.3591, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            917.772      136.353      33.3181       42.508      4.49234      552.812       48.291    0.0668771
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055142, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004358, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059921, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.2275e-08   2.2275e-08  1.14521e-09
      low eigenvalue method done, cpu time[sec] = 0.06018, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.23e-08  1.15e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.16e-09  1.15e-09         1
         *Z       ---       ---  4.83e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.14521e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.40699e-47    2.683e-47  7.51137e-49  5.49519e-48  1.57544e-49  1.28422e-49  2.75202e-56  1.04799e-77

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.88531, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         3.99626e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.513631, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.35618, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            825.995      122.718      29.9863      38.2572       4.0431      497.531      43.4619    0.0601894
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055114, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004342, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059913, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.01863e-08  2.01863e-08  9.87548e-10
      low eigenvalue method done, cpu time[sec] = 0.060165, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.02e-08  9.88e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.96e-09  9.88e-10         1
         *Z       ---       ---  4.83e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.87548e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.28419e-47   2.2896e-47  6.40689e-49  4.63486e-48  1.33526e-49  1.17942e-49  2.76527e-56  8.16336e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.88092, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         5.99438e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.515488, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.35859, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            550.663       81.812      19.9909      25.5048       2.6954      331.687      28.9746    0.0401262
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055197, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004344, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059962, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.3783e-08  1.37829e-08  5.47509e-10
      low eigenvalue method done, cpu time[sec] = 0.060218, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.38e-08  5.48e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.33e-09  5.48e-10         1
         *Z       ---       ---  4.83e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.47509e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.10657e-47   1.2207e-47  3.42019e-49  2.37624e-48  6.96881e-50  8.19268e-50  2.83039e-56  4.69636e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.88539, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         7.99251e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.51436, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.35314, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            412.997       61.359      14.9932      19.1286      2.02155      248.765      21.7309    0.0300947
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055232, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004424, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.060079, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.04886e-08  1.04885e-08  3.53635e-10
      low eigenvalue method done, cpu time[sec] = 0.060348, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.05e-08  3.54e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.01e-09  3.54e-10         1
         *Z       ---       ---  4.83e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.53634e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.68016e-47  7.67912e-48   2.1587e-49  1.46129e-48  4.33614e-50  6.11155e-50  2.88935e-56  7.54481e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.87542, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         9.99064e+09
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.513861, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.36761, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            330.398      49.0872      11.9945      15.3029      1.61724      199.012      17.3847    0.0240757
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055212, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004329, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059955, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.47524e-09  8.47522e-09  2.49374e-10
      low eigenvalue method done, cpu time[sec] = 0.060204, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.48e-09  2.49e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.14e-10  2.49e-10         1
         *Z       ---       ---  4.83e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.49373e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.90378e-47  5.31061e-48  1.49822e-49  9.95427e-49  2.97916e-50  4.77698e-50  2.93852e-56  4.01411e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.89081, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.19888e+10
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.514931, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.35831, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            275.332       40.906      9.99544      12.7524       1.3477      165.844      14.4873    0.0200631
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055135, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004311, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059869, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.11528e-09  7.11527e-09  1.86255e-10
      low eigenvalue method done, cpu time[sec] = 0.06012, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.12e-09  1.86e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.82e-10  1.86e-10         1
         *Z       ---       ---  4.83e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.86254e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.4297e-47  3.90659e-48  1.10587e-49  7.24329e-49  2.18221e-50   3.8595e-50  2.97639e-56  8.80222e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.88515, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1         1.39869e+10
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.513276, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.35178, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            235.999      35.0623      8.56752      10.9306      1.15517      142.152      12.4177     0.017197
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055261, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004302, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059984, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.13416e-09  6.13415e-09  1.44894e-10
      low eigenvalue method done, cpu time[sec] = 0.060234, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.13e-09  1.45e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.87e-10  1.45e-10         1
         *Z       ---       ---  4.83e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.44894e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.11699e-47  3.00189e-48  8.52436e-50  5.52001e-49  1.67193e-50  3.19653e-50   3.0028e-56  6.88661e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.87642, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 380 K
            Well    Collision, 1/sec
              W1          1.5985e+10
      global relaxation matrix dimension = 501
      setting global matrices ... done, cpu time[sec] = 0.513129, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.35086, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            206.499      30.6795      7.49658      9.56431      1.01078      124.383      10.8655    0.0150473
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.055231, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004317, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.059962, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.39247e-09  5.39247e-09  1.16204e-10
      low eigenvalue method done, cpu time[sec] = 0.060211, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.39e-09  1.16e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.15e-10  1.16e-10         1
         *Z       ---       ---  4.83e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.16203e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.98935e-48  2.38294e-48  6.78611e-50  4.35335e-49   1.3244e-50   2.6991e-50  3.01839e-56  8.88715e-78

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.87737, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 390 K
      Energy reference = 27619 1/cm
      Energy step      = 65 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008569
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.549224
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.338687
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.298635
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.94852
         W1 Well: minimal relaxation eigenvalue = 0.0896865
         W1 Well: maximal relaxation eigenvalue = 0.988042
         W1 Well:       grid size = 491
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4296 1/cm
         B1 Barrier:        grid size = 425
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -6 1/cm
         B2 Barrier:        grid size = 422
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 188 1/cm
         B3 Barrier:        grid size = 496
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4621 1/cm
         B4 Barrier:        grid size = 520
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6181 1/cm
         B5 Barrier: nonpositive number of states at -23211 1/cm => truncating
         B5 Barrier:        grid size = 782
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23211 1/cm
         B6 Barrier:        grid size = 402
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1488 1/cm
         B7 Barrier:        grid size = 353
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4673 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16763 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.56498, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 491
      MasterEquation::Barrier::truncate: real weight = 1.44247e+49
      MasterEquation::Barrier::truncate: effective weight = 4.27203e+45
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 491
      MasterEquation::Barrier::truncate: real weight = 6.27866e+50
      MasterEquation::Barrier::truncate: effective weight = 1.8595e+47
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 491
      MasterEquation::Barrier::truncate: real weight = 1.10182e+51
      MasterEquation::Barrier::truncate: effective weight = 2.17126e+46
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4296  -4296 3.25e+09 5.31e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -6 6.03e+14
         B2    189 9.06e+13
         B3  -4296 2.22e+13
         B4  -4296 2.83e+13
         B5  -4296    3e+12
         B6   1489 3.68e+14
         B7   4674 3.25e+13
         B8  16764 4.81e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.67e-08   2.3e-07  5.16e-14  1.34e-16  1.94e-45  0.000383      98.7   9.5e+21
          R  1.03e+07         1      2.37  5.34e-07  1.38e-09  2.01e-38  3.96e+03  1.02e+09  9.82e+28
         P1  4.35e+06     0.421         1  2.25e-07  5.81e-10  8.45e-39  1.67e+03   4.3e+08  4.14e+28
         P2  1.94e+13  1.87e+06  4.45e+06         1   0.00259  3.76e-32  7.42e+09  1.91e+15  1.84e+35
         P3  7.49e+15  7.25e+08  1.72e+09       387         1  1.45e-29  2.87e+12   7.4e+17  7.12e+37
         P4  5.15e+44  4.98e+37  1.18e+38  2.66e+31  6.88e+28         1  1.97e+41  5.09e+46   4.9e+66
         P5  2.61e+03  0.000252    0.0006  1.35e-10  3.48e-13  5.07e-42         1  2.58e+05  2.48e+25
         P6    0.0101   9.8e-10  2.33e-09  5.23e-16  1.35e-18  1.97e-47  3.88e-06         1  9.63e+19
         P7  1.05e-22  1.02e-29  2.42e-29  5.43e-36   1.4e-38  2.04e-67  4.03e-26  1.04e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.58e+25  3.75e+25  8.44e+18  2.18e+16  3.17e-13  6.26e+28  1.61e+34  1.55e+54
          R  6.33e-26         1      2.37  5.34e-07  1.38e-09  2.01e-38  3.96e+03  1.02e+09  9.82e+28
         P1  2.66e-26     0.421         1  2.25e-07  5.81e-10  8.45e-39  1.67e+03   4.3e+08  4.14e+28
         P2  1.19e-19  1.87e+06  4.45e+06         1   0.00259  3.76e-32  7.42e+09  1.91e+15  1.84e+35
         P3  4.58e-17  7.25e+08  1.72e+09       387         1  1.45e-29  2.87e+12   7.4e+17  7.12e+37
         P4  3.15e+12  4.98e+37  1.18e+38  2.66e+31  6.88e+28         1  1.97e+41  5.09e+46   4.9e+66
         P5   1.6e-29  0.000252    0.0006  1.35e-10  3.48e-13  5.07e-42         1  2.58e+05  2.48e+25
         P6   6.2e-35   9.8e-10  2.33e-09  5.23e-16  1.35e-18  1.97e-47  3.88e-06         1  9.63e+19
         P7  6.44e-55  1.02e-29  2.42e-29  5.43e-36   1.4e-38  2.04e-67  4.03e-26  1.04e-20         1
   MasterEquation::set:  done, cpu time[sec] = 3.58005, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         3.92601e+08
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.495227, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.32914, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             8684.2      1303.61      320.196       407.42      43.2076      5292.34      468.302     0.691782
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052223, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004199, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056825, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.79532e-07  1.79532e-07  1.97055e-08
      low eigenvalue method done, cpu time[sec] = 0.057068, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.8e-07  1.97e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.78e-08  1.97e-08         1
         *Z       ---       ---  1.97e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.97055e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.22531e-44  9.91309e-45  3.20829e-46  3.13333e-45  8.03473e-47  7.91413e-48  9.13406e-55  1.62369e-75

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.79619, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.1778e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.495467, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.24785, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2894.73      434.538      106.732      135.807      14.4025      1764.11      156.101     0.230594
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.0525, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004166, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.057064, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.8595e-08   6.8595e-08  6.19741e-09
      low eigenvalue method done, cpu time[sec] = 0.057312, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.86e-08   6.2e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.71e-09   6.2e-09         1
         *Z       ---       ---  1.97e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.19741e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.61662e-45  2.83621e-45  8.16033e-47  6.71422e-46  1.83329e-47  6.22405e-48  9.21207e-55  1.27014e-75

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.7178, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1           1.963e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.495179, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.24638, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1736.84      260.723      64.0393      81.4841      8.64151      1058.47      93.6603     0.138356
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052099, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004151, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056652, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.33927e-08  4.33927e-08  3.34662e-09
      low eigenvalue method done, cpu time[sec] = 0.056892, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.34e-08  3.35e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.22e-09  3.35e-09         1
         *Z       ---       ---  1.97e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.34662e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.24194e-45  1.45331e-45  4.09083e-47  3.14569e-46  8.82777e-48  4.89526e-48  9.29537e-55  9.89451e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.71623, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          2.7482e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.495602, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.24149, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1240.6       186.23      45.7423      58.2029      6.17251      756.048      66.9002     0.098826
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052363, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004162, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056928, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.19535e-08  3.19535e-08  2.16839e-09
      low eigenvalue method done, cpu time[sec] = 0.057173, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.2e-08  2.17e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.09e-09  2.17e-09         1
         *Z       ---       ---  1.97e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.16839e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.79789e-45  9.09064e-46  2.54195e-47  1.87674e-46  5.35796e-48  3.97453e-48  9.38275e-55  9.74896e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.7126, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          3.5334e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.49269, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.24465, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            964.912      144.846      35.5774      45.2689      4.80084      588.038      52.0335    0.0768647
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052126, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004148, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056673, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.53661e-08  2.53661e-08  1.54548e-09
      low eigenvalue method done, cpu time[sec] = 0.056917, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.54e-08  1.55e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.45e-09  1.55e-09         1
         *Z       ---       ---  1.97e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.54548e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.01836e-45    6.312e-46  1.76188e-47  1.26434e-46  3.65434e-48   3.3133e-48  9.47255e-55  9.81626e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.57006, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         3.92601e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.495276, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.25038, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             868.42      130.361      32.0196       40.742      4.32076      529.234      46.8302    0.0691782
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052061, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004163, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056623, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.30127e-08  2.30127e-08  1.33601e-09
      low eigenvalue method done, cpu time[sec] = 0.05692, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.3e-08  1.34e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.22e-09  1.34e-09         1
         *Z       ---       ---  1.97e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.33601e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.75314e-45  5.39767e-46  1.50658e-47  1.06886e-46  3.10488e-48  3.04954e-48  9.51782e-55   1.0736e-75

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.72035, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         5.88901e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.500941, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.26099, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            578.947      86.9075      21.3464      27.1614       2.8805      352.823      31.2201    0.0461188
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052131, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004174, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056703, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.57723e-08  1.57723e-08  7.47742e-10
      low eigenvalue method done, cpu time[sec] = 0.056943, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.58e-08  7.48e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.51e-09  7.48e-10         1
         *Z       ---       ---  1.97e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.47742e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.97776e-46   2.9005e-46  8.11958e-48  5.52754e-47  1.63562e-48  2.13719e-48  9.73975e-55  9.56382e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.57557, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         7.85201e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.494135, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.25418, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             434.21      65.1806      16.0098       20.371      2.16038      264.617      23.4151    0.0345891
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052154, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.004149, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056703, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.20299e-08  1.20299e-08  4.86148e-10
      low eigenvalue method done, cpu time[sec] = 0.056952, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.2e-08  4.86e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-09  4.86e-10         1
         *Z       ---       ---  1.97e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.86148e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.55518e-46  1.83458e-46  5.15863e-48  3.41927e-47  1.02423e-48  1.60498e-48  9.94032e-55  9.89694e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.71928, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1         9.81501e+09
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.494261, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.25229, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            347.368      52.1445      12.8079      16.2968       1.7283      211.694      18.7321    0.0276713
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052104, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004176, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056679, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.73596e-09  9.73596e-09   3.4453e-10
      low eigenvalue method done, cpu time[sec] = 0.056923, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.74e-09  3.45e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.29e-10  3.45e-10         1
         *Z       ---       ---  1.97e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.4453e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.67973e-46  1.27393e-46  3.59811e-48  2.33946e-47  7.07079e-49  1.26121e-48  1.01076e-54  1.09617e-75

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.71625, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.1778e+10
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.494188, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.26135, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            289.473      43.4538      10.6732      13.5807      1.44025      176.411      15.6101    0.0230594
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052105, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004159, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056666, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   8.1831e-09  8.18311e-09   2.5835e-10
      low eigenvalue method done, cpu time[sec] = 0.056911, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.18e-09  2.58e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.79e-10  2.58e-10         1
         *Z       ---       ---  1.97e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.58349e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.5285e-46  9.40167e-47  2.66638e-48  1.70823e-47  5.19897e-49   1.0235e-48  1.02366e-54   1.0745e-75

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.72485, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.3741e+10
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.495687, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.2606, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             248.12      37.2461      9.14847      11.6406       1.2345       151.21        13.38    0.0197652
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052373, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004167, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056935, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.06098e-09  7.06098e-09  2.01639e-10
      low eigenvalue method done, cpu time[sec] = 0.057178, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.06e-09  2.02e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.71e-10  2.02e-10         1
         *Z       ---       ---  1.97e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.01639e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.76589e-46  7.24363e-47  2.06202e-48   1.3055e-47  3.99565e-49  8.50883e-49  1.03271e-54   9.9637e-76

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.72946, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 390 K
            Well    Collision, 1/sec
              W1          1.5704e+10
      global relaxation matrix dimension = 491
      setting global matrices ... done, cpu time[sec] = 0.493818, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.24804, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            217.105      32.5903      8.00491      10.1855      1.08019      132.308      11.7075    0.0172946
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.052091, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004155, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.056649, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.21162e-09  6.21162e-09  1.62161e-10
      low eigenvalue method done, cpu time[sec] = 0.05689, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.21e-09  1.62e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.89e-10  1.62e-10         1
         *Z       ---       ---  1.97e+33
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.62161e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.2322e-46  5.76299e-47  1.64606e-48  1.03203e-47  3.17343e-49  7.20826e-49  1.03812e-54  1.11211e-75

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.72217, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 400 K
      Energy reference = 27897 1/cm
      Energy step      = 67 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008641
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.535215
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.324379
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.295429
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.86379
         W1 Well: minimal relaxation eigenvalue = 0.0889884
         W1 Well: maximal relaxation eigenvalue = 0.986687
         W1 Well:       grid size = 481
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4330 1/cm
         B1 Barrier:        grid size = 417
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -42 1/cm
         B2 Barrier:        grid size = 414
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 158 1/cm
         B3 Barrier:        grid size = 486
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4664 1/cm
         B4 Barrier:        grid size = 509
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6205 1/cm
         B5 Barrier: nonpositive number of states at -23157 1/cm => truncating
         B5 Barrier:        grid size = 762
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23157 1/cm
         B6 Barrier:        grid size = 394
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1498 1/cm
         B7 Barrier:        grid size = 346
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4715 1/cm
         B8 Barrier:        grid size = 166
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16775 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.52568, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 481
      MasterEquation::Barrier::truncate: real weight = 3.04721e+48
      MasterEquation::Barrier::truncate: effective weight = 9.30235e+44
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 481
      MasterEquation::Barrier::truncate: real weight = 1.202e+50
      MasterEquation::Barrier::truncate: effective weight = 3.66938e+46
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 481
      MasterEquation::Barrier::truncate: real weight = 1.03424e+50
      MasterEquation::Barrier::truncate: effective weight = 3.65361e+45
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4330  -4330 3.21e+09 5.57e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -42 6.53e+14
         B2    159 9.91e+13
         B3  -4330 2.45e+13
         B4  -4330 3.11e+13
         B5  -4330  3.3e+12
         B6   1499 4.03e+14
         B7   4715 3.61e+13
         B8  16775 5.68e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.46e-08  1.51e-07   5.3e-14  1.59e-16  1.25e-44  0.000226      43.9   1.4e+21
          R  1.55e+07         1      2.33  8.21e-07  2.47e-09  1.93e-37   3.5e+03  6.79e+08  2.17e+28
         P1  6.64e+06     0.429         1  3.52e-07  1.06e-09  8.28e-38   1.5e+03  2.91e+08   9.3e+27
         P2  1.89e+13  1.22e+06  2.84e+06         1   0.00301  2.35e-31  4.27e+09  8.27e+14  2.64e+34
         P3  6.27e+15  4.05e+08  9.44e+08       333         1  7.82e-29  1.42e+12  2.75e+17  8.78e+36
         P4  8.02e+43  5.18e+36  1.21e+37  4.25e+30  1.28e+28         1  1.81e+40  3.52e+45  1.12e+65
         P5  4.42e+03  0.000286  0.000665  2.34e-10  7.05e-13  5.51e-41         1  1.94e+05  6.19e+24
         P6    0.0228  1.47e-09  3.43e-09  1.21e-15  3.64e-18  2.84e-46  5.16e-06         1  3.19e+19
         P7  7.14e-22  4.61e-29  1.07e-28  3.79e-35  1.14e-37   8.9e-66  1.62e-25  3.13e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.13e+23  1.89e+24  6.67e+17  2.01e+15  1.57e-13  2.85e+27  5.52e+32  1.76e+52
          R  1.23e-24         1      2.33  8.21e-07  2.47e-09  1.93e-37   3.5e+03  6.79e+08  2.17e+28
         P1  5.28e-25     0.429         1  3.52e-07  1.06e-09  8.28e-38   1.5e+03  2.91e+08   9.3e+27
         P2   1.5e-18  1.22e+06  2.84e+06         1   0.00301  2.35e-31  4.27e+09  8.27e+14  2.64e+34
         P3  4.99e-16  4.05e+08  9.44e+08       333         1  7.82e-29  1.42e+12  2.75e+17  8.78e+36
         P4  6.38e+12  5.18e+36  1.21e+37  4.25e+30  1.28e+28         1  1.81e+40  3.52e+45  1.12e+65
         P5  3.51e-28  0.000286  0.000665  2.34e-10  7.05e-13  5.51e-41         1  1.94e+05  6.19e+24
         P6  1.81e-33  1.47e-09  3.43e-09  1.21e-15  3.64e-18  2.84e-46  5.16e-06         1  3.19e+19
         P7  5.68e-53  4.61e-29  1.07e-28  3.79e-35  1.14e-37   8.9e-66  1.62e-25  3.13e-20         1
   MasterEquation::set:  done, cpu time[sec] = 3.54024, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.85898e+08
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.473234, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.19684, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9121.56      1383.44      341.542      433.436      46.1249      5623.29      503.931     0.793016
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04938, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.004018, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053789, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.26298e-07  2.26298e-07  2.85256e-08
      low eigenvalue method done, cpu time[sec] = 0.054024, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.26e-07  2.85e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.23e-08  2.85e-08         1
         *Z       ---       ---  7.87e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.85256e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.34629e-43  1.91166e-43  6.11251e-45  5.87145e-44  1.51346e-45  1.68373e-46  2.63379e-53  8.08626e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.5984, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.15769e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.475065, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.12395, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3040.52      461.148      113.847      144.479       15.375      1874.43      167.977     0.264339
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04917, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003961, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053519, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.81366e-08  8.81366e-08  9.18581e-09
      low eigenvalue method done, cpu time[sec] = 0.05375, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.81e-08  9.19e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.58e-09  9.19e-09         1
         *Z       ---       ---  7.87e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.18581e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.52185e-43  5.57687e-44  1.59403e-45  1.28999e-44  3.54448e-46   1.3375e-46   2.6562e-53  9.24531e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.52284, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.92949e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.476101, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.12214, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1824.31      276.689      68.3084      86.6871      9.22497      1124.66      100.786     0.158603
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049143, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003962, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053492, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.61773e-08  5.61773e-08  5.01794e-09
      low eigenvalue method done, cpu time[sec] = 0.053728, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.62e-08  5.02e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.44e-09  5.02e-09         1
         *Z       ---       ---  7.87e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.01794e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.57263e-44  2.88559e-44  8.08701e-46  6.11335e-45  1.72747e-46  1.06019e-46  2.68011e-53   9.0195e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.52185, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         2.70128e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.473011, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.12233, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1303.08      197.635      48.7917      61.9194      6.58926      803.327      71.9902     0.113288
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049512, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003951, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053852, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.15505e-08  4.15505e-08  3.27652e-09
      low eigenvalue method done, cpu time[sec] = 0.054084, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.16e-08  3.28e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.01e-09  3.28e-09         1
         *Z       ---       ---  7.87e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.27652e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.69784e-44  1.81679e-44  5.06507e-46  3.67449e-45  1.05678e-46  8.66049e-47  2.70516e-53  7.86022e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.51991, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.47308e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.475094, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.12106, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1013.51      153.716      37.9491      48.1595      5.12498       624.81      55.9924    0.0881129
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049517, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00395, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053854, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.30831e-08  3.30831e-08  2.34885e-09
      low eigenvalue method done, cpu time[sec] = 0.054084, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.31e-08  2.35e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.18e-09  2.35e-09         1
         *Z       ---       ---  7.87e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.34885e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.13416e-44  1.26765e-44  3.53151e-46  2.48907e-45  7.24987e-47   7.2558e-47  2.73087e-53   8.1454e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.52315, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         3.85898e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.473142, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.12521, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            912.156      138.344      34.1542      43.3436      4.61249      562.329      50.3931    0.0793016
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049233, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003921, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053541, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.00489e-08  3.00489e-08  2.03544e-09
      low eigenvalue method done, cpu time[sec] = 0.053779, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     3e-08  2.04e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.88e-09  2.04e-09         1
         *Z       ---       ---  7.87e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.03544e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.59963e-44  1.08625e-44  3.02727e-46  2.10902e-45  6.17477e-47  6.69283e-47  2.74381e-53  8.50147e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.52345, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         5.78846e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.473714, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.12632, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            608.104      92.2296      22.7695      28.8957      3.07499      374.886      33.5954    0.0528678
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049221, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003951, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053561, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.0679e-08   2.0679e-08  1.14984e-09
      low eigenvalue method done, cpu time[sec] = 0.053794, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.07e-08  1.15e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.98e-09  1.15e-09         1
         *Z       ---       ---  7.87e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.14984e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.06784e-44  5.88277e-45  1.64694e-46  1.10005e-45  3.28287e-47  4.73236e-47  2.80716e-53  9.02985e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.52231, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         7.71795e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.473497, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.12474, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            456.078      69.1722      17.0771      21.6718      2.30624      281.164      25.1966    0.0396508
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049243, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003945, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053576, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.58118e-08  1.58118e-08  7.52441e-10
      low eigenvalue method done, cpu time[sec] = 0.053805, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.58e-08  7.52e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.51e-09  7.52e-10         1
         *Z       ---       ---  7.87e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.52441e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.36741e-44  3.74105e-45  1.05321e-46  6.84481e-46  2.06882e-47  3.57764e-47  2.86431e-53  8.15542e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.52104, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         9.64744e+09
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.474273, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.12524, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            364.862      55.3377      13.6617      17.3374      1.84499      224.932      20.1573    0.0317207
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049618, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003941, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053947, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.28186e-08  1.28186e-08  5.35887e-10
      low eigenvalue method done, cpu time[sec] = 0.054178, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.28e-08  5.36e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.22e-09  5.36e-10         1
         *Z       ---       ---  7.87e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.35887e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   9.8105e-45  2.60841e-45  7.38257e-47  4.70384e-46  1.43506e-47  2.82631e-47  2.91198e-53  8.70717e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.523, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.15769e+10
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.473287, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.12095, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            304.052      46.1148      11.3847      14.4479       1.5375      187.443      16.7977    0.0264339
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049495, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003933, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053817, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.07878e-08  1.07878e-08  4.03431e-10
      low eigenvalue method done, cpu time[sec] = 0.054047, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.08e-08  4.03e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.02e-09  4.03e-10         1
         *Z       ---       ---  7.87e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.0343e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.42657e-45   1.9313e-45  5.49252e-47  3.44662e-46  1.05918e-47  2.30372e-47  2.94886e-53  8.58772e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.51854, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.35064e+10
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.474478, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.11978, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            260.616       39.527      9.75834      12.3839      1.31785      160.665       14.398    0.0226576
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049519, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003939, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053846, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.31766e-09  9.31765e-09  3.15904e-10
      low eigenvalue method done, cpu time[sec] = 0.054078, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.32e-09  3.16e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.81e-10  3.16e-10         1
         *Z       ---       ---  7.87e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.15904e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.8407e-45  1.49198e-45  4.26148e-47  2.64158e-46  8.16577e-48  1.92237e-47  2.97486e-53  8.60457e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.51955, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 400 K
            Well    Collision, 1/sec
              W1         1.54359e+10
      global relaxation matrix dimension = 481
      setting global matrices ... done, cpu time[sec] = 0.475786, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.1242, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            228.039      34.5861      8.53855      10.8359      1.15312      140.582      12.5983    0.0198254
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049153, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003929, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053476, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.20329e-09   8.2033e-09   2.5476e-10
      low eigenvalue method done, cpu time[sec] = 0.053706, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   8.2e-09  2.55e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.74e-10  2.55e-10         1
         *Z       ---       ---  7.87e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.5476e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.72694e-45   1.1897e-45  3.41126e-47  2.09325e-46  6.50257e-48  1.63384e-47  2.99062e-53  8.72164e-74

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.52396, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 410 K
      Energy reference = 28175 1/cm
      Energy step      = 68 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007624
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.536056
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.32356
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 1.68106
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.84088
         W1 Well: minimal relaxation eigenvalue = 0.0883265
         W1 Well: maximal relaxation eigenvalue = 0.989015
         W1 Well:       grid size = 479
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4396 1/cm
         B1 Barrier:        grid size = 415
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -44 1/cm
         B2 Barrier:        grid size = 412
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 158 1/cm
         B3 Barrier:        grid size = 482
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4600 1/cm
         B4 Barrier:        grid size = 506
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6232 1/cm
         B5 Barrier: nonpositive number of states at -23165 1/cm => truncating
         B5 Barrier:        grid size = 755
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23165 1/cm
         B6 Barrier:        grid size = 393
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1451 1/cm
         B7 Barrier:        grid size = 345
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4715 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16751 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 4.79356, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 479
      MasterEquation::Barrier::truncate: real weight = 6.96686e+47
      MasterEquation::Barrier::truncate: effective weight = 2.15855e+44
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 479
      MasterEquation::Barrier::truncate: real weight = 2.50284e+49
      MasterEquation::Barrier::truncate: effective weight = 7.75457e+45
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 479
      MasterEquation::Barrier::truncate: real weight = 1.1757e+49
      MasterEquation::Barrier::truncate: effective weight = 6.75969e+44
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4396  -4396 3.15e+09 5.84e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -44 7.07e+14
         B2    159 1.08e+14
         B3  -4396 2.69e+13
         B4  -4396  3.4e+13
         B5  -4396 3.63e+12
         B6   1452 4.41e+14
         B7   4716    4e+13
         B8  16751  6.7e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.95e-08  1.13e-07  6.12e-14  2.12e-16  8.24e-44  0.000154      22.8  2.55e+20
          R  2.02e+07         1      2.29  1.24e-06  4.29e-09  1.66e-36  3.11e+03  4.61e+08  5.15e+27
         P1  8.82e+06     0.437         1   5.4e-07  1.87e-09  7.27e-37  1.36e+03  2.01e+08  2.25e+27
         P2  1.63e+13  8.09e+05  1.85e+06         1   0.00347  1.34e-30  2.52e+09  3.73e+14  4.17e+33
         P3  4.71e+15  2.33e+08  5.34e+08       288         1  3.88e-28  7.26e+11  1.07e+17   1.2e+36
         P4  1.21e+43  6.01e+35  1.38e+36  7.44e+29  2.58e+27         1  1.87e+39  2.77e+44   3.1e+63
         P5  6.49e+03  0.000321  0.000735  3.97e-10  1.38e-12  5.34e-40         1  1.48e+05  1.65e+24
         P6    0.0438  2.17e-09  4.97e-09  2.68e-15  9.31e-18  3.61e-45  6.76e-06         1  1.12e+19
         P7  3.92e-21  1.94e-28  4.44e-28   2.4e-34  8.32e-37  3.23e-64  6.04e-25  8.94e-20         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.82e+22   1.1e+23  5.96e+16  2.07e+14  8.02e-14   1.5e+26  2.22e+31  2.49e+50
          R  2.07e-23         1      2.29  1.24e-06  4.29e-09  1.66e-36  3.11e+03  4.61e+08  5.15e+27
         P1  9.06e-24     0.437         1   5.4e-07  1.87e-09  7.27e-37  1.36e+03  2.01e+08  2.25e+27
         P2  1.68e-17  8.09e+05  1.85e+06         1   0.00347  1.34e-30  2.52e+09  3.73e+14  4.17e+33
         P3  4.83e-15  2.33e+08  5.34e+08       288         1  3.88e-28  7.26e+11  1.07e+17   1.2e+36
         P4  1.25e+13  6.01e+35  1.38e+36  7.44e+29  2.58e+27         1  1.87e+39  2.77e+44   3.1e+63
         P5  6.66e-27  0.000321  0.000735  3.97e-10  1.38e-12  5.34e-40         1  1.48e+05  1.65e+24
         P6   4.5e-32  2.17e-09  4.97e-09  2.68e-15  9.31e-18  3.61e-45  6.76e-06         1  1.12e+19
         P7  4.02e-51  1.94e-28  4.44e-28   2.4e-34  8.32e-37  3.23e-64  6.04e-25  8.94e-20         1
   MasterEquation::set:  done, cpu time[sec] = 4.80856, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.79493e+08
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.469775, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.1855, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9572.28      1466.74      363.935      460.655      49.1879      5968.52      541.584     0.906157
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048782, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003959, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053125, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.56518e-07  2.56518e-07  3.64842e-08
      low eigenvalue method done, cpu time[sec] = 0.05336, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.57e-07  3.65e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.52e-08  3.65e-08         1
         *Z       ---       ---  3.49e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.64842e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.33557e-42  3.18693e-42  1.00773e-43  9.53255e-43  2.46946e-44  3.08519e-45  6.44484e-52  1.16663e-71

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.57711, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.13848e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.472144, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.10819, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3190.76      488.913      121.312      153.552       16.396      1989.51      180.528     0.302052
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.049097, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003918, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053395, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.01825e-07  1.01825e-07  1.20178e-08
      low eigenvalue method done, cpu time[sec] = 0.053625, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.02e-07   1.2e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.87e-09   1.2e-08         1
         *Z       ---       ---  3.49e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.20178e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.62532e-42  9.47274e-43  2.69198e-44  2.14515e-43  5.92968e-45  2.47362e-45  6.49947e-52    5.918e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.49763, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.89747e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.469358, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.10324, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1914.46      293.348       72.787       92.131      9.83758       1193.7      108.317     0.181231
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048643, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003908, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052933, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.53909e-08  6.53909e-08  6.63863e-09
      low eigenvalue method done, cpu time[sec] = 0.053167, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.54e-08  6.64e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.3e-09  6.64e-09         1
         *Z       ---       ---  3.49e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.63862e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.49521e-42  4.94784e-43  1.38166e-44  1.02793e-43  2.92387e-45  1.97533e-45  6.55774e-52  6.26207e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.48957, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         2.65645e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.469786, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.11226, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1367.47      209.534      51.9907      65.8079      7.02684      852.645      77.3692     0.129451
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048593, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003913, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.05289, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.85776e-08  4.85776e-08  4.36739e-09
      low eigenvalue method done, cpu time[sec] = 0.05312, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.86e-08  4.37e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.66e-09  4.37e-09         1
         *Z       ---       ---  3.49e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.36739e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00122e-42  3.13506e-43  8.72076e-45  6.22346e-44  1.80247e-45  1.62305e-45  6.61871e-52  5.85187e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.49651, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.41544e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.471224, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.11941, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1063.59      162.971      40.4372      51.1839      5.46532      663.168       60.176     0.100684
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048672, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003898, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052947, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.87934e-08  3.87934e-08  3.14858e-09
      low eigenvalue method done, cpu time[sec] = 0.053179, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.88e-08  3.15e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.71e-09  3.15e-09         1
         *Z       ---       ---  3.49e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.14858e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.30544e-43  2.19795e-43  6.11561e-45  4.23839e-44  1.24362e-45  1.36634e-45  6.68117e-52  5.85184e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.50502, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         3.79493e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.471451, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.11326, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            957.228      146.674      36.3935      46.0655      4.91879      596.852      54.1584    0.0906157
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048629, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003909, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052918, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.52768e-08  3.52768e-08  2.73494e-09
      low eigenvalue method done, cpu time[sec] = 0.053149, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.53e-08  2.73e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.37e-09  2.73e-09         1
         *Z       ---       ---  3.49e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.73494e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.37594e-43  1.88719e-43  5.25511e-45  3.59924e-44  1.06173e-45  1.26298e-45  6.71259e-52  6.04527e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.50145, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1          5.6924e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.469136, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.09801, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            638.152      97.7826      24.2623      30.7103      3.27919      397.901      36.1056    0.0604105
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048615, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003908, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052904, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.43761e-08  2.43761e-08  1.55911e-09
      low eigenvalue method done, cpu time[sec] = 0.05314, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.44e-08  1.56e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.32e-09  1.56e-09         1
         *Z       ---       ---  3.49e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.55911e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.69617e-43  1.02992e-43  2.88554e-45  1.89326e-44  5.69606e-46  9.00723e-46  6.86606e-52  6.22342e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.47887, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         7.58986e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.469461, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.11329, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            478.614      73.3369      18.1968      23.0328      2.45939      298.426      27.0792    0.0453079
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048653, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003903, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052943, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.86855e-08  1.86855e-08  1.02679e-09
      low eigenvalue method done, cpu time[sec] = 0.053172, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.87e-08  1.03e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.77e-09  1.03e-09         1
         *Z       ---       ---  3.49e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.02679e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.45986e-43  6.58469e-44  1.85725e-45   1.1849e-44  3.61216e-46  6.85351e-46  7.00429e-52  6.12065e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.49774, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         9.48733e+09
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.470946, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.11373, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            382.891      58.6696      14.5574      18.4262      1.96752      238.741      21.6634    0.0362463
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04863, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003911, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052927, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.51746e-08  1.51746e-08   7.3485e-10
      low eigenvalue method done, cpu time[sec] = 0.053163, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.52e-08  7.35e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.43e-09  7.35e-10         1
         *Z       ---       ---  3.49e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.34849e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.77348e-43  4.60978e-44  1.30827e-45  8.17851e-45  2.51753e-46  5.44224e-46  7.11959e-52  5.96876e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.50087, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.13848e+10
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.470642, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.11005, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            319.076      48.8913      12.1312      15.3552       1.6396      198.951      18.0528    0.0302052
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048629, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003905, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052912, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.27869e-08  1.27869e-08  5.55381e-10
      low eigenvalue method done, cpu time[sec] = 0.05314, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.28e-08  5.55e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.2e-09  5.55e-10         1
         *Z       ---       ---  3.49e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.55381e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.34782e-43   3.4242e-44  9.77167e-46  6.01347e-45  1.86517e-46  4.45501e-46  7.20897e-52  5.96517e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.49631, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.32823e+10
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.470347, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.11252, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            273.494      41.9068      10.3981      13.1616      1.40537      170.529      15.4738    0.0258902
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048746, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003964, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.053093, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.10553e-08  1.10553e-08    4.363e-10
      low eigenvalue method done, cpu time[sec] = 0.053327, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.11e-08  4.36e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.04e-09  4.36e-10         1
         *Z       ---       ---  3.49e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.36299e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.06347e-43  2.65237e-44  7.60629e-46   4.6221e-45  1.44247e-46  3.73118e-46  7.27232e-52  6.09018e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.49966, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 410 K
            Well    Collision, 1/sec
              W1         1.51797e+10
      global relaxation matrix dimension = 479
      setting global matrices ... done, cpu time[sec] = 0.470799, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.10517, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            239.307      36.6685      9.09838      11.5164       1.2297      149.213      13.5396    0.0226539
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.048664, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003907, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.05295, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.74087e-09  9.74087e-09  3.52824e-10
      low eigenvalue method done, cpu time[sec] = 0.053182, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.74e-09  3.53e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.14e-10  3.53e-10         1
         *Z       ---       ---  3.49e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.52824e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.63073e-44  2.11978e-44  6.10562e-46  3.67152e-45  1.15172e-46  3.18127e-46  7.31119e-52  6.17032e-72

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.48795, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 420 K
      Energy reference = 28453 1/cm
      Energy step      = 70 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007125
         W1 Well: collisional kernel bandwidth = 58
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.523164
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.311663
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.28558
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.74494
         W1 Well: minimal relaxation eigenvalue = 0.08764
         W1 Well: maximal relaxation eigenvalue = 0.987729
         W1 Well:       grid size = 471
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4517 1/cm
         B1 Barrier:        grid size = 407
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -37 1/cm
         B2 Barrier:        grid size = 404
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 173 1/cm
         B3 Barrier:        grid size = 473
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4657 1/cm
         B4 Barrier:        grid size = 495
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6197 1/cm
         B5 Barrier: nonpositive number of states at -23137 1/cm => truncating
         B5 Barrier:        grid size = 737
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23137 1/cm
         B6 Barrier:        grid size = 385
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1502 1/cm
         B7 Barrier:        grid size = 340
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4652 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16763 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.2681, elapsed time[sec] = 0
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 471
      MasterEquation::Barrier::truncate: real weight = 1.71411e+47
      MasterEquation::Barrier::truncate: effective weight = 5.46703e+43
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 471
      MasterEquation::Barrier::truncate: real weight = 5.63409e+48
      MasterEquation::Barrier::truncate: effective weight = 1.79695e+45
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 471
      MasterEquation::Barrier::truncate: real weight = 1.59106e+48
      MasterEquation::Barrier::truncate: effective weight = 1.40826e+44
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4517  -4517 3.03e+09 6.12e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -37 7.65e+14
         B2    174 1.18e+14
         B3  -4517 2.95e+13
         B4  -4517 3.73e+13
         B5  -4517 3.99e+12
         B6   1503 4.82e+14
         B7   4653 4.43e+13
         B8  16763 7.87e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.44e-08     1e-07  8.12e-14  3.23e-16  5.75e-43  0.000124      14.1  5.83e+19
          R  2.25e+07         1      2.25  1.83e-06  7.26e-09  1.29e-35  2.78e+03  3.18e+08  1.31e+27
         P1     1e+07     0.444         1  8.12e-07  3.23e-09  5.75e-36  1.24e+03  1.41e+08  5.83e+26
         P2  1.23e+13  5.47e+05  1.23e+06         1   0.00398  7.08e-30  1.52e+09  1.74e+14  7.19e+32
         P3   3.1e+15  1.38e+08   3.1e+08       252         1  1.78e-27  3.83e+11  4.38e+16  1.81e+35
         P4  1.74e+42  7.73e+34  1.74e+35  1.41e+29  5.61e+26         1  2.15e+38  2.46e+43  1.01e+62
         P5  8.09e+03  0.000359  0.000809  6.56e-10  2.61e-12  4.65e-39         1  1.14e+05  4.72e+23
         P6    0.0707  3.14e-09  7.07e-09  5.74e-15  2.28e-17  4.06e-44  8.74e-06         1  4.12e+18
         P7  1.71e-20  7.62e-28  1.71e-27  1.39e-33  5.53e-36  9.85e-63  2.12e-24  2.43e-19         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.27e+21  7.37e+21  5.98e+15  2.38e+13  4.23e-14  9.11e+24  1.04e+30   4.3e+48
          R  3.06e-22         1      2.25  1.83e-06  7.26e-09  1.29e-35  2.78e+03  3.18e+08  1.31e+27
         P1  1.36e-22     0.444         1  8.12e-07  3.23e-09  5.75e-36  1.24e+03  1.41e+08  5.83e+26
         P2  1.67e-16  5.47e+05  1.23e+06         1   0.00398  7.08e-30  1.52e+09  1.74e+14  7.19e+32
         P3  4.21e-14  1.38e+08   3.1e+08       252         1  1.78e-27  3.83e+11  4.38e+16  1.81e+35
         P4  2.36e+13  7.73e+34  1.74e+35  1.41e+29  5.61e+26         1  2.15e+38  2.46e+43  1.01e+62
         P5   1.1e-25  0.000359  0.000809  6.56e-10  2.61e-12  4.65e-39         1  1.14e+05  4.72e+23
         P6   9.6e-31  3.14e-09  7.07e-09  5.74e-15  2.28e-17  4.06e-44  8.74e-06         1  4.12e+18
         P7  2.33e-49  7.62e-28  1.71e-27  1.39e-33  5.53e-36  9.85e-63  2.12e-24  2.43e-19         1
   MasterEquation::set:  done, cpu time[sec] = 3.28246, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.73366e+08
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.454119, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.0861, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10036.5      1553.64      387.411      489.117      52.4017      6328.38      581.339      1.03188
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046507, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00381, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050679, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.48729e-07  2.48729e-07  3.92702e-08
      low eigenvalue method done, cpu time[sec] = 0.050913, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.49e-07  3.93e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.42e-08  3.93e-08         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.92702e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.08159e-40  4.64355e-41  1.45343e-42  1.35555e-41  3.52834e-43   4.9271e-44  1.35355e-50  3.84984e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.27921, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1          1.1201e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.454676, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.01554, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             3345.5      517.881      129.137      163.039      17.4672      2109.46       193.78     0.343962
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046556, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003799, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050731, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.00583e-07  1.00583e-07  1.32215e-08
      low eigenvalue method done, cpu time[sec] = 0.050959, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.01e-07  1.32e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.68e-09  1.32e-08         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.32215e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.95368e-41  1.40549e-41  3.97407e-43  3.12162e-42  8.67829e-44  3.98415e-44  1.36497e-50  3.55805e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.35297, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.86683e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.453764, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.00936, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2007.3      310.728      77.4822      97.8234      10.4803      1265.68      116.268     0.206377
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046394, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003739, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050502, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.5067e-08   6.5067e-08  7.38314e-09
      low eigenvalue method done, cpu time[sec] = 0.050725, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.51e-08  7.38e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.22e-09  7.38e-09         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.38314e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.27597e-41  7.40913e-42  2.06289e-43  1.51206e-42  4.32798e-44  3.20376e-44  1.37715e-50  3.52073e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.34549, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         2.61356e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.455886, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.01455, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1433.78      221.949      55.3444      69.8739      7.48596      904.055      83.0484     0.147412
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04641, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003742, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050521, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.85443e-08  4.85443e-08  4.89286e-09
      low eigenvalue method done, cpu time[sec] = 0.050743, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.85e-08  4.89e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.62e-09  4.89e-09         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.89286e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.53513e-41  4.72393e-42  1.31194e-43  9.21964e-43  2.68814e-44  2.64704e-44  1.38988e-50  3.50697e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.35393, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.36029e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.454956, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.01917, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1115.17      172.627      43.0457      54.3463      5.82241      703.154      64.5932     0.114654
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046376, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003734, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050486, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.88798e-08  3.88798e-08  3.54694e-09
      low eigenvalue method done, cpu time[sec] = 0.050707, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.89e-08  3.55e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.69e-09  3.55e-09         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.54694e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.12629e-41  3.32749e-42  9.25259e-44  6.31204e-43  1.86511e-44  2.23858e-44   1.4029e-50  3.50652e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.3527, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         3.73366e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.45589, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.99352, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1003.65      155.364      38.7411      48.9117      5.24017      632.838      58.1339     0.103188
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046431, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003743, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050549, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.53959e-08  3.53959e-08  3.08814e-09
      low eigenvalue method done, cpu time[sec] = 0.050774, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.54e-08  3.09e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.36e-09  3.09e-09         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.08814e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.85265e-42  2.86268e-42  7.96965e-44  5.37196e-43  1.59604e-44  2.07343e-44  1.40944e-50  3.53783e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.32948, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         5.60049e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.454828, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.0055, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            669.099      103.576      25.8274      32.6078      3.49345      421.892      38.7559    0.0687923
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046404, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003739, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050519, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.45567e-08  2.45567e-08  1.77627e-09
      low eigenvalue method done, cpu time[sec] = 0.050741, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.46e-08  1.78e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.32e-09  1.78e-09         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.77627e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.76288e-42  1.57417e-42  4.41621e-44   2.8494e-43  8.63934e-45  1.49098e-44  1.44133e-50  3.50918e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.34459, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         7.46731e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.454412, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.01105, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            501.825      77.6821      19.3706      24.4559      2.62009      316.419       29.067    0.0515942
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046346, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003744, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050463, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.88704e-08  1.88704e-08   1.1772e-09
      low eigenvalue method done, cpu time[sec] = 0.050687, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.89e-08  1.18e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.77e-09  1.18e-09         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.1772e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.85955e-42  1.01179e-42   2.8607e-44  1.79364e-43  5.51282e-45  1.14159e-44  1.47002e-50  3.55019e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.34401, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         9.33414e+09
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.456304, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.01027, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             401.46      62.1457      15.4964      19.5647      2.09607      253.135      23.2536    0.0412754
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046349, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003753, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050471, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.53509e-08  1.53509e-08  8.46562e-10
      low eigenvalue method done, cpu time[sec] = 0.050694, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.54e-08  8.47e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.44e-09  8.47e-10         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.46562e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.79611e-42  7.11201e-43  2.02498e-44  1.24344e-43  3.86043e-45  9.11074e-45  1.49396e-50  3.54896e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.18733, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1          1.1201e+10
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.454065, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.00648, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             334.55      51.7881      12.9137      16.3039      1.74672      210.946       19.378    0.0343962
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046445, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003734, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050547, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.29517e-08  1.29517e-08  6.42297e-10
      low eigenvalue method done, cpu time[sec] = 0.050772, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.3e-08  6.42e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.21e-09  6.42e-10         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.42297e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.13329e-42  5.30003e-43  1.51844e-44  9.17463e-44  2.87093e-45   7.4893e-45  1.51256e-50   3.4988e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.34071, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.30678e+10
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.455338, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 7.01117, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            286.757      44.3898      11.0689      13.9748      1.49719      180.811      16.6097    0.0294824
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046401, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003739, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050508, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.12088e-08  1.12088e-08  5.06212e-10
      low eigenvalue method done, cpu time[sec] = 0.050736, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.12e-08  5.06e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.05e-09  5.06e-10         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.06211e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.68871e-42  4.11641e-43  1.18582e-44  7.07215e-44  2.22727e-45  6.29493e-45  1.52583e-50  3.43681e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.34754, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 420 K
            Well    Collision, 1/sec
              W1         1.49346e+10
      global relaxation matrix dimension = 471
      setting global matrices ... done, cpu time[sec] = 0.454962, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.99057, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            250.912      38.8411      9.68528      12.2279      1.31004       158.21      14.5335    0.0257971
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.046408, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003773, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050551, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   9.8839e-09  9.88391e-09  4.10488e-10
      low eigenvalue method done, cpu time[sec] = 0.050779, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.88e-09   4.1e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.21e-10   4.1e-10         1
         *Z       ---       ---  1.73e+32
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.10488e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.37429e-42  3.29734e-43  9.54511e-45   5.6314e-44  1.78307e-45  5.38394e-45  1.53407e-50  3.48078e-70

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.32918, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 430 K
      Energy reference = 28731 1/cm
      Energy step      = 72 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006093
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.501709
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.299407
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.275677
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.67156
         W1 Well: minimal relaxation eigenvalue = 0.0869921
         W1 Well: maximal relaxation eigenvalue = 0.98648
         W1 Well:       grid size = 462
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4532 1/cm
         B1 Barrier:        grid size = 400
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -69 1/cm
         B2 Barrier:        grid size = 397
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 146 1/cm
         B3 Barrier:        grid size = 463
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4604 1/cm
         B4 Barrier:        grid size = 485
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6188 1/cm
         B5 Barrier: nonpositive number of states at -23109 1/cm => truncating
         B5 Barrier:        grid size = 720
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23108 1/cm
         B6 Barrier:        grid size = 379
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1443 1/cm
         B7 Barrier:        grid size = 334
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4682 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16707 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.14032, elapsed time[sec] = 1
      B3 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 462
      MasterEquation::Barrier::truncate: real weight = 4.51508e+46
      MasterEquation::Barrier::truncate: effective weight = 1.4812e+43
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 462
      MasterEquation::Barrier::truncate: real weight = 1.3636e+48
      MasterEquation::Barrier::truncate: effective weight = 4.47335e+44
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 462
      MasterEquation::Barrier::truncate: real weight = 2.52039e+47
      MasterEquation::Barrier::truncate: effective weight = 3.06033e+43
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4532  -4532 3.01e+09 6.42e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -69 8.27e+14
         B2    147 1.29e+14
         B3  -4532 3.24e+13
         B4  -4532 4.08e+13
         B5  -4532 4.39e+12
         B6   1444 5.27e+14
         B7   4683  4.9e+13
         B8  16707 9.22e+10
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.91e-08  6.45e-08  7.72e-14  3.49e-16  2.66e-42  7.28e-05      6.52  1.04e+19
          R  3.43e+07         1      2.21  2.65e-06   1.2e-08  9.15e-35   2.5e+03  2.24e+08  3.57e+26
         P1  1.55e+07     0.451         1   1.2e-06  5.42e-09  4.13e-35  1.13e+03  1.01e+08  1.61e+26
         P2   1.3e+13  3.77e+05  8.36e+05         1   0.00453  3.45e-29  9.44e+08  8.45e+13  1.35e+32
         P3  2.86e+15  8.34e+07  1.85e+08       221         1  7.62e-27  2.08e+11  1.87e+16  2.97e+34
         P4  3.75e+41  1.09e+34  2.42e+34   2.9e+28  1.31e+26         1  2.73e+37  2.45e+42   3.9e+60
         P5  1.37e+04    0.0004  0.000886  1.06e-09   4.8e-12  3.66e-38         1  8.96e+04  1.43e+23
         P6     0.153  4.47e-09  9.89e-09  1.18e-14  5.36e-17  4.08e-43  1.12e-05         1  1.59e+18
         P7  9.63e-20   2.8e-27  6.21e-27  7.43e-33  3.37e-35  2.57e-61  7.01e-24  6.28e-19         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.51e+20  5.57e+20  6.66e+14  3.02e+12   2.3e-14  6.29e+23  5.63e+28  8.97e+46
          R  3.98e-21         1      2.21  2.65e-06   1.2e-08  9.15e-35   2.5e+03  2.24e+08  3.57e+26
         P1   1.8e-21     0.451         1   1.2e-06  5.42e-09  4.13e-35  1.13e+03  1.01e+08  1.61e+26
         P2   1.5e-15  3.77e+05  8.36e+05         1   0.00453  3.45e-29  9.44e+08  8.45e+13  1.35e+32
         P3  3.31e-13  8.34e+07  1.85e+08       221         1  7.62e-27  2.08e+11  1.87e+16  2.97e+34
         P4  4.35e+13  1.09e+34  2.42e+34   2.9e+28  1.31e+26         1  2.73e+37  2.45e+42   3.9e+60
         P5  1.59e-24    0.0004  0.000886  1.06e-09   4.8e-12  3.66e-38         1  8.96e+04  1.43e+23
         P6  1.78e-29  4.47e-09  9.89e-09  1.18e-14  5.36e-17  4.08e-43  1.12e-05         1  1.59e+18
         P7  1.12e-47   2.8e-27  6.21e-27  7.43e-33  3.37e-35  2.57e-61  7.01e-24  6.28e-19         1
   MasterEquation::set:  done, cpu time[sec] = 3.15495, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.67496e+08
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.437524, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.97147, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10514.4      1644.23      412.006       518.86      55.7715      6703.26      623.275       1.1715
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.044039, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00364, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.048034, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.31348e-07  3.31348e-07  5.78118e-08
      low eigenvalue method done, cpu time[sec] = 0.048257, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.31e-07  5.78e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.22e-08  5.78e-08         1
         *Z       ---       ---   7.6e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.78118e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.40574e-39  5.96354e-40  1.84987e-41  1.70251e-40  4.45143e-42  6.91031e-43  2.47417e-49  1.42191e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.258, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.10249e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.439708, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.8949, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3504.79      548.077      137.335      172.953      18.5905      2234.42      207.758     0.390501
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043957, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003589, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047913, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.36618e-07  1.36618e-07  1.98808e-08
      low eigenvalue method done, cpu time[sec] = 0.048131, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.37e-07  1.99e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.31e-08  1.99e-08         1
         *Z       ---       ---   7.6e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.98808e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.24494e-40  1.83735e-40  5.17367e-42   4.0091e-41  1.12064e-42  5.63376e-43  2.49503e-49   1.6854e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.0252, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.83748e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.436018, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.89715, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2102.87      328.846      82.4012      103.772      11.1543      1340.65      124.655     0.234301
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04402, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003594, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047976, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.90614e-08  8.90614e-08  1.12196e-08
      low eigenvalue method done, cpu time[sec] = 0.048199, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.91e-08  1.12e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.49e-09  1.12e-08         1
         *Z       ---       ---   7.6e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.12196e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.05083e-40  9.77346e-41  2.71537e-42  1.96245e-41  5.65089e-43    4.561e-43  2.51724e-49  1.68333e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.1769, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         2.57247e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.437777, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.89108, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1502.05       234.89       58.858      74.1228      7.96735      957.609      89.0393     0.167358
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043986, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003585, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047926, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.67484e-08  6.67484e-08  7.48858e-09
      low eigenvalue method done, cpu time[sec] = 0.048142, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.67e-08  7.49e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.33e-09  7.49e-09         1
         *Z       ---       ---   7.6e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.48858e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.07237e-40  6.26964e-41  1.73971e-42  1.20492e-41  3.53566e-43  3.78883e-43  2.54042e-49  1.68421e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.17535, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.30747e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.437173, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.88924, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1168.26      182.692      45.7784      57.6511      6.19683      744.807      69.2528     0.130167
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043933, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00358, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047863, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.36265e-08  5.36265e-08  5.45804e-09
      low eigenvalue method done, cpu time[sec] = 0.048079, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.36e-08  5.46e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.07e-09  5.46e-09         1
         *Z       ---       ---   7.6e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.45804e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.52862e-40  4.43676e-41   1.2338e-42  8.29204e-42  2.46665e-43  3.21853e-43  2.56408e-49  1.67473e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.17246, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         3.67496e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.436586, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.89432, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1051.44      164.423      41.2006       51.886      5.57715      670.326      62.3275      0.11715
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043936, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003612, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047914, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.88814e-08  4.88814e-08  4.76285e-09
      low eigenvalue method done, cpu time[sec] = 0.048137, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.89e-08  4.76e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.62e-09  4.76e-09         1
         *Z       ---       ---   7.6e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.76285e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.34025e-40  3.82445e-41  1.06521e-42  7.07235e-42  2.11566e-43  2.98697e-43  2.57596e-49  1.68218e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.17796, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         5.51244e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.437521, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.89253, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            700.957      109.615      27.4671      34.5907       3.7181      446.884      41.5517    0.0781002
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043986, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003581, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047929, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.40603e-08  3.40603e-08  2.76371e-09
      low eigenvalue method done, cpu time[sec] = 0.048155, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.41e-08  2.76e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.2e-09  2.76e-09         1
         *Z       ---       ---   7.6e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.76371e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.90811e-41  2.11886e-41  5.95597e-43  3.78236e-42  1.15533e-43  2.16531e-43  2.63374e-49  1.67712e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.17295, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         7.34992e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.436987, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.88682, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            525.718      82.2115      20.6003       25.943      2.78857      335.163      31.1638    0.0585752
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.044012, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003588, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047958, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.62444e-08  2.62444e-08    1.843e-09
      low eigenvalue method done, cpu time[sec] = 0.048178, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.62e-08  1.84e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.46e-09  1.84e-09         1
         *Z       ---       ---   7.6e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.843e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.3292e-41  1.36909e-41  3.88261e-43   2.3946e-42  7.41779e-44  1.66807e-43  2.68559e-49  1.66958e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.17013, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1          9.1874e+09
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.439726, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.8924, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            420.574      65.7692      16.4802      20.7544      2.23086       268.13       24.931    0.0468601
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.044029, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003583, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047972, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.13901e-08  2.13901e-08  1.33169e-09
      low eigenvalue method done, cpu time[sec] = 0.048198, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.14e-08  1.33e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     2e-09  1.33e-09         1
         *Z       ---       ---   7.6e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.33169e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.87926e-41   9.6623e-42   2.7617e-43   1.6673e-42  5.21888e-44   1.3378e-43  2.72881e-49  1.68377e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.17989, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.10249e+10
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.436874, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.89118, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            350.479      54.8077      13.7335      17.2953      1.85905      223.442      20.7758    0.0390501
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043951, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003598, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.04791, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.80727e-08  1.80727e-08  1.01426e-09
      low eigenvalue method done, cpu time[sec] = 0.048132, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.81e-08  1.01e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.68e-09  1.01e-09         1
         *Z       ---       ---   7.6e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.01426e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.97111e-41  7.22388e-42  2.07898e-43   1.2345e-42  3.89587e-44  1.10424e-43  2.76242e-49  1.68284e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.17113, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.28624e+10
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.438268, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.89102, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             300.41       46.978      11.7716      14.8246      1.59347      191.522      17.8079    0.0334715
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04398, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003602, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047939, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.5658e-08  1.56579e-08   8.0193e-10
      low eigenvalue method done, cpu time[sec] = 0.048172, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.57e-08  8.02e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.46e-09  8.02e-10         1
         *Z       ---       ---   7.6e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.0193e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.3595e-41  5.62571e-42  1.62886e-43  9.54345e-43   3.0319e-44  9.31405e-44  2.78646e-49  1.67562e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.17406, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 430 K
            Well    Collision, 1/sec
              W1         1.46998e+10
      global relaxation matrix dimension = 462
      setting global matrices ... done, cpu time[sec] = 0.438056, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.8942, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            262.859      41.1058      10.3001      12.9715      1.39429      167.582      15.5819    0.0292876
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043994, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003579, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047935, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.38196e-08  1.38196e-08  6.52068e-10
      low eigenvalue method done, cpu time[sec] = 0.048154, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.38e-08  6.52e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.28e-09  6.52e-10         1
         *Z       ---       ---   7.6e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.52068e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.92548e-41  4.51663e-42  1.31477e-43  7.61785e-43  2.43372e-44   7.9906e-44  2.80151e-49  1.68173e-68

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.17842, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 440 K
      Energy reference = 29009 1/cm
      Energy step      = 73 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007104
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.504189
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.298908
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.269934
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.67032
         W1 Well: minimal relaxation eigenvalue = 0.0863609
         W1 Well: maximal relaxation eigenvalue = 0.988688
         W1 Well:       grid size = 461
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4643 1/cm
         B1 Barrier:        grid size = 398
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -44 1/cm
         B2 Barrier:        grid size = 395
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 174 1/cm
         B3 Barrier:        grid size = 461
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4643 1/cm
         B4 Barrier:        grid size = 482
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6176 1/cm
         B5 Barrier: nonpositive number of states at -23113 1/cm => truncating
         B5 Barrier:        grid size = 714
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23112 1/cm
         B6 Barrier:        grid size = 377
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1488 1/cm
         B7 Barrier:        grid size = 333
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4700 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16745 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 3.13448, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 461
      MasterEquation::Barrier::truncate: real weight = 3.53062e+47
      MasterEquation::Barrier::truncate: effective weight = 1.17433e+44
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 461
      MasterEquation::Barrier::truncate: real weight = 4.59753e+46
      MasterEquation::Barrier::truncate: effective weight = 7.28608e+42
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4643  -4643 2.91e+09 6.73e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -44 8.94e+14
         B2    175 1.41e+14
         B3  -4643 3.55e+13
         B4  -4643 4.47e+13
         B5  -4643 4.82e+12
         B6   1489 5.76e+14
         B7   4701 5.42e+13
         B8  16745 1.08e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.61e-08  5.69e-08  9.85e-14  5.05e-16  1.54e-41  5.88e-05      4.17  2.68e+18
          R  3.84e+07         1      2.18  3.78e-06  1.94e-08  5.92e-34  2.26e+03   1.6e+08  1.03e+26
         P1  1.76e+07     0.458         1  1.73e-06  8.88e-09  2.71e-34  1.03e+03  7.33e+07  4.71e+25
         P2  1.02e+13  2.65e+05  5.77e+05         1   0.00513  1.57e-28  5.97e+08  4.23e+13  2.72e+31
         P3  1.98e+15  5.16e+07  1.13e+08       195         1  3.05e-26  1.16e+11  8.26e+15  5.31e+33
         P4  6.48e+40  1.69e+33  3.69e+33  6.39e+27  3.27e+25         1  3.81e+36   2.7e+41  1.74e+59
         P5   1.7e+04  0.000443  0.000967  1.68e-09  8.59e-12  2.62e-37         1  7.09e+04  4.56e+22
         P6      0.24  6.25e-09  1.36e-08  2.36e-14  1.21e-16   3.7e-42  1.41e-05         1  6.42e+17
         P7  3.73e-19  9.73e-27  2.12e-26  3.68e-32  1.88e-34  5.76e-60  2.19e-23  1.56e-18         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.17e+19  4.73e+19   8.2e+13   4.2e+11  1.28e-14   4.9e+22  3.47e+27  2.23e+45
          R  4.61e-20         1      2.18  3.78e-06  1.94e-08  5.92e-34  2.26e+03   1.6e+08  1.03e+26
         P1  2.11e-20     0.458         1  1.73e-06  8.88e-09  2.71e-34  1.03e+03  7.33e+07  4.71e+25
         P2  1.22e-14  2.65e+05  5.77e+05         1   0.00513  1.57e-28  5.97e+08  4.23e+13  2.72e+31
         P3  2.38e-12  5.16e+07  1.13e+08       195         1  3.05e-26  1.16e+11  8.26e+15  5.31e+33
         P4  7.79e+13  1.69e+33  3.69e+33  6.39e+27  3.27e+25         1  3.81e+36   2.7e+41  1.74e+59
         P5  2.04e-23  0.000443  0.000967  1.68e-09  8.59e-12  2.62e-37         1  7.09e+04  4.56e+22
         P6  2.88e-28  6.25e-09  1.36e-08  2.36e-14  1.21e-16   3.7e-42  1.41e-05         1  6.42e+17
         P7  4.48e-46  9.73e-27  2.12e-26  3.68e-32  1.88e-34  5.76e-60  2.19e-23  1.56e-18         1
   MasterEquation::set:  done, cpu time[sec] = 3.14848, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         3.61867e+08
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.433868, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.97513, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11006.1      1738.61      437.757      549.922      59.3025      7093.51      667.474      1.32671
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043795, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00359, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047736, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.3285e-07   3.3285e-07  6.31601e-08
      low eigenvalue method done, cpu time[sec] = 0.047966, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.33e-07  6.32e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.21e-08  6.32e-08         1
         *Z       ---       ---  4.01e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.31601e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.62436e-38  6.81319e-39  2.09544e-40  1.90471e-39  5.00178e-41  8.61155e-42   3.9485e-48  7.14424e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.25311, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          1.0856e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.435289, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.90173, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3668.71      579.537      145.919      183.307      19.7675       2364.5      222.491     0.442237
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043684, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003561, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.0476, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.39756e-07  1.39756e-07  2.21653e-08
      low eigenvalue method done, cpu time[sec] = 0.047818, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-07  2.22e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.33e-08  2.22e-08         1
         *Z       ---       ---  4.01e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.21653e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.18102e-39    2.135e-39  5.98943e-41  4.58225e-40  1.28758e-41  7.06981e-42  3.98162e-48  6.83375e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.18019, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.80933e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.434163, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.90214, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2201.22      347.722      87.5513      109.984      11.8605       1418.7      133.495     0.265342
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043719, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003571, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047644, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.17657e-08  9.17657e-08  1.26369e-08
      low eigenvalue method done, cpu time[sec] = 0.04787, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.18e-08  1.26e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.69e-09  1.26e-08         1
         *Z       ---       ---  4.01e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.26369e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.63159e-39  1.14561e-39  3.17729e-41  2.26594e-40  6.56244e-42   5.7586e-42  4.01687e-48  6.70355e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.18156, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         2.53307e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.435665, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.88471, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1572.3      248.373      62.5367      78.5603      8.47178      1013.36      95.3535      0.18953
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043692, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003561, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047607, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.90681e-08  6.90681e-08  8.49309e-09
      low eigenvalue method done, cpu time[sec] = 0.04784, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.91e-08  8.49e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.51e-09  8.49e-09         1
         *Z       ---       ---  4.01e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.49309e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.48382e-39  7.39283e-40  2.05036e-41  1.40069e-40   4.1354e-42  4.80752e-42  4.05359e-48  6.71925e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.16512, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          3.2568e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.436251, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.90145, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1222.9      193.179      48.6396      61.1025      6.58916      788.168      74.1638     0.147412
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043676, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003623, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047654, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.56519e-08  5.56519e-08  6.22273e-09
      low eigenvalue method done, cpu time[sec] = 0.047872, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.57e-08  6.22e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.23e-09  6.22e-09         1
         *Z       ---       ---  4.01e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.22273e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.84169e-39  5.25522e-40  1.46203e-41  9.68807e-41  2.90054e-42  4.10091e-42  4.09105e-48  6.74175e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.22005, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         3.61867e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.450078, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.89933, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1100.61      173.861      43.7757      54.9922      5.93025      709.351      66.7474     0.132671
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043722, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003572, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047647, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.07862e-08  5.07862e-08  5.44219e-09
      low eigenvalue method done, cpu time[sec] = 0.047865, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.08e-08  5.44e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.77e-09  5.44e-09         1
         *Z       ---       ---  4.01e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.44219e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.6183e-39  4.53857e-40  1.26515e-41  8.28052e-41  2.49341e-42  3.81292e-42  4.10982e-48  6.72762e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.19565, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1           5.428e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.436071, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.90893, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            733.741      115.907      29.1838      36.6615       3.9535      472.901      44.4983    0.0884473
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043703, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00356, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.04761, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.55319e-08  3.55319e-08  3.18507e-09
      low eigenvalue method done, cpu time[sec] = 0.047828, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.55e-08  3.19e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.32e-09  3.19e-09         1
         *Z       ---       ---  4.01e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.18507e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.63052e-40  2.53303e-40  7.13652e-42  4.46446e-41  1.37342e-42   2.7852e-42  4.20107e-48  6.75182e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.18554, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         7.23734e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.435949, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.90252, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            550.306      86.9305      21.8878      27.4961      2.96512      354.675      33.3737    0.0663355
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04372, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003564, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047629, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.74478e-08  2.74478e-08  2.13693e-09
      low eigenvalue method done, cpu time[sec] = 0.047845, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.74e-08  2.14e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.55e-09  2.14e-09         1
         *Z       ---       ---  4.01e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.13693e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.52939e-40   1.6452e-40  4.68126e-42  2.84247e-41  8.87167e-43  2.15815e-42  4.28285e-48  6.72641e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.18347, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         9.04667e+09
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.436143, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.89076, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            440.245      69.5444      17.5103      21.9969       2.3721       283.74       26.699    0.0530684
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043677, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003575, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047609, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.24105e-08  2.24105e-08  1.55131e-09
      low eigenvalue method done, cpu time[sec] = 0.047825, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.24e-08  1.55e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.08e-09  1.55e-09         1
         *Z       ---       ---  4.01e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.55131e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.77521e-40  1.16572e-40  3.34575e-42   1.9877e-41  6.27084e-43  1.73903e-42  4.35109e-48  6.71257e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.17134, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1          1.0856e+10
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.437619, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.88684, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            366.871      57.9537      14.5919      18.3307      1.97675       236.45      22.2491    0.0442237
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.04372, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003574, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047656, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.89599e-08  1.89599e-08  1.18601e-09
      low eigenvalue method done, cpu time[sec] = 0.047876, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.9e-08  1.19e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.75e-09  1.19e-09         1
         *Z       ---       ---  4.01e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.18601e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.67119e-40  8.74333e-41  2.52839e-42  1.47682e-41  4.69869e-43  1.44109e-42  4.40432e-48  6.73567e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.16653, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.26653e+10
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.437005, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.89817, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            314.461      49.6746      12.5073      15.7121      1.69436      202.672      19.0707     0.037906
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043792, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003564, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047714, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.64437e-08  1.64437e-08  9.40698e-10
      low eigenvalue method done, cpu time[sec] = 0.04793, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.64e-08  9.41e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.52e-09  9.41e-10         1
         *Z       ---       ---  4.01e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.40699e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.92473e-40  6.82718e-41  1.98737e-42  1.14497e-41  3.66811e-43  1.21967e-42  4.44261e-48  6.73623e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.17536, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 440 K
            Well    Collision, 1/sec
              W1         1.44747e+10
      global relaxation matrix dimension = 461
      setting global matrices ... done, cpu time[sec] = 0.4356, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.90098, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            275.153      43.4653      10.9439      13.7481      1.48256      177.338      16.6869    0.0331678
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.043765, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00357, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047694, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.45252e-08  1.45252e-08  7.66977e-10
      low eigenvalue method done, cpu time[sec] = 0.047915, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.45e-08  7.67e-10         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.34e-09  7.67e-10         1
         *Z       ---       ---  4.01e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.66977e-10
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.39322e-40  5.49371e-41  1.60858e-42   9.1618e-42  2.95224e-43  1.04947e-42   4.4669e-48  6.75746e-67

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.17817, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 450 K
      Energy reference = 29288 1/cm
      Energy step      = 75 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -88 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007895
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.42527
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.289217
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.287341
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.57204
         W1 Well: minimal relaxation eigenvalue = 0.0857335
         W1 Well: maximal relaxation eigenvalue = 0.987483
         W1 Well:       grid size = 453
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4688 1/cm
         B1 Barrier:        grid size = 391
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -38 1/cm
         B2 Barrier:        grid size = 388
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 187 1/cm
         B3 Barrier:        grid size = 452
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4612 1/cm
         B4 Barrier:        grid size = 473
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6188 1/cm
         B5 Barrier: nonpositive number of states at -23213 1/cm => truncating
         B5 Barrier:        grid size = 700
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23213 1/cm
         B6 Barrier:        grid size = 371
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1461 1/cm
         B7 Barrier:        grid size = 328
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4687 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16762 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.96619, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 453
      MasterEquation::Barrier::truncate: real weight = 9.73524e+46
      MasterEquation::Barrier::truncate: effective weight = 3.32677e+43
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 453
      MasterEquation::Barrier::truncate: real weight = 9.50838e+45
      MasterEquation::Barrier::truncate: effective weight = 1.85459e+42
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4688  -4688 2.87e+09 7.05e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -38 9.65e+14
         B2    188 1.54e+14
         B3  -4612  3.9e+13
         B4  -4688 4.88e+13
         B5  -4688 5.28e+12
         B6   1462 6.29e+14
         B7   4688 5.99e+13
         B8  16762 1.26e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.9e-08  4.08e-08  1.01e-13  5.81e-16  6.69e-41  3.88e-05       2.2  5.95e+17
          R  5.27e+07         1      2.15  5.31e-06  3.06e-08  3.53e-33  2.05e+03  1.16e+08  3.14e+25
         P1  2.45e+07     0.465         1  2.47e-06  1.42e-08  1.64e-33       951   5.4e+07  1.46e+25
         P2  9.93e+12  1.88e+05  4.05e+05         1   0.00577  6.64e-28  3.85e+08  2.19e+13  5.91e+30
         P3  1.72e+15  3.26e+07  7.02e+07       173         1  1.15e-25  6.68e+10  3.79e+15  1.02e+33
         P4   1.5e+40  2.84e+32   6.1e+32  1.51e+27  8.69e+24         1   5.8e+35  3.29e+40  8.89e+57
         P5  2.58e+04  0.000489   0.00105   2.6e-09   1.5e-11  1.72e-36         1  5.68e+04  1.53e+22
         P6     0.454  8.61e-09  1.85e-08  4.57e-14  2.64e-16  3.04e-41  1.76e-05         1   2.7e+17
         P7  1.68e-18  3.19e-26  6.86e-26  1.69e-31  9.77e-34  1.12e-58  6.52e-23   3.7e-18         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.09e+18  4.49e+18  1.11e+13  6.39e+10  7.35e-15  4.27e+21  2.42e+26  6.54e+43
          R  4.79e-19         1      2.15  5.31e-06  3.06e-08  3.53e-33  2.05e+03  1.16e+08  3.14e+25
         P1  2.23e-19     0.465         1  2.47e-06  1.42e-08  1.64e-33       951   5.4e+07  1.46e+25
         P2  9.03e-14  1.88e+05  4.05e+05         1   0.00577  6.64e-28  3.85e+08  2.19e+13  5.91e+30
         P3  1.56e-11  3.26e+07  7.02e+07       173         1  1.15e-25  6.68e+10  3.79e+15  1.02e+33
         P4  1.36e+14  2.84e+32   6.1e+32  1.51e+27  8.69e+24         1   5.8e+35  3.29e+40  8.89e+57
         P5  2.34e-22  0.000489   0.00105   2.6e-09   1.5e-11  1.72e-36         1  5.68e+04  1.53e+22
         P6  4.13e-27  8.61e-09  1.85e-08  4.57e-14  2.64e-16  3.04e-41  1.76e-05         1   2.7e+17
         P7  1.53e-44  3.19e-26  6.86e-26  1.69e-31  9.77e-34  1.12e-58  6.52e-23   3.7e-18         1
   MasterEquation::set:  done, cpu time[sec] = 2.98091, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.56462e+08
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.420255, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.88914, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11511.8      1836.89      464.701      582.345           63       7499.5      714.019      1.49919
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041648, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003382, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045374, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.07128e-07  4.07128e-07  8.36349e-08
      low eigenvalue method done, cpu time[sec] = 0.045594, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.07e-07  8.36e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.92e-08  8.36e-08         1
         *Z       ---       ---  1.96e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.36349e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.68227e-37  6.97729e-38  2.12955e-39   1.9132e-38  5.04488e-40  9.58837e-41  5.58174e-47  2.28733e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.11624, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.06939e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.42207, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.8197, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3837.28      612.297        154.9      194.115           21      2499.83      238.006      0.49973
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041537, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003388, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045274, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.74116e-07  1.74116e-07  2.99351e-08
      low eigenvalue method done, cpu time[sec] = 0.04549, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.74e-07  2.99e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.65e-08  2.99e-08         1
         *Z       ---       ---  1.96e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.99351e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.52484e-38  2.22303e-38  6.21714e-40  4.69919e-39  1.32706e-40  7.92364e-41  5.62841e-47  2.28192e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.84957, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.78231e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.421026, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.81212, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2302.37      367.378      92.9401      116.469         12.6       1499.9      142.804     0.299838
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041579, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003384, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045317, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.15168e-07  1.15168e-07  1.72369e-08
      low eigenvalue method done, cpu time[sec] = 0.045532, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.15e-07  1.72e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.09e-08  1.72e-08         1
         *Z       ---       ---  1.96e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.72369e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.87125e-38  1.20309e-38   3.3327e-40  2.34696e-39  6.83463e-41  6.49236e-41  5.67805e-47  2.28586e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.04242, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         2.49523e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.424906, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.80359, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1644.55      262.413      66.3858      83.1921            9      1071.36      102.003      0.21417
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041551, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003381, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045281, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.70603e-08  8.70603e-08  1.16633e-08
      low eigenvalue method done, cpu time[sec] = 0.045495, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.71e-08  1.17e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.17e-09  1.17e-08         1
         *Z       ---       ---  1.96e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.16633e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.6655e-38  7.80921e-39  2.16586e-40  1.46041e-39  4.33712e-41  5.44642e-41   5.7297e-47  2.29114e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.0353, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.20816e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.421178, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.80623, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1279.09      204.099      51.6334       64.705            7      833.278      79.3354     0.166577
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041568, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003405, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045327, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.03603e-08  7.03604e-08  8.58951e-09
      low eigenvalue method done, cpu time[sec] = 0.045545, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.04e-08  8.59e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.58e-09  8.59e-09         1
         *Z       ---       ---  1.96e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.58951e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.98649e-38  5.57591e-39  1.55265e-40  1.01514e-39  3.05807e-41  4.66483e-41  5.78229e-47   2.2866e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.03514, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         3.56462e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.423597, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.80147, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1151.18      183.689      46.4701      58.2345          6.3       749.95      71.4019     0.149919
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041517, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003378, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045242, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.42854e-08  6.42854e-08  7.52841e-09
      low eigenvalue method done, cpu time[sec] = 0.045454, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.43e-08  7.53e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.01e-09  7.53e-09         1
         *Z       ---       ---  1.96e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.52841e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.74931e-38  4.82457e-39  1.34659e-40  8.69463e-40  2.63464e-41  4.34508e-41  5.80862e-47  2.29123e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.0362, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         5.34693e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.421464, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.8148, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            767.456      122.459        30.98       38.823          4.2      499.967      47.6013    0.0999461
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041527, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003379, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045258, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.51678e-08  4.51678e-08  4.44328e-09
      low eigenvalue method done, cpu time[sec] = 0.04548, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.52e-08  4.44e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.2e-09  4.44e-09         1
         *Z       ---       ---  1.96e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.44328e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.04977e-38  2.71225e-39  7.66212e-41  4.72534e-40  1.46362e-41  3.19772e-41  5.93635e-47   2.2905e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.04531, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         7.12924e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.421656, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.81783, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            575.592      91.8446       23.235      29.1172         3.15      374.975       35.701    0.0749595
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.0415, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003363, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045203, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.49849e-08  3.49849e-08  2.99899e-09
      low eigenvalue method done, cpu time[sec] = 0.045423, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.5e-08     3e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.24e-09     3e-09         1
         *Z       ---       ---  1.96e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.99899e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.15994e-39  1.77069e-39  5.05706e-41   3.0255e-40  9.51127e-42    2.492e-41  6.05064e-47  2.28699e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.04489, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         8.91155e+09
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.421497, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.80019, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            460.474      73.4757       18.588      23.2938         2.52       299.98      28.5608    0.0599676
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041512, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00337, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045231, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.86182e-08  2.86182e-08  2.18722e-09
      low eigenvalue method done, cpu time[sec] = 0.045451, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.86e-08  2.19e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.64e-09  2.19e-09         1
         *Z       ---       ---  1.96e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.18722e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.26058e-39  1.25961e-39  3.63152e-41  2.12478e-40  6.75402e-42  2.01736e-41  6.14599e-47  2.29203e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.0296, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.06939e+10
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.422005, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.80472, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            383.728      61.2297        15.49      19.4115          2.1      249.983      23.8006     0.049973
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041521, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003367, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045226, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.42462e-08  2.42462e-08  1.67845e-09
      low eigenvalue method done, cpu time[sec] = 0.045438, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.42e-08  1.68e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.23e-09  1.68e-09         1
         *Z       ---       ---  1.96e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.67845e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.05953e-39  9.47773e-40  2.75491e-41  1.58414e-40  5.07962e-42  1.67823e-41  6.22048e-47  2.29525e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.03494, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.24762e+10
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.423312, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.91839, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             328.91      52.4826      13.2772      16.6384          1.8      214.271      20.4005     0.042834
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041548, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003381, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.045276, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.10518e-08  2.10518e-08  1.33547e-09
      low eigenvalue method done, cpu time[sec] = 0.04549, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.11e-08  1.34e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.93e-09  1.34e-09         1
         *Z       ---       ---  1.96e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.33547e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.24428e-39  7.42039e-40  2.17238e-41   1.2317e-40  3.97783e-42  1.42512e-41  6.27429e-47  2.29481e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.14824, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 450 K
            Well    Collision, 1/sec
              W1         1.42585e+10
      global relaxation matrix dimension = 453
      setting global matrices ... done, cpu time[sec] = 0.422503, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.80634, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            287.796      45.9223      11.6175      14.5586        1.575      187.487      17.8505    0.0374798
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.041578, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003379, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.0453, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.86126e-08  1.86126e-08  1.09178e-09
      low eigenvalue method done, cpu time[sec] = 0.045514, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.86e-08  1.09e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.71e-09  1.09e-09         1
         *Z       ---       ---  1.96e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.09178e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.66186e-39  5.98467e-40  1.76318e-41  9.88002e-41  3.21004e-42  1.22985e-41  6.30874e-47  2.29495e-65

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 8.03761, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 460 K
      Energy reference = 29565 1/cm
      Energy step      = 77 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007091
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.482171
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.28002
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.26552
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.51846
         W1 Well: minimal relaxation eigenvalue = 0.0851078
         W1 Well: maximal relaxation eigenvalue = 0.986361
         W1 Well:       grid size = 446
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4777 1/cm
         B1 Barrier:        grid size = 384
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -3 1/cm
         B2 Barrier:        grid size = 382
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 150 1/cm
         B3 Barrier:        grid size = 444
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4623 1/cm
         B4 Barrier:        grid size = 465
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6240 1/cm
         B5 Barrier: nonpositive number of states at -23103 1/cm => truncating
         B5 Barrier:        grid size = 684
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23103 1/cm
         B6 Barrier:        grid size = 365
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1459 1/cm
         B7 Barrier:        grid size = 323
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4693 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16705 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.93384, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 446
      MasterEquation::Barrier::truncate: real weight = 2.84691e+46
      MasterEquation::Barrier::truncate: effective weight = 9.98802e+42
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 446
      MasterEquation::Barrier::truncate: real weight = 2.19782e+45
      MasterEquation::Barrier::truncate: effective weight = 5.09632e+41
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4777  -4777 2.79e+09 7.39e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1     -3 1.04e+15
         B2    151 1.68e+14
         B3  -4623 4.27e+13
         B4  -4777 5.33e+13
         B5  -4777 5.79e+12
         B6   1460 6.86e+14
         B7   4694 6.61e+13
         B8  16706 1.46e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.58e-08  3.36e-08  1.16e-13  7.52e-16  3.08e-40  2.95e-05      1.35  1.59e+17
          R  6.32e+07         1      2.12  7.35e-06  4.75e-08  1.94e-32  1.86e+03  8.54e+07  1.01e+25
         P1  2.98e+07     0.471         1  3.46e-06  2.24e-08  9.16e-33       877  4.02e+07  4.75e+24
         P2   8.6e+12  1.36e+05  2.89e+05         1   0.00647  2.65e-27  2.53e+08  1.16e+13  1.37e+30
         P3  1.33e+15  2.11e+07  4.47e+07       155         1  4.09e-25  3.92e+10   1.8e+15  2.12e+32
         P4  3.25e+39  5.14e+31  1.09e+32  3.78e+26  2.44e+24         1  9.57e+34  4.39e+39  5.18e+56
         P5  3.39e+04  0.000537   0.00114  3.95e-09  2.55e-11  1.04e-35         1  4.59e+04  5.41e+21
         P6      0.74  1.17e-08  2.49e-08   8.6e-14  5.56e-16  2.28e-40  2.18e-05         1  1.18e+17
         P7  6.27e-18  9.92e-26  2.11e-25  7.29e-31  4.71e-33  1.93e-57  1.85e-22  8.48e-18         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.22e+17  4.71e+17  1.63e+12  1.05e+10  4.31e-15  4.13e+20   1.9e+25  2.24e+42
          R  4.51e-18         1      2.12  7.35e-06  4.75e-08  1.94e-32  1.86e+03  8.54e+07  1.01e+25
         P1  2.12e-18     0.471         1  3.46e-06  2.24e-08  9.16e-33       877  4.02e+07  4.75e+24
         P2  6.14e-13  1.36e+05  2.89e+05         1   0.00647  2.65e-27  2.53e+08  1.16e+13  1.37e+30
         P3  9.49e-11  2.11e+07  4.47e+07       155         1  4.09e-25  3.92e+10   1.8e+15  2.12e+32
         P4  2.32e+14  5.14e+31  1.09e+32  3.78e+26  2.44e+24         1  9.57e+34  4.39e+39  5.18e+56
         P5  2.42e-21  0.000537   0.00114  3.95e-09  2.55e-11  1.04e-35         1  4.59e+04  5.41e+21
         P6  5.28e-26  1.17e-08  2.49e-08   8.6e-14  5.56e-16  2.28e-40  2.18e-05         1  1.18e+17
         P7  4.47e-43  9.92e-26  2.11e-25  7.29e-31  4.71e-33  1.93e-57  1.85e-22  8.48e-18         1
   MasterEquation::set:  done, cpu time[sec] = 2.94769, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         3.51267e+08
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.409374, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.69226, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12031.8      1939.19      492.876      616.167      66.8696      7921.59      762.992      1.69012
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.105741, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003289, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.149884, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.3845e-07   4.3845e-07  9.65186e-08
      low eigenvalue method done, cpu time[sec] = 0.151043, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.38e-07  9.65e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.2e-08  9.65e-08         1
         *Z       ---       ---  1.05e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.65185e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.5722e-36  6.44679e-37  1.95468e-38  1.73674e-37   4.5979e-39  9.59157e-40  7.01748e-46   6.7336e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.99493, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1          1.0538e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.410792, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.68928, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             4010.6      646.395      164.292      205.389      22.2899      2640.53      254.331     0.563375
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039821, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00327, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.079598, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.9083e-07   1.9083e-07  3.52146e-08
      low eigenvalue method done, cpu time[sec] = 0.080704, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.91e-07  3.52e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.8e-08  3.52e-08         1
         *Z       ---       ---  1.05e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.52146e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.21186e-37  2.08776e-37  5.82516e-39  4.35242e-38  1.23509e-39   7.9829e-40  7.07586e-46  6.67777e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.91639, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         1.75633e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.407864, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.71371, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2406.36      387.837      98.5751      123.233      13.3739      1584.32      152.598     0.338025
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039776, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003296, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055373, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.2711e-07   1.2711e-07   2.0474e-08
      low eigenvalue method done, cpu time[sec] = 0.056509, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.27e-07  2.05e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.19e-08  2.05e-08         1
         *Z       ---       ---  1.05e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.0474e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.72075e-37   1.1394e-37  3.15454e-39  2.19493e-38  6.42597e-40  6.58018e-40  7.13791e-46   6.6895e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.75516, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         2.45887e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.408077, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.7275, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1718.83      277.027      70.4108      88.0238       9.5528      1131.66      108.999     0.241446
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039807, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003263, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.043402, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.64903e-08  9.64903e-08  1.39454e-08
      low eigenvalue method done, cpu time[sec] = 0.043603, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.65e-08  1.39e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     9e-09  1.39e-08         1
         *Z       ---       ---  1.05e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.39454e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.57862e-37  7.43841e-38  2.06426e-39  1.37469e-38  4.10574e-40  5.54681e-40  7.20237e-46  6.70188e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.91788, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1          3.1614e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.408729, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.739, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1336.87      215.465       54.764       68.463      7.42996      880.177      84.7769     0.187792
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039783, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003271, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.047426, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.82069e-08  7.82069e-08  1.03219e-08
      low eigenvalue method done, cpu time[sec] = 0.048573, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.82e-08  1.03e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.27e-09  1.03e-08         1
         *Z       ---       ---  1.05e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.03219e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.93132e-37  5.33442e-38  1.48756e-39  9.60222e-39  2.90989e-40  4.76997e-40  7.26791e-46  6.67574e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.94066, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         3.51267e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.408217, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.7138, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1203.18      193.919      49.2876      61.6167      6.68696      792.159      76.2992     0.169012
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039832, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003268, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06731, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.15367e-08  7.15367e-08  9.06602e-09
      low eigenvalue method done, cpu time[sec] = 0.068429, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.15e-08  9.07e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.64e-09  9.07e-09         1
         *Z       ---       ---  1.05e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.06602e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.70431e-37  4.62416e-38  1.29298e-39  8.24112e-39  2.51243e-40  4.45095e-40  7.30069e-46  6.69117e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.77227, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1           5.269e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.408275, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.74375, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             802.12      129.279      32.8584      41.0778      4.45797      528.106      50.8662     0.112675
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039783, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003269, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.04338, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.0469e-08   5.0469e-08  5.39511e-09
      low eigenvalue method done, cpu time[sec] = 0.043584, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.05e-08   5.4e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.66e-09   5.4e-09         1
         *Z       ---       ---  1.05e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.39511e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.03118e-37  2.61828e-38   7.4202e-40  4.51428e-39  1.40746e-40   3.2998e-40  7.45956e-46   6.6905e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.93415, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         7.02534e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.410848, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.71633, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             601.59      96.9593      24.6438      30.8083      3.34348      396.079      38.1496    0.0845062
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039839, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003267, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.055861, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.91921e-08  3.91922e-08  3.66293e-09
      low eigenvalue method done, cpu time[sec] = 0.056986, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.92e-08  3.66e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.61e-09  3.66e-09         1
         *Z       ---       ---  1.05e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.66293e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.07449e-38  1.71806e-38  4.92719e-40  2.90645e-39  9.20075e-41  2.58604e-40  7.60158e-46  6.69066e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.92452, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         8.78167e+09
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.410648, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.55127, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            481.272      77.5674       19.715      24.6467      2.67478      316.864      30.5197     0.067605
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.172598, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003294, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.216631, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.21185e-08  3.21185e-08  2.68364e-09
      low eigenvalue method done, cpu time[sec] = 0.217788, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.21e-08  2.68e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.95e-09  2.68e-09         1
         *Z       ---       ---  1.05e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.68364e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.22146e-38  1.22698e-38  3.55489e-40  2.04989e-39  6.56343e-41  2.10303e-40  7.72018e-46  6.69252e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.91795, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1          1.0538e+10
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.408371, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.7323, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             401.06      64.6395      16.4292      20.5389      2.22899      264.053      25.4331    0.0563375
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039849, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003271, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.043456, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.72492e-08  2.72492e-08  2.06704e-09
      low eigenvalue method done, cpu time[sec] = 0.043667, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.72e-08  2.07e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.49e-09  2.07e-09         1
         *Z       ---       ---  1.05e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.06704e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.04425e-38  9.26163e-39  2.70705e-40  1.53356e-39  4.95456e-41  1.75619e-40   7.8131e-46  6.68752e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.91905, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         1.22943e+10
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.407518, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.71779, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            343.766      55.4053      14.0822      17.6048      1.91056      226.331      21.7998    0.0482893
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039798, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00328, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.050623, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.3685e-08   2.3685e-08  1.64976e-09
      low eigenvalue method done, cpu time[sec] = 0.051733, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.37e-08  1.65e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.16e-09  1.65e-09         1
         *Z       ---       ---  1.05e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.64976e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.24211e-38   7.2705e-39  2.14146e-40   1.1958e-39  3.89192e-41  1.49622e-40  7.88062e-46  6.68893e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.91755, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 460 K
            Well    Collision, 1/sec
              W1         1.40507e+10
      global relaxation matrix dimension = 446
      setting global matrices ... done, cpu time[sec] = 0.40979, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.61738, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            300.795      48.4796      12.3219      15.4042      1.67174       198.04      19.0748    0.0422531
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.113515, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00327, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.157393, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.09592e-08  2.09592e-08  1.35232e-09
      low eigenvalue method done, cpu time[sec] = 0.158597, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.1e-08  1.35e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.91e-09  1.35e-09         1
         *Z       ---       ---  1.05e+31
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.35232e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.66718e-38  5.87714e-39  1.74285e-40  9.61556e-40  3.14905e-41  1.29493e-40  7.92436e-46  6.69369e-64

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.92732, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 470 K
      Energy reference = 29843 1/cm
      Energy step      = 78 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007053
         W1 Well: collisional kernel bandwidth = 57
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.484196
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.278049
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.262705
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.49953
         W1 Well: minimal relaxation eigenvalue = 0.0845169
         W1 Well: maximal relaxation eigenvalue = 0.988444
         W1 Well:       grid size = 445
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4866 1/cm
         B1 Barrier:        grid size = 383
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -31 1/cm
         B2 Barrier:        grid size = 380
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 202 1/cm
         B3 Barrier:        grid size = 442
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4633 1/cm
         B4 Barrier:        grid size = 462
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6193 1/cm
         B5 Barrier: nonpositive number of states at -23119 1/cm => truncating
         B5 Barrier:        grid size = 679
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23119 1/cm
         B6 Barrier:        grid size = 364
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1451 1/cm
         B7 Barrier:        grid size = 323
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4649 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16739 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.91046, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 445
      MasterEquation::Barrier::truncate: real weight = 8.79602e+45
      MasterEquation::Barrier::truncate: effective weight = 3.12605e+42
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 445
      MasterEquation::Barrier::truncate: real weight = 5.60531e+44
      MasterEquation::Barrier::truncate: effective weight = 1.47106e+41
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4866  -4866 2.71e+09 7.74e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -31 1.12e+15
         B2    203 1.83e+14
         B3  -4633 4.67e+13
         B4  -4866 5.82e+13
         B5  -4866 6.34e+12
         B6   1452 7.47e+14
         B7   4649 7.28e+13
         B8  16739  1.7e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.35e-08  2.83e-08  1.35e-13  9.75e-16  1.34e-39  2.29e-05     0.859  4.59e+16
          R  7.41e+07         1       2.1     1e-05  7.23e-08  9.97e-32   1.7e+03  6.37e+07   3.4e+24
         P1  3.54e+07     0.477         1  4.78e-06  3.45e-08  4.76e-32       811  3.04e+07  1.62e+24
         P2  7.39e+12  9.97e+04  2.09e+05         1   0.00721  9.94e-27   1.7e+08  6.35e+12  3.39e+29
         P3  1.03e+15  1.38e+07   2.9e+07       139         1  1.38e-24  2.35e+10  8.81e+14   4.7e+31
         P4  7.44e+38     1e+31   2.1e+31  1.01e+26  7.25e+23         1  1.71e+34  6.39e+38  3.41e+55
         P5  4.36e+04  0.000588   0.00123   5.9e-09  4.25e-11  5.86e-35         1  3.74e+04     2e+21
         P6      1.16  1.57e-08  3.29e-08  1.57e-13  1.13e-15  1.57e-39  2.67e-05         1  5.34e+16
         P7  2.18e-17  2.94e-25  6.17e-25  2.95e-30  2.13e-32  2.93e-56     5e-22  1.87e-17         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.59e+16  5.44e+16   2.6e+11  1.87e+09  2.59e-15  4.41e+19  1.65e+24  8.82e+40
          R  3.85e-17         1       2.1     1e-05  7.23e-08  9.97e-32   1.7e+03  6.37e+07   3.4e+24
         P1  1.84e-17     0.477         1  4.78e-06  3.45e-08  4.76e-32       811  3.04e+07  1.62e+24
         P2  3.84e-12  9.97e+04  2.09e+05         1   0.00721  9.94e-27   1.7e+08  6.35e+12  3.39e+29
         P3  5.33e-10  1.38e+07   2.9e+07       139         1  1.38e-24  2.35e+10  8.81e+14   4.7e+31
         P4  3.87e+14     1e+31   2.1e+31  1.01e+26  7.25e+23         1  1.71e+34  6.39e+38  3.41e+55
         P5  2.27e-20  0.000588   0.00123   5.9e-09  4.25e-11  5.86e-35         1  3.74e+04     2e+21
         P6  6.05e-25  1.57e-08  3.29e-08  1.57e-13  1.13e-15  1.57e-39  2.67e-05         1  5.34e+16
         P7  1.13e-41  2.94e-25  6.17e-25  2.95e-30  2.13e-32  2.93e-56     5e-22  1.87e-17         1
   MasterEquation::set:  done, cpu time[sec] = 2.92531, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         3.46268e+08
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.406535, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.73287, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12566.1      2045.58      522.321      651.429      70.9167      8360.16      814.482      1.90036
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.065257, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00323, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.109405, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.71312e-07  4.71312e-07  1.10433e-07
      low eigenvalue method done, cpu time[sec] = 0.110557, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.71e-07   1.1e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.49e-08   1.1e-07         1
         *Z       ---       ---  5.84e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.10433e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.33464e-35  5.41314e-36  1.63093e-37  1.43392e-36  3.81085e-38  8.68687e-39  7.92156e-45  1.68771e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.99143, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1          1.0388e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.40704, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.69982, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4188.69      681.859      174.107      217.143      23.6389      2786.72      271.494     0.633453
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.03957, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003209, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.06679, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.08643e-07  2.08643e-07  4.10392e-08
      low eigenvalue method done, cpu time[sec] = 0.068427, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.09e-07   4.1e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.96e-08   4.1e-08         1
         *Z       ---       ---  5.84e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.10392e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0    5.368e-36  1.78062e-36  4.95785e-38  3.66384e-37  1.04455e-38   7.2812e-39  7.98718e-45  1.69194e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.76755, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         1.73134e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.408837, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.71225, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2513.22      409.115      104.464      130.286      14.1833      1672.03      162.896     0.380072
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039577, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003211, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.049775, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.39923e-07  1.39923e-07  2.40845e-08
      low eigenvalue method done, cpu time[sec] = 0.050966, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-07  2.41e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.3e-08  2.41e-08         1
         *Z       ---       ---  5.84e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.40845e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.24496e-36  9.79692e-37  2.71152e-38  1.86512e-37  5.48848e-39  6.03705e-39  8.05686e-45  1.69023e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.90581, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         2.42388e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.407817, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.69683, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1795.15      292.225      74.6172      93.0613       10.131      1194.31      116.355      0.27148
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039546, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003235, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.069956, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.0665e-07   1.0665e-07  1.65099e-08
      low eigenvalue method done, cpu time[sec] = 0.071085, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.07e-07  1.65e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   9.9e-09  1.65e-08         1
         *Z       ---       ---  5.84e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.65099e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.26312e-36  6.43151e-37  1.78629e-38  1.17552e-37  3.53014e-39  5.11301e-39  8.12915e-45  1.69113e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.91408, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         3.11641e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.406736, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.69651, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1396.23      227.286      58.0356       72.381      7.87963      928.907       90.498     0.211151
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039587, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003219, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.070136, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.66858e-08  8.66858e-08  1.22798e-08
      low eigenvalue method done, cpu time[sec] = 0.071283, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.67e-08  1.23e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.02e-09  1.23e-08         1
         *Z       ---       ---  5.84e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.22798e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.70322e-36  4.63199e-37  1.29382e-38   8.2502e-38  2.51455e-39   4.4142e-39  8.20254e-45  1.69171e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.90967, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         3.46268e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.40815, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.71769, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1256.61      204.558      52.2321      65.1429      7.09167      836.016      81.4482     0.190036
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039568, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003238, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052289, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   7.9382e-08   7.9382e-08  1.08081e-08
      low eigenvalue method done, cpu time[sec] = 0.053467, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.94e-08  1.08e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.33e-09  1.08e-08         1
         *Z       ---       ---  5.84e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.08081e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.5061e-36   4.0225e-37  1.12701e-38  7.09494e-38   2.1757e-39  4.12614e-39  8.23921e-45  1.69147e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.91646, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         5.19402e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.407546, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.72046, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            837.738      136.372      34.8214      43.4286      4.72778      557.344      54.2988     0.126691
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039586, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00323, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.051309, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.62301e-08  5.62301e-08  6.48373e-09
      low eigenvalue method done, cpu time[sec] = 0.052475, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.62e-08  6.48e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.16e-09  6.48e-09         1
         *Z       ---       ---  5.84e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.48373e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.18558e-37  2.29362e-37  6.52195e-39  3.91657e-38  1.22886e-39  3.08098e-39  8.41668e-45  1.69046e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.91828, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         6.92537e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.406743, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.71903, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            628.304      102.279       26.116      32.5715      3.54584      418.008      40.7241     0.095018
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039572, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003231, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.052129, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.37781e-08  4.37781e-08  4.42745e-09
      low eigenvalue method done, cpu time[sec] = 0.053292, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.38e-08  4.43e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.01e-09  4.43e-09         1
         *Z       ---       ---  5.84e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.42745e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0    6.338e-37  1.51257e-37  4.35661e-39  2.53544e-38  8.08021e-40  2.42782e-39  8.57514e-45  1.69008e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.90336, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         8.65671e+09
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.403427, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.71271, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            502.643      81.8231      20.8928      26.0572      2.83667      334.407      32.5793    0.0760144
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039533, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003223, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.046544, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.59421e-08   3.5942e-08  3.25828e-09
      low eigenvalue method done, cpu time[sec] = 0.047688, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.59e-08  3.26e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.28e-09  3.26e-09         1
         *Z       ---       ---  5.84e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.25828e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.69873e-37  1.08441e-37  3.15776e-39  1.79575e-38  5.79009e-40  1.98314e-39  8.70755e-45   1.6904e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.90019, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1          1.0388e+10
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.409605, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.55568, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            418.869      68.1859      17.4107      21.7143      2.36389      278.672      27.1494    0.0633453
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.16927, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003212, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.212979, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.05352e-08  3.05352e-08  2.51879e-09
      low eigenvalue method done, cpu time[sec] = 0.214161, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.05e-08  2.52e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.78e-09  2.52e-09         1
         *Z       ---       ---  5.84e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.51879e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.65258e-37   8.2112e-38  2.41368e-39  1.34802e-38  4.38679e-40  1.66225e-39  8.81152e-45  1.69011e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.91692, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         1.21194e+10
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.408234, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.73519, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            359.031       58.445      14.9234      18.6123      2.02619      238.862      23.2709     0.054296
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.039555, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003234, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.043121, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.65701e-08  2.65701e-08  2.01647e-09
      low eigenvalue method done, cpu time[sec] = 0.043327, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.66e-08  2.02e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.41e-09  2.02e-09         1
         *Z       ---       ---  5.84e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.01647e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.93706e-37  6.46287e-38  1.91541e-39  1.05411e-38  3.45649e-40  1.42074e-39  8.88745e-45  1.69116e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.92275, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 470 K
            Well    Collision, 1/sec
              W1         1.38507e+10
      global relaxation matrix dimension = 445
      setting global matrices ... done, cpu time[sec] = 0.406725, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.73467, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            314.152      51.1394       13.058      16.2857      1.77292      209.004       20.362     0.047509
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.03956, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003229, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.043117, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.35331e-08  2.35331e-08  1.65726e-09
      low eigenvalue method done, cpu time[sec] = 0.043319, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.35e-08  1.66e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.13e-09  1.66e-09         1
         *Z       ---       ---  5.84e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.65726e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.42258e-37  5.23608e-38  1.56309e-39  8.49692e-39  2.80409e-40  1.23307e-39  8.93715e-45  1.69119e-62

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.76274, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 480 K
      Energy reference = 30122 1/cm
      Energy step      = 80 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006273
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.465189
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.270095
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.254903
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.45174
         W1 Well: minimal relaxation eigenvalue = 0.0839236
         W1 Well: maximal relaxation eigenvalue = 0.987337
         W1 Well:       grid size = 438
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -4919 1/cm
         B1 Barrier:        grid size = 377
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -38 1/cm
         B2 Barrier:        grid size = 374
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 201 1/cm
         B3 Barrier:        grid size = 435
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4679 1/cm
         B4 Barrier:        grid size = 454
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6198 1/cm
         B5 Barrier: nonpositive number of states at -23159 1/cm => truncating
         B5 Barrier:        grid size = 666
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23159 1/cm
         B6 Barrier:        grid size = 358
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1481 1/cm
         B7 Barrier:        grid size = 318
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4681 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16761 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.82501, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 438
      MasterEquation::Barrier::truncate: real weight = 2.86139e+45
      MasterEquation::Barrier::truncate: effective weight = 1.043e+42
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 438
      MasterEquation::Barrier::truncate: real weight = 1.55968e+44
      MasterEquation::Barrier::truncate: effective weight = 4.54124e+40
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -4919  -4919 2.66e+09 8.11e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -38 1.21e+15
         B2    202 1.99e+14
         B3  -4679 5.11e+13
         B4  -4919 6.36e+13
         B5  -4919 6.94e+12
         B6   1482 8.14e+14
         B7   4682 8.02e+13
         B8  16762 1.97e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.03e-08  2.13e-08  1.39e-13  1.11e-15  4.91e-39   1.6e-05     0.494  1.23e+16
          R  9.73e+07         1      2.07  1.35e-05  1.08e-07  4.78e-31  1.56e+03   4.8e+07   1.2e+24
         P1   4.7e+07     0.483         1  6.52e-06  5.21e-08  2.31e-31       752  2.32e+07  5.79e+23
         P2  7.21e+12   7.4e+04  1.53e+05         1     0.008  3.54e-26  1.15e+08  3.56e+12  8.89e+28
         P3  9.01e+14  9.25e+06  1.92e+07       125         1  4.42e-24  1.44e+10  4.45e+14  1.11e+31
         P4  2.04e+38  2.09e+30  4.34e+30  2.83e+25  2.26e+23         1  3.26e+33  1.01e+38  2.51e+54
         P5  6.24e+04  0.000642   0.00133  8.67e-09  6.93e-11  3.07e-34         1  3.08e+04   7.7e+20
         P6      2.03  2.08e-08  4.31e-08  2.81e-13  2.25e-15  9.94e-39  3.24e-05         1   2.5e+16
         P7  8.11e-17  8.33e-25  1.73e-24  1.12e-29     9e-32  3.98e-55   1.3e-21     4e-17         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.32e+15  6.87e+15  4.48e+10  3.58e+08  1.58e-15  5.17e+18  1.59e+23  3.98e+39
          R  3.02e-16         1      2.07  1.35e-05  1.08e-07  4.78e-31  1.56e+03   4.8e+07   1.2e+24
         P1  1.46e-16     0.483         1  6.52e-06  5.21e-08  2.31e-31       752  2.32e+07  5.79e+23
         P2  2.23e-11   7.4e+04  1.53e+05         1     0.008  3.54e-26  1.15e+08  3.56e+12  8.89e+28
         P3  2.79e-09  9.25e+06  1.92e+07       125         1  4.42e-24  1.44e+10  4.45e+14  1.11e+31
         P4  6.31e+14  2.09e+30  4.34e+30  2.83e+25  2.26e+23         1  3.26e+33  1.01e+38  2.51e+54
         P5  1.93e-19  0.000642   0.00133  8.67e-09  6.93e-11  3.07e-34         1  3.08e+04   7.7e+20
         P6  6.28e-24  2.08e-08  4.31e-08  2.81e-13  2.25e-15  9.94e-39  3.24e-05         1   2.5e+16
         P7  2.51e-40  8.33e-25  1.73e-24  1.12e-29     9e-32  3.98e-55   1.3e-21     4e-17         1
   MasterEquation::set:  done, cpu time[sec] = 2.83894, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         3.41454e+08
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.394502, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.40273, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13114.9      2156.21      553.075      688.174       75.147       8815.6      868.573      2.13126
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.315873, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003161, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.358462, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.61483e-07  5.61483e-07  1.39514e-07
      low eigenvalue method done, cpu time[sec] = 0.359578, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.61e-07   1.4e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.32e-08   1.4e-07         1
         *Z       ---       ---  3.13e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.39514e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.03554e-34  4.15541e-35  1.24483e-36  1.08358e-35  2.89042e-37   7.1611e-38  8.09794e-44   3.7565e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.87128, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.02436e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.395745, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.37964, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4371.62      718.736      184.358      229.391       25.049      2938.53      289.524     0.710421
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.268575, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003131, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.311021, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.52748e-07  2.52748e-07  5.27815e-08
      low eigenvalue method done, cpu time[sec] = 0.312173, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.53e-07  5.28e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.36e-08  5.28e-08         1
         *Z       ---       ---  3.13e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.27815e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.23772e-35  1.38792e-35  3.85794e-37  2.82125e-36  8.07943e-38   6.0483e-38  8.16484e-44   3.7334e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.79729, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.70727e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.394336, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.38885, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2622.97      431.242      110.615      137.635      15.0294      1763.12      173.715     0.426252
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.251355, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003137, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.294137, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.70649e-07  1.70649e-07  3.12592e-08
      low eigenvalue method done, cpu time[sec] = 0.295309, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.71e-07  3.13e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.58e-08  3.13e-08         1
         *Z       ---       ---  3.13e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.12592e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.58473e-35  7.69716e-36  2.13041e-37  1.44943e-36   4.2863e-38  5.04477e-38  8.23581e-44  3.73176e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.79135, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         2.39018e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.398606, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.37816, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1873.55       308.03      79.0107      98.3106      10.7353      1259.37      124.082     0.304466
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.267388, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003137, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.309833, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.30599e-07  1.30599e-07  2.15625e-08
      low eigenvalue method done, cpu time[sec] = 0.311344, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.31e-07  2.16e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.21e-08  2.16e-08         1
         *Z       ---       ---  3.13e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.15625e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.8138e-35  5.08076e-36  1.41271e-37  9.19187e-37  2.77491e-38  4.29281e-38  8.30932e-44  3.73676e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.80659, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         3.07309e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.395445, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.3786, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1457.21      239.579      61.4528      76.4638      8.34967      979.511      96.5081     0.236807
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.268357, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003125, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.310992, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.06453e-07  1.06453e-07  1.61146e-08
      low eigenvalue method done, cpu time[sec] = 0.312146, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.06e-07  1.61e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   9.8e-09  1.61e-08         1
         *Z       ---       ---  3.13e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.61146e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.37153e-35  3.67452e-36  1.02836e-37  6.48138e-37  1.98637e-38  3.72058e-38  8.38385e-44  3.73622e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.79688, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         3.41454e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.394674, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.39853, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1311.49      215.621      55.3075      68.8174       7.5147       881.56      86.8573     0.213126
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.242609, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003145, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.285132, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.75944e-08  9.75944e-08   1.4212e-08
      low eigenvalue method done, cpu time[sec] = 0.286271, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.76e-08  1.42e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.97e-09  1.42e-08         1
         *Z       ---       ---  3.13e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.4212e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.21523e-35  3.19668e-36  8.97669e-38  5.58479e-37  1.72228e-38  3.48379e-38  8.42104e-44  3.73566e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.79104, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         5.12181e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.394519, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.39075, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            874.323      143.747      36.8717      45.8783       5.0098      587.706      57.9048     0.142084
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.258241, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003153, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.300575, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.9414e-08   6.9414e-08  8.59333e-09
      low eigenvalue method done, cpu time[sec] = 0.301691, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.94e-08  8.59e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.35e-09  8.59e-09         1
         *Z       ---       ---  3.13e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.59333e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.46981e-36  1.83538e-36  5.23759e-38   3.1065e-37  9.80654e-39  2.61983e-38  8.60075e-44  3.73576e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.79725, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         6.82909e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.395203, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.40848, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            655.743       107.81      27.6537      34.4087      3.75735       440.78      43.4286     0.106563
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.234207, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003122, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.276661, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.41842e-08  5.41842e-08  5.90132e-09
      low eigenvalue method done, cpu time[sec] = 0.277788, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.42e-08   5.9e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.93e-09   5.9e-09         1
         *Z       ---       ---  3.13e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.90132e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.1832e-36  1.21637e-36  3.51928e-38  2.02193e-37  6.48536e-39  2.07562e-38  8.76095e-44  3.73561e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.7925, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         8.53636e+09
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.394225, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.40407, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            524.594      86.2483       22.123       27.527      3.00588      352.624      34.7429    0.0852505
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.234154, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003126, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.276407, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.45689e-08  4.45688e-08   4.3621e-09
      low eigenvalue method done, cpu time[sec] = 0.277566, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.46e-08  4.36e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.05e-09  4.36e-09         1
         *Z       ---       ---  3.13e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.3621e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.85948e-36  8.75407e-37   2.5625e-38  1.43804e-37  4.66801e-39  1.70288e-38  8.89479e-44  3.73564e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.79422, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.02436e+10
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.398123, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.42886, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            437.162      71.8736      18.4358      22.9391       2.5049      293.853      28.9524    0.0710421
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.216377, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003132, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.258589, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.79182e-08  3.79182e-08  3.38422e-09
      low eigenvalue method done, cpu time[sec] = 0.259709, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.79e-08  3.38e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.43e-09  3.38e-09         1
         *Z       ---       ---  3.13e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.38422e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.01093e-36  6.64929e-37  1.96597e-38  1.08315e-37   3.5495e-39   1.4326e-38  9.00004e-44  3.73535e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.79704, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.19509e+10
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.394628, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.41802, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             374.71       61.606      15.8021      19.6621      2.14706      251.874      24.8164    0.0608932
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.222148, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003129, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.264681, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.30318e-08  3.30318e-08  2.71752e-09
      low eigenvalue method done, cpu time[sec] = 0.265984, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.3e-08  2.72e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.99e-09  2.72e-09         1
         *Z       ---       ---  3.13e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.71752e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.42842e-36  5.24724e-37  1.56501e-38  8.49395e-38  2.80529e-39  1.22834e-38  9.07717e-44  3.73509e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.79012, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 480 K
            Well    Collision, 1/sec
              W1         1.36582e+10
      global relaxation matrix dimension = 438
      setting global matrices ... done, cpu time[sec] = 0.393489, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.24971, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            327.871      53.9052      13.8269      17.2044      1.87868       220.39      21.7143    0.0532815
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.385101, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003141, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.427526, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.92835e-08  2.92835e-08  2.23925e-09
      low eigenvalue method done, cpu time[sec] = 0.428716, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.93e-08  2.24e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.64e-09  2.24e-09         1
         *Z       ---       ---  3.13e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.23925e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.00824e-36  4.26077e-37  1.28059e-38   6.8634e-38  2.28176e-39  1.06904e-38  9.12806e-44  3.73626e-61

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.7809, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 490 K
      Energy reference = 30399 1/cm
      Energy step      = 82 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007615
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.458476
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.263025
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.24987
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.39995
         W1 Well: minimal relaxation eigenvalue = 0.0833273
         W1 Well: maximal relaxation eigenvalue = 0.986311
         W1 Well:       grid size = 432
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5025 1/cm
         B1 Barrier:        grid size = 371
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -23 1/cm
         B2 Barrier:        grid size = 369
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 140 1/cm
         B3 Barrier:        grid size = 427
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4615 1/cm
         B4 Barrier:        grid size = 447
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6255 1/cm
         B5 Barrier: nonpositive number of states at -23147 1/cm => truncating
         B5 Barrier:        grid size = 653
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23147 1/cm
         B6 Barrier:        grid size = 353
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1452 1/cm
         B7 Barrier:        grid size = 314
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4650 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16705 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.75479, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 432
      MasterEquation::Barrier::truncate: real weight = 9.76935e+44
      MasterEquation::Barrier::truncate: effective weight = 3.65002e+41
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 432
      MasterEquation::Barrier::truncate: real weight = 4.689e+43
      MasterEquation::Barrier::truncate: effective weight = 1.49109e+40
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5025  -5025 2.57e+09 8.49e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -23  1.3e+15
         B2    141 2.17e+14
         B3  -4615 5.58e+13
         B4  -5025 6.93e+13
         B5  -5025 7.59e+12
         B6   1453 8.86e+14
         B7   4651 8.83e+13
         B8  16705 2.28e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.08e-09  1.86e-08  1.63e-13  1.44e-15  1.95e-38   1.3e-05     0.333  4.02e+15
          R   1.1e+08         1      2.05   1.8e-05  1.59e-07  2.15e-30  1.43e+03  3.67e+07  4.43e+23
         P1  5.37e+07     0.488         1  8.77e-06  7.76e-08  1.05e-30       699  1.79e+07  2.16e+23
         P2  6.12e+12  5.56e+04  1.14e+05         1   0.00884  1.19e-25  7.97e+07  2.04e+12  2.46e+28
         P3  6.93e+14  6.29e+06  1.29e+07       113         1  1.35e-23  9.02e+09  2.31e+14  2.79e+30
         P4  5.13e+37  4.66e+29  9.54e+29  8.37e+24   7.4e+22         1  6.67e+32  1.71e+37  2.06e+53
         P5  7.68e+04  0.000698   0.00143  1.25e-08  1.11e-10   1.5e-33         1  2.56e+04  3.09e+20
         P6         3  2.73e-08  5.59e-08   4.9e-13  4.33e-15  5.86e-38  3.91e-05         1  1.21e+16
         P7  2.49e-16  2.26e-24  4.63e-24  4.06e-29  3.59e-31  4.85e-54  3.24e-21  8.28e-17         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.61e+14  9.44e+14  8.28e+09  7.32e+07   9.9e-16   6.6e+17  1.69e+22  2.04e+38
          R  2.17e-15         1      2.05   1.8e-05  1.59e-07  2.15e-30  1.43e+03  3.67e+07  4.43e+23
         P1  1.06e-15     0.488         1  8.77e-06  7.76e-08  1.05e-30       699  1.79e+07  2.16e+23
         P2  1.21e-10  5.56e+04  1.14e+05         1   0.00884  1.19e-25  7.97e+07  2.04e+12  2.46e+28
         P3  1.37e-08  6.29e+06  1.29e+07       113         1  1.35e-23  9.02e+09  2.31e+14  2.79e+30
         P4  1.01e+15  4.66e+29  9.54e+29  8.37e+24   7.4e+22         1  6.67e+32  1.71e+37  2.06e+53
         P5  1.51e-18  0.000698   0.00143  1.25e-08  1.11e-10   1.5e-33         1  2.56e+04  3.09e+20
         P6  5.92e-23  2.73e-08  5.59e-08   4.9e-13  4.33e-15  5.86e-38  3.91e-05         1  1.21e+16
         P7   4.9e-39  2.26e-24  4.63e-24  4.06e-29  3.59e-31  4.85e-54  3.24e-21  8.28e-17         1
   MasterEquation::set:  done, cpu time[sec] = 2.76929, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         3.36814e+08
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.38381, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.1576, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13678.3      2271.16      585.178      726.443      79.5662      9288.23      925.355      2.38484
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.496511, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003063, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.537793, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.80733e-07  5.80733e-07   1.5179e-07
      low eigenvalue method done, cpu time[sec] = 0.538953, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.81e-07  1.52e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.47e-08  1.52e-07         1
         *Z       ---       ---  1.85e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.5179e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.38284e-34   2.9316e-34  8.73674e-36  7.53298e-35  2.01659e-36  5.44102e-37  7.51358e-43  7.26719e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.77138, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.01044e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.38443, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.16032, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4559.44      757.054      195.059      242.148      26.5221      3096.08      308.452     0.794945
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.407331, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002995, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.448498, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.65559e-07  2.65559e-07  5.84291e-08
      low eigenvalue method done, cpu time[sec] = 0.450113, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.66e-07  5.84e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.47e-08  5.84e-08         1
         *Z       ---       ---  1.85e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.84291e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.07234e-34  9.93795e-35  2.75887e-36  1.99736e-35  5.74486e-37  4.61885e-37  7.57539e-43  7.26145e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55587, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.68407e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.383605, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.17286, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2735.67      454.232      117.036      145.289      15.9132      1857.65      185.071     0.476967
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.414083, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002998, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.45557, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.80443e-07  1.80443e-07   3.4912e-08
      low eigenvalue method done, cpu time[sec] = 0.457384, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.8e-07  3.49e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.66e-08  3.49e-08         1
         *Z       ---       ---  1.85e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.4912e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.89029e-34  5.55429e-35  1.53787e-36  1.03537e-35  3.07646e-37  3.87152e-37  7.64089e-43  7.26928e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.7004, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1          2.3577e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.383692, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.19065, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1954.05      324.452      83.5969      103.778      11.3666      1326.89      132.194     0.340691
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.393734, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002999, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.435042, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.38626e-07  1.38626e-07  2.42292e-08
      low eigenvalue method done, cpu time[sec] = 0.436195, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.39e-07  2.42e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.27e-08  2.42e-08         1
         *Z       ---       ---  1.85e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.42292e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.33447e-34  3.68596e-35  1.02635e-36  6.60579e-36  2.00437e-37   3.3081e-37  7.70863e-43  7.26774e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.6999, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         3.03132e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.384074, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.09554, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1519.81      252.351      65.0198      80.7159      8.84069      1032.03      102.817     0.264982
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.467884, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003003, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.509204, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    1.133e-07    1.133e-07  1.81922e-08
      low eigenvalue method done, cpu time[sec] = 0.51037, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.13e-07  1.82e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.04e-08  1.82e-08         1
         *Z       ---       ---  1.85e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.81922e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.01373e-34  2.67672e-35  7.50768e-37  4.67924e-36  1.44173e-37  2.87724e-37  7.77721e-43  7.26658e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.67929, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         3.36814e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.38381, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.00566, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1367.83      227.116      58.5178      72.6443      7.95662      928.823      92.5355     0.238484
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.578224, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.620092, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.03984e-07  1.03984e-07  1.60761e-08
      low eigenvalue method done, cpu time[sec] = 0.622271, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-07  1.61e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   9.5e-09  1.61e-08         1
         *Z       ---       ---  1.85e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.60761e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.99963e-35  2.33269e-35  6.56712e-37  4.03975e-36  1.25261e-37  2.69837e-37  7.81141e-43  7.26936e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.70031, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1          5.0522e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.384847, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.2148, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            911.889      151.411      39.0119      48.4295      5.30441      619.215      61.6903     0.158989
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.373336, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002992, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.414132, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   7.4247e-08  7.42469e-08  9.79581e-09
      low eigenvalue method done, cpu time[sec] = 0.415314, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.42e-08   9.8e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.75e-09   9.8e-09         1
         *Z       ---       ---  1.85e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.79581e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.57441e-35  1.34844e-35  3.86268e-37  2.26396e-36  7.18902e-38  2.04256e-37   7.9764e-43  7.26917e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.54594, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         6.73627e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.384231, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.17521, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            683.917      113.558      29.2589      36.3222      3.97831      464.412      46.2678     0.119242
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.41615, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003004, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.457182, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.81019e-08  5.81019e-08  6.76457e-09
      low eigenvalue method done, cpu time[sec] = 0.458335, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.81e-08  6.76e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.26e-09  6.76e-09         1
         *Z       ---       ---  1.85e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.76457e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.88938e-35  8.98032e-36  2.61048e-37  1.48142e-36  4.78133e-38  1.62653e-37  8.12333e-43  7.26951e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.70658, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         8.42034e+09
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.37775, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.20514, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            547.133      90.8465      23.4071      29.0577      3.18265      371.529      37.0142    0.0953934
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.377422, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.003005, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.418772, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.78769e-08  4.78769e-08  5.02188e-09
      low eigenvalue method done, cpu time[sec] = 0.419973, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.79e-08  5.02e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.32e-09  5.02e-09         1
         *Z       ---       ---  1.85e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.02188e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.90856e-35  6.48754e-36  1.90933e-37  1.05797e-36  3.45666e-38     1.34e-37  8.24614e-43  7.26912e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.6984, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.01044e+10
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.385008, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.21192, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            455.944      75.7054      19.5059      24.2148      2.65221      309.608      30.8452    0.0794945
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.369476, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003028, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.411096, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.07882e-08  4.07882e-08  3.90989e-09
      low eigenvalue method done, cpu time[sec] = 0.412657, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.08e-08  3.91e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.67e-09  3.91e-09         1
         *Z       ---       ---  1.85e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.90989e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.27708e-35  4.94295e-36  1.47023e-37  7.99551e-37  2.63783e-38  1.13128e-37  8.34294e-43  7.26975e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.69878, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.17885e+10
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.383226, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.1938, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             390.81      64.8903      16.7194      20.7555      2.27332      265.378      26.4387    0.0681382
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.377651, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002998, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.418629, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.55706e-08  3.55706e-08    3.149e-09
      low eigenvalue method done, cpu time[sec] = 0.419749, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.56e-08  3.15e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.19e-09  3.15e-09         1
         *Z       ---       ---  1.85e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.149e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0    1.842e-35  3.91084e-36    1.174e-37  6.28767e-37  2.09106e-38  9.72927e-38  8.41422e-43  7.27013e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.68582, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 490 K
            Well    Collision, 1/sec
              W1         1.34725e+10
      global relaxation matrix dimension = 432
      setting global matrices ... done, cpu time[sec] = 0.383221, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.16955, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            341.958       56.779      14.6295      18.1611      1.98916      232.206      23.1339    0.0596209
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.397669, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002997, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.438905, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.15622e-08  3.15622e-08  2.60148e-09
      low eigenvalue method done, cpu time[sec] = 0.439985, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.16e-08   2.6e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.83e-09   2.6e-09         1
         *Z       ---       ---  1.85e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.60148e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.52719e-35  3.18271e-36  9.63199e-38  5.09294e-37  1.70524e-38  8.49026e-38   8.4617e-43  7.27135e-60

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.6816, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 500 K
      Energy reference = 30677 1/cm
      Energy step      = 83 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006806
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.456928
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.261482
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.249261
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.40079
         W1 Well: minimal relaxation eigenvalue = 0.0827723
         W1 Well: maximal relaxation eigenvalue = 0.988284
         W1 Well:       grid size = 431
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5095 1/cm
         B1 Barrier:        grid size = 370
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -33 1/cm
         B2 Barrier:        grid size = 368
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 132 1/cm
         B3 Barrier:        grid size = 426
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4681 1/cm
         B4 Barrier:        grid size = 445
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6258 1/cm
         B5 Barrier: nonpositive number of states at -23107 1/cm => truncating
         B5 Barrier:        grid size = 648
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23107 1/cm
         B6 Barrier:        grid size = 352
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1461 1/cm
         B7 Barrier:        grid size = 313
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4698 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16733 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.75158, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 431
      MasterEquation::Barrier::truncate: real weight = 3.49043e+44
      MasterEquation::Barrier::truncate: effective weight = 1.31999e+41
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 431
      MasterEquation::Barrier::truncate: real weight = 1.5105e+43
      MasterEquation::Barrier::truncate: effective weight = 5.08076e+39
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5095  -5095 2.51e+09 8.89e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -33 1.41e+15
         B2    133 2.36e+14
         B3  -4681  6.1e+13
         B4  -5095 7.55e+13
         B5  -5095  8.3e+12
         B6   1462 9.64e+14
         B7   4699 9.71e+13
         B8  16733 2.63e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.46e-09  1.51e-08  1.76e-13  1.72e-15  6.78e-38  9.86e-06     0.211  1.27e+15
          R  1.34e+08         1      2.03  2.37e-05   2.3e-07  9.09e-30  1.32e+03  2.83e+07   1.7e+23
         P1  6.61e+07     0.493         1  1.17e-05  1.14e-07  4.48e-30       652   1.4e+07  8.38e+22
         P2  5.67e+12  4.23e+04  8.57e+04         1   0.00973  3.84e-25  5.59e+07   1.2e+12  7.18e+27
         P3  5.83e+14  4.34e+06  8.81e+06       103         1  3.95e-23  5.74e+09  1.23e+14  7.38e+29
         P4  1.48e+37   1.1e+29  2.23e+29   2.6e+24  2.53e+22         1  1.45e+32  3.11e+36  1.87e+52
         P5  1.01e+05  0.000756   0.00153  1.79e-08  1.74e-10  6.88e-33         1  2.14e+04  1.29e+20
         P6      4.74  3.53e-08  7.17e-08  8.36e-13  8.14e-15  3.21e-37  4.67e-05         1  6.01e+15
         P7  7.89e-16  5.88e-24  1.19e-23  1.39e-28  1.35e-30  5.35e-53  7.78e-21  1.66e-16         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.93e+13   1.4e+14  1.64e+09  1.59e+07   6.3e-16  9.16e+16  1.96e+21  1.18e+37
          R  1.44e-14         1      2.03  2.37e-05   2.3e-07  9.09e-30  1.32e+03  2.83e+07   1.7e+23
         P1  7.12e-15     0.493         1  1.17e-05  1.14e-07  4.48e-30       652   1.4e+07  8.38e+22
         P2   6.1e-10  4.23e+04  8.57e+04         1   0.00973  3.84e-25  5.59e+07   1.2e+12  7.18e+27
         P3  6.27e-08  4.34e+06  8.81e+06       103         1  3.95e-23  5.74e+09  1.23e+14  7.38e+29
         P4  1.59e+15   1.1e+29  2.23e+29   2.6e+24  2.53e+22         1  1.45e+32  3.11e+36  1.87e+52
         P5  1.09e-17  0.000756   0.00153  1.79e-08  1.74e-10  6.88e-33         1  2.14e+04  1.29e+20
         P6   5.1e-22  3.53e-08  7.17e-08  8.36e-13  8.14e-15  3.21e-37  4.67e-05         1  6.01e+15
         P7   8.5e-38  5.88e-24  1.19e-23  1.39e-28  1.35e-30  5.35e-53  7.78e-21  1.66e-16         1
   MasterEquation::set:  done, cpu time[sec] = 2.76537, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         3.32336e+08
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.384704, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.1663, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14256.6      2390.58      618.671      766.279      84.1801      9778.46      984.918      2.66339
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.483403, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003024, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.524492, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.56398e-07  6.56398e-07  1.79994e-07
      low eigenvalue method done, cpu time[sec] = 0.525638, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.56e-07   1.8e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.16e-08   1.8e-07         1
         *Z       ---       ---  1.08e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.79994e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.86019e-33   1.9099e-33  5.66504e-35  4.83995e-34  1.30016e-35  3.79679e-36  6.36508e-42  1.25809e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.76415, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         9.97009e+08
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.382868, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.1881, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4752.19      796.859      206.224      255.426        28.06      3259.49      328.306     0.887798
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.39922, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003014, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.439765, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.04817e-07  3.04817e-07  7.04555e-08
      low eigenvalue method done, cpu time[sec] = 0.440862, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.05e-07  7.05e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.82e-08  7.05e-08         1
         *Z       ---       ---  1.08e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.04555e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.05555e-33  6.56833e-34   1.8217e-35  1.30616e-34  3.77267e-36  3.24351e-36   6.4171e-42  1.25442e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.69884, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         1.66168e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.382997, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.11055, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2851.32      478.115      123.734      153.256       16.836      1955.69      196.984     0.532679
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.469614, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003017, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.510227, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.08421e-07  2.08421e-07  4.24612e-08
      low eigenvalue method done, cpu time[sec] = 0.511445, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.08e-07  4.25e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.91e-08  4.25e-08         1
         *Z       ---       ---  1.08e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.24612e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.27539e-33  3.69881e-34  1.02479e-35  6.82987e-35  2.03883e-36  2.73306e-36  6.47217e-42  1.25616e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.69588, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         2.32635e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.382681, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.198, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2036.65      341.511      88.3816      109.468      12.0257      1396.92      140.703     0.380485
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.389727, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003012, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.430751, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.60732e-07  1.60732e-07  2.96433e-08
      low eigenvalue method done, cpu time[sec] = 0.432256, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.61e-07  2.96e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.47e-08  2.96e-08         1
         *Z       ---       ---  1.08e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.96433e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.05629e-34  2.46746e-34  6.88209e-36  4.38331e-35  1.33659e-36  2.34529e-36  6.52906e-42  1.25613e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.69721, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         2.99103e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.383441, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.20419, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1584.06       265.62      68.7413      85.1421      9.35335       1086.5      109.435     0.295933
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.387283, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003006, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.427704, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.31721e-07  1.31721e-07  2.23584e-08
      low eigenvalue method done, cpu time[sec] = 0.428291, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.32e-07  2.24e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.2e-08  2.24e-08         1
         *Z       ---       ---  1.08e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.23584e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.91043e-34  1.79904e-34  5.05827e-36  3.11887e-35  9.65946e-37  2.04711e-36  6.58658e-42  1.25587e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55108, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         3.32336e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.382312, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.2143, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1425.66      239.058      61.8671      76.6279      8.41801      977.846      98.4918     0.266339
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.399795, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003013, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.441024, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.21021e-07  1.21021e-07  1.97958e-08
      low eigenvalue method done, cpu time[sec] = 0.442143, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.21e-07  1.98e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.1e-08  1.98e-08         1
         *Z       ---       ---  1.08e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.97958e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.14659e-34  1.57049e-34  4.43352e-36  2.69772e-35   8.4091e-37  1.92289e-36  6.61525e-42  1.25583e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.72427, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         4.98504e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.382963, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.19416, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            950.439      159.372      41.2448      51.0853      5.61201      651.897      65.6612      0.17756
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.394805, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003001, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.435935, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.67496e-08  8.67496e-08  1.21536e-08
      low eigenvalue method done, cpu time[sec] = 0.437075, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.67e-08  1.22e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.84e-09  1.22e-08         1
         *Z       ---       ---  1.08e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.21536e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.8357e-34  9.13905e-35  2.62836e-36    1.523e-35  4.86382e-37  1.46512e-36  6.75344e-42  1.25613e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.70355, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         6.64672e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.384565, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.1533, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            712.829      119.529      30.9336      38.3139      4.20901      488.923      49.2459      0.13317
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.429038, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003001, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.470163, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.80579e-08  6.80579e-08  8.43846e-09
      low eigenvalue method done, cpu time[sec] = 0.471677, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.81e-08  8.44e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.13e-09  8.44e-09         1
         *Z       ---       ---  1.08e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.43846e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.6907e-34  6.11561e-35  1.78639e-36  1.00181e-35  3.25292e-37   1.1726e-36  6.87651e-42  1.25614e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.69803, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1          8.3084e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.382641, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.05417, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            570.263      95.6231      24.7469      30.6512      3.36721      391.138      39.3967     0.106536
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.528091, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002999, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.569538, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.61831e-08  5.61831e-08  6.29116e-09
      low eigenvalue method done, cpu time[sec] = 0.570684, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.62e-08  6.29e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.04e-09  6.29e-09         1
         *Z       ---       ---  1.08e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.29116e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.02064e-34  4.43454e-35  1.31236e-36   7.1837e-36   2.3619e-37  9.70008e-37  6.97955e-42  1.25614e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.69619, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         9.97009e+09
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.383838, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.22446, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            475.219      79.6859      20.6224      25.5426        2.806      325.949      32.8306    0.0887798
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.364817, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003013, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.406249, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.79316e-08  4.79316e-08  4.91513e-09
      low eigenvalue method done, cpu time[sec] = 0.407389, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.79e-08  4.92e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.29e-09  4.92e-09         1
         *Z       ---       ---  1.08e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.91513e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.5874e-34  3.38904e-35  1.01421e-36    5.447e-36  1.80878e-37  8.21757e-37  7.06105e-42  1.25628e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.70555, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         1.16318e+10
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.382386, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.22794, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            407.331      68.3022      17.6763      21.8937      2.40515      279.384      28.1405     0.076097
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.35894, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003001, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.400214, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.18469e-08  4.18469e-08  3.97023e-09
      low eigenvalue method done, cpu time[sec] = 0.401341, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.18e-08  3.97e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.74e-09  3.97e-09         1
         *Z       ---       ---  1.08e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.97023e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.28784e-34  2.68828e-35  8.12324e-37  4.29546e-36  1.43813e-37   7.0885e-37  7.12144e-42   1.2564e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.55187, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 500 K
            Well    Collision, 1/sec
              W1         1.32934e+10
      global relaxation matrix dimension = 431
      setting global matrices ... done, cpu time[sec] = 0.381304, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 6.23886, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            356.415      59.7644      15.4668       19.157       2.1045      244.461       24.623    0.0665848
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.344535, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.003008, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.385684, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.71654e-08  3.71654e-08  3.28822e-09
      low eigenvalue method done, cpu time[sec] = 0.387219, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.72e-08  3.29e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.31e-09  3.29e-09         1
         *Z       ---       ---  1.08e+30
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.28822e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.07043e-34  2.19262e-35  6.68221e-37  3.48762e-36   1.1758e-37   6.2021e-37  7.16214e-42  1.25631e-58

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.6959, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 510 K
      Energy reference = 30956 1/cm
      Energy step      = 85 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007118
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.452379
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.253592
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.24411
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.3419
         W1 Well: minimal relaxation eigenvalue = 0.0822047
         W1 Well: maximal relaxation eigenvalue = 0.987271
         W1 Well:       grid size = 425
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5169 1/cm
         B1 Barrier:        grid size = 365
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -69 1/cm
         B2 Barrier:        grid size = 362
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 185 1/cm
         B3 Barrier:        grid size = 419
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4660 1/cm
         B4 Barrier:        grid size = 437
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6189 1/cm
         B5 Barrier: nonpositive number of states at -23105 1/cm => truncating
         B5 Barrier:        grid size = 636
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23105 1/cm
         B6 Barrier:        grid size = 347
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1460 1/cm
         B7 Barrier:        grid size = 309
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4690 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16760 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.67001, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 425
      MasterEquation::Barrier::truncate: real weight = 1.30151e+44
      MasterEquation::Barrier::truncate: effective weight = 5.04058e+40
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 425
      MasterEquation::Barrier::truncate: real weight = 5.17712e+42
      MasterEquation::Barrier::truncate: effective weight = 1.84214e+39
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5169  -5169 2.45e+09 9.31e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -69 1.51e+15
         B2    186 2.56e+14
         B3  -4660 6.66e+13
         B4  -5169 8.23e+13
         B5  -5169 9.06e+12
         B6   1461 1.05e+15
         B7   4691 1.07e+14
         B8  16761 3.02e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.11e-09  1.23e-08  1.88e-13  2.01e-15  2.22e-37  7.48e-06     0.135  4.14e+14
          R  1.64e+08         1      2.01  3.08e-05  3.29e-07  3.64e-29  1.22e+03   2.2e+07  6.78e+22
         P1  8.15e+07     0.498         1  1.53e-05  1.64e-07  1.81e-29       609   1.1e+07  3.37e+22
         P2  5.31e+12  3.25e+04  6.52e+04         1    0.0107  1.18e-24  3.97e+07  7.16e+11   2.2e+27
         P3  4.98e+14  3.04e+06  6.11e+06      93.7         1  1.11e-22  3.72e+09  6.71e+13  2.06e+29
         P4   4.5e+36  2.75e+28  5.52e+28  8.46e+23  9.04e+21         1  3.36e+31  6.06e+35  1.86e+51
         P5  1.34e+05  0.000818   0.00164  2.52e-08  2.69e-10  2.97e-32         1   1.8e+04  5.54e+19
         P6      7.42  4.54e-08   9.1e-08   1.4e-12  1.49e-14  1.65e-36  5.55e-05         1  3.07e+15
         P7  2.41e-15  1.48e-23  2.96e-23  4.54e-28  4.85e-30  5.37e-52  1.81e-20  3.25e-16         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.12e+13  2.25e+13  3.45e+08  3.68e+06  4.08e-16  1.37e+16  2.47e+20  7.59e+35
          R  8.92e-14         1      2.01  3.08e-05  3.29e-07  3.64e-29  1.22e+03   2.2e+07  6.78e+22
         P1  4.44e-14     0.498         1  1.53e-05  1.64e-07  1.81e-29       609   1.1e+07  3.37e+22
         P2   2.9e-09  3.25e+04  6.52e+04         1    0.0107  1.18e-24  3.97e+07  7.16e+11   2.2e+27
         P3  2.71e-07  3.04e+06  6.11e+06      93.7         1  1.11e-22  3.72e+09  6.71e+13  2.06e+29
         P4  2.45e+15  2.75e+28  5.52e+28  8.46e+23  9.04e+21         1  3.36e+31  6.06e+35  1.86e+51
         P5  7.29e-17  0.000818   0.00164  2.52e-08  2.69e-10  2.97e-32         1   1.8e+04  5.54e+19
         P6  4.05e-21  4.54e-08   9.1e-08   1.4e-12  1.49e-14  1.65e-36  5.55e-05         1  3.07e+15
         P7  1.32e-36  1.48e-23  2.96e-23  4.54e-28  4.85e-30  5.37e-52  1.81e-20  3.25e-16         1
   MasterEquation::set:  done, cpu time[sec] = 2.68464, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         3.28012e+08
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.372706, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.95736, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14849.9      2514.53      653.595      807.724      88.9947      10286.6      1047.35      2.96892
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.617837, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002889, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.657657, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.36592e-07  7.36592e-07  2.11036e-07
      low eigenvalue method done, cpu time[sec] = 0.658823, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.37e-07  2.11e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.88e-08  2.11e-07         1
         *Z       ---       ---  6.36e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.11036e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.96923e-32  1.15544e-32  3.41145e-34  2.88927e-33  7.78742e-35  2.45429e-35  4.96796e-41  1.94216e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.65595, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         9.84037e+08
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.371647, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.92984, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4949.95      838.176      217.865      269.241      29.6649      3428.88      349.117      0.98964
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.601273, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002887, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.641716, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.4716e-07   3.4716e-07  8.39578e-08
      low eigenvalue method done, cpu time[sec] = 0.642872, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.47e-07   8.4e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.19e-08   8.4e-08         1
         *Z       ---       ---  6.36e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.39578e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.2757e-32  4.02936e-33  1.11656e-34  7.93193e-34  2.30036e-35  2.10922e-35   5.0084e-41  1.93997e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.47636, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         1.64006e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.373317, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.94465, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2969.97      502.906      130.719      161.545      17.7989      2057.33       209.47     0.593784
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.579906, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00288, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.619779, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.38819e-07  2.38819e-07  5.10237e-08
      low eigenvalue method done, cpu time[sec] = 0.620905, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.39e-07   5.1e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.18e-08   5.1e-08         1
         *Z       ---       ---  6.36e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.10237e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.98047e-33  2.28576e-33   6.3374e-35  4.18293e-34  1.25426e-35  1.78631e-35  5.05117e-41  1.94036e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.60413, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         2.29609e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.373414, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.94171, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2121.41      359.218      93.3707      115.389      12.7135      1469.52      149.622     0.424132
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.587811, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002895, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.627575, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.84859e-07  1.84859e-07  3.58271e-08
      low eigenvalue method done, cpu time[sec] = 0.628688, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.85e-07  3.58e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.68e-08  3.58e-08         1
         *Z       ---       ---  6.36e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.58271e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.69907e-33   1.5326e-33    4.282e-35  2.70006e-34  8.27248e-36   1.5392e-35  5.09528e-41  1.94091e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.6091, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         2.95211e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.373234, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.91072, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1649.98      279.392      72.6217      89.7471       9.8883      1142.96      116.372      0.32988
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.615455, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002894, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.655805, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.51889e-07  1.51889e-07  2.71426e-08
      low eigenvalue method done, cpu time[sec] = 0.656917, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.52e-07  2.71e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.38e-08  2.71e-08         1
         *Z       ---       ---  6.36e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.71426e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.36775e-33  1.12182e-33  3.16194e-35  1.92963e-34  6.00616e-36  1.34815e-35  5.13982e-41  1.94052e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.6074, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         3.28012e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.372466, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.95834, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1484.99      251.453      65.3595      80.7724      8.89947      1028.66      104.735     0.296892
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.568201, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002865, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.610081, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.39699e-07  1.39699e-07   2.4077e-08
      low eigenvalue method done, cpu time[sec] = 0.610637, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-07  2.41e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.26e-08  2.41e-08         1
         *Z       ---       ---  6.36e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.4077e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.89221e-33  9.80936e-34   2.7769e-35  1.67217e-34  5.23894e-36   1.2683e-35    5.162e-41  1.94073e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.60778, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         4.92019e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.371906, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.92034, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             989.99      167.635       43.573      53.8483      5.93298      685.775      69.8235     0.197928
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.445109, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002878, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.484583, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.00524e-07  1.00524e-07  1.48916e-08
      low eigenvalue method done, cpu time[sec] = 0.485243, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.01e-07  1.49e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.04e-09  1.49e-08         1
         *Z       ---       ---  6.36e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.48916e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.44668e-33  5.74571e-34  1.65904e-35  9.50867e-35  3.05341e-36   9.7255e-36  5.26877e-41  1.94061e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.60248, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         6.56025e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.372544, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.96454, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            742.493      125.726      32.6798      40.3862      4.44973      514.331      52.3676     0.148446
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.551075, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002879, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.591595, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.90618e-08  7.90618e-08  1.03948e-08
      low eigenvalue method done, cpu time[sec] = 0.592706, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.91e-08  1.04e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.08e-09  1.04e-08         1
         *Z       ---       ---  6.36e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.03948e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.72541e-33  3.86305e-34  1.13388e-35  6.28712e-35  2.05334e-36  7.82216e-36  5.36375e-41  1.94069e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.59307, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         8.20031e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.372036, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.95682, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            593.994      100.581      26.1438       32.309      3.55979      411.465      41.8941     0.118757
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.555606, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002889, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.596145, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.53853e-08  6.53853e-08  7.78202e-09
      low eigenvalue method done, cpu time[sec] = 0.597259, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.54e-08  7.78e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.84e-09  7.78e-09         1
         *Z       ---       ---  6.36e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.78203e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.30111e-33   2.8115e-34  8.36634e-36  4.52646e-35  1.49728e-36  6.49672e-36  5.44331e-41  1.94086e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.59519, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         9.84037e+09
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.372264, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.96262, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            494.995      83.8176      21.7865      26.9241      2.96649      342.888      34.9117     0.098964
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.546297, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002889, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.58686, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    5.586e-08    5.586e-08  6.10073e-09
      low eigenvalue method done, cpu time[sec] = 0.58833, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.59e-08   6.1e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.98e-09   6.1e-09         1
         *Z       ---       ---  6.36e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.10073e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.02561e-33  2.15514e-34  6.48866e-36  3.44344e-35  1.15066e-36  5.52247e-36  5.50636e-41  1.94097e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.59077, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         1.14804e+10
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.372719, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.98308, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            424.282      71.8437      18.6741      23.0778      2.54271      293.904      29.9243    0.0848263
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.532713, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002899, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.572984, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.88232e-08  4.88232e-08  4.94216e-09
      low eigenvalue method done, cpu time[sec] = 0.574064, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.88e-08  4.94e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.34e-09  4.94e-09         1
         *Z       ---       ---  6.36e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.94216e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.34463e-34  1.71387e-34  5.21274e-36  2.72298e-35   9.1757e-37  4.77769e-36  5.55328e-41   1.9412e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.59409, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 510 K
            Well    Collision, 1/sec
              W1         1.31205e+10
      global relaxation matrix dimension = 425
      setting global matrices ... done, cpu time[sec] = 0.372009, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.98505, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            371.246      62.8632      16.3399      20.1931      2.22487      257.166      26.1838     0.074223
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.531526, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002894, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.571691, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.34013e-08  4.34013e-08  4.10345e-09
      low eigenvalue method done, cpu time[sec] = 0.572765, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.34e-08   4.1e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.85e-09   4.1e-09         1
         *Z       ---       ---  6.36e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.10345e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.95319e-34  1.40094e-34   4.2992e-36  2.21614e-35  7.52107e-37  4.19107e-36  5.58516e-41  1.94118e-57

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.59374, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 520 K
      Energy reference = 31233 1/cm
      Energy step      = 87 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006647
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.440017
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.249907
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.241158
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.29111
         W1 Well: minimal relaxation eigenvalue = 0.0816534
         W1 Well: maximal relaxation eigenvalue = 0.986298
         W1 Well:       grid size = 419
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5219 1/cm
         B1 Barrier:        grid size = 359
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = 0 1/cm
         B2 Barrier:        grid size = 357
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 173 1/cm
         B3 Barrier:        grid size = 412
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4611 1/cm
         B4 Barrier:        grid size = 430
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6177 1/cm
         B5 Barrier: nonpositive number of states at -23229 1/cm => truncating
         B5 Barrier:        grid size = 626
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23229 1/cm
         B6 Barrier:        grid size = 342
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1478 1/cm
         B7 Barrier:        grid size = 305
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4697 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16704 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.59849, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 419
      MasterEquation::Barrier::truncate: real weight = 5.05228e+43
      MasterEquation::Barrier::truncate: effective weight = 2.00273e+40
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 419
      MasterEquation::Barrier::truncate: real weight = 1.87658e+42
      MasterEquation::Barrier::truncate: effective weight = 6.99101e+38
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5219  -5219 2.42e+09 9.74e+12
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1      0 1.63e+15
         B2    174 2.78e+14
         B3  -4611 7.26e+13
         B4  -5219 8.96e+13
         B5  -5219  9.9e+12
         B6   1479 1.14e+15
         B7   4698 1.17e+14
         B8  16704 3.48e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.75e-09  9.45e-09  1.88e-13   2.2e-15  6.56e-37  5.39e-06    0.0824  1.33e+14
          R   2.1e+08         1      1.99  3.97e-05  4.63e-07  1.38e-28  1.13e+03  1.73e+07   2.8e+22
         P1  1.06e+08     0.503         1  1.99e-05  2.33e-07  6.94e-29       571  8.72e+06  1.41e+22
         P2  5.31e+12  2.52e+04  5.01e+04         1    0.0117  3.48e-24  2.86e+07  4.37e+11  7.06e+26
         P3  4.55e+14  2.16e+06   4.3e+06      85.7         1  2.98e-22  2.45e+09  3.75e+13  6.05e+28
         P4  1.53e+36  7.25e+27  1.44e+28  2.87e+23  3.35e+21         1  8.22e+30  1.26e+35  2.03e+50
         P5  1.85e+05  0.000881   0.00175   3.5e-08  4.08e-10  1.22e-31         1  1.53e+04  2.47e+19
         P6      12.1  5.76e-08  1.15e-07  2.29e-12  2.67e-14  7.95e-36  6.54e-05         1  1.61e+15
         P7  7.52e-15  3.57e-23   7.1e-23  1.42e-27  1.65e-29  4.93e-51  4.05e-20   6.2e-16         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.95e+12  3.87e+12  7.72e+07     9e+05  2.68e-16  2.21e+15  3.37e+19  5.45e+34
          R  5.14e-13         1      1.99  3.97e-05  4.63e-07  1.38e-28  1.13e+03  1.73e+07   2.8e+22
         P1  2.59e-13     0.503         1  1.99e-05  2.33e-07  6.94e-29       571  8.72e+06  1.41e+22
         P2   1.3e-08  2.52e+04  5.01e+04         1    0.0117  3.48e-24  2.86e+07  4.37e+11  7.06e+26
         P3  1.11e-06  2.16e+06   4.3e+06      85.7         1  2.98e-22  2.45e+09  3.75e+13  6.05e+28
         P4  3.73e+15  7.25e+27  1.44e+28  2.87e+23  3.35e+21         1  8.22e+30  1.26e+35  2.03e+50
         P5  4.53e-16  0.000881   0.00175   3.5e-08  4.08e-10  1.22e-31         1  1.53e+04  2.47e+19
         P6  2.96e-20  5.76e-08  1.15e-07  2.29e-12  2.67e-14  7.95e-36  6.54e-05         1  1.61e+15
         P7  1.84e-35  3.57e-23   7.1e-23  1.42e-27  1.65e-29  4.93e-51  4.05e-20   6.2e-16         1
   MasterEquation::set:  done, cpu time[sec] = 2.6128, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         3.23834e+08
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.360708, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.7046, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15458.2      2643.18      689.991      850.822      94.0159      10813.2      1112.75      3.30276
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.820985, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002831, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.859458, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.73998e-07  8.73998e-07  2.61045e-07
      low eigenvalue method done, cpu time[sec] = 0.860576, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.74e-07  2.61e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.13e-08  2.61e-07         1
         *Z       ---       ---  3.72e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.61045e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.69029e-31  6.51397e-32  1.91533e-33  1.60859e-32  4.34968e-34  1.47069e-34  3.57796e-40  2.69676e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.57128, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         9.71502e+08
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.362721, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.71089, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5152.74       881.06      229.997      283.607      31.3386      3604.39      370.917      1.10092
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.754523, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002823, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.793097, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.17907e-07  4.17907e-07  1.05503e-07
      low eigenvalue method done, cpu time[sec] = 0.794193, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.18e-07  1.06e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.83e-08  1.06e-07         1
         *Z       ---       ---  3.72e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.05503e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.37388e-32  2.30266e-32  6.37741e-34  4.49016e-33  1.30735e-34  1.27303e-34  3.60693e-40  2.69899e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.5115, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         1.61917e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.362062, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.70369, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3091.64      528.636      137.998      170.164      18.8032      2162.63       222.55     0.660551
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.753262, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002848, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.79228, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.89206e-07  2.89206e-07  6.46416e-08
      low eigenvalue method done, cpu time[sec] = 0.793393, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.89e-07  6.46e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.63e-08  6.46e-08         1
         *Z       ---       ---  3.72e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.46416e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.64986e-32  1.31565e-32  3.65131e-34  2.38759e-33  7.19034e-35  1.08403e-34  3.63753e-40  2.69708e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.50211, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         2.26684e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.362999, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.63015, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2208.32      377.597      98.5702      121.546      13.4308      1544.74      158.964     0.471822
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.825379, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002838, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.864209, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.24684e-07  2.24684e-07  4.56453e-08
      low eigenvalue method done, cpu time[sec] = 0.865406, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.25e-07  4.56e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.04e-08  4.56e-08         1
         *Z       ---       ---  3.72e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.56453e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.33901e-32   8.8655e-33  2.48183e-34   1.5499e-33  4.77055e-35  9.38081e-35  3.66906e-40  2.69733e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.50299, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         2.91451e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.362833, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.75421, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1717.58      293.687      76.6657      94.5358      10.4462      1201.46      123.639     0.366973
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.718802, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002825, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.75772, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.85091e-07  1.85091e-07  3.47307e-08
      low eigenvalue method done, cpu time[sec] = 0.75887, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.85e-07  3.47e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.67e-08  3.47e-08         1
         *Z       ---       ---  3.72e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.47307e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.56994e-32  6.51425e-33  1.84103e-34  1.11242e-33   3.4793e-35  8.24555e-35  3.70085e-40   2.6973e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.52182, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         3.23834e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.362785, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.74219, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1545.82      264.318      68.9991      85.0822      9.40159      1081.32      111.275     0.330276
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.725341, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002801, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.764819, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.70415e-07  1.70415e-07  3.08649e-08
      low eigenvalue method done, cpu time[sec] = 0.765938, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.7e-07  3.09e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.54e-08  3.09e-08         1
         *Z       ---       ---  3.72e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.08649e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.2943e-32  5.70551e-33  1.61998e-34  9.65752e-34  3.04069e-35  7.76926e-35  3.71666e-40  2.69736e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.5151, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         4.85751e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.36266, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.75254, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1030.55      176.212      45.9994      56.7215      6.26772      720.877      74.1833     0.220184
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.710291, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002807, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.74972, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.23098e-07  1.23098e-07  1.92282e-08
      low eigenvalue method done, cpu time[sec] = 0.750858, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.23e-07  1.92e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.1e-08  1.92e-08         1
         *Z       ---       ---  3.72e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.92282e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.45255e-32  3.36346e-33  9.75211e-35  5.53078e-34  1.78552e-35  5.99594e-35  3.79273e-40  2.69751e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.51272, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         6.47668e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.361321, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.7494, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            772.911      132.159      34.4996      42.5411      4.70079      540.658      55.6375     0.165138
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.715642, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002799, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.754697, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.70608e-08  9.70608e-08  1.34922e-08
      low eigenvalue method done, cpu time[sec] = 0.75594, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.71e-08  1.35e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.66e-09  1.35e-08         1
         *Z       ---       ---  3.72e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.34922e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.02966e-32   2.2719e-33  6.70172e-35  3.67562e-34  1.20721e-35  4.84624e-35  3.86036e-40  2.69742e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.51, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         8.09585e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.363144, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.75858, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            618.329      105.727      27.5996      34.0329      3.76063      432.526        44.51      0.13211
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.702874, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002817, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.742029, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.04178e-08  8.04178e-08  1.01424e-08
      low eigenvalue method done, cpu time[sec] = 0.74316, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.04e-08  1.01e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.15e-09  1.01e-08         1
         *Z       ---       ---  3.72e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.01424e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.79607e-33  1.65949e-33  4.96607e-35  2.65681e-34  8.84003e-36  4.04114e-35  3.91706e-40  2.69779e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.5121, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         9.71502e+09
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.36344, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.75871, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            515.274       88.106      22.9997      28.3607      3.13386      360.439      37.0917     0.110092
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.701401, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002816, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.74063, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.87998e-08  6.87998e-08  7.97788e-09
      low eigenvalue method done, cpu time[sec] = 0.741742, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.88e-08  7.98e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.1e-09  7.98e-09         1
         *Z       ---       ---  3.72e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.97788e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.16587e-33  1.27587e-33  3.86507e-35  2.02769e-34  6.81699e-36  3.44669e-35  3.96213e-40  2.69782e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.50577, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         1.13342e+10
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.363563, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.75732, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            441.663      75.5194       19.714      24.3092      2.68617      308.947      31.7929    0.0943645
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.69895, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002817, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.738183, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.02014e-08  6.02014e-08  6.48125e-09
      low eigenvalue method done, cpu time[sec] = 0.739305, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.02e-08  6.48e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.33e-09  6.48e-09         1
         *Z       ---       ---  3.72e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.48125e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.03088e-33  1.01719e-33  3.11429e-35  1.60783e-34  5.45194e-36  2.99052e-35  3.99583e-40  2.69798e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.50538, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 520 K
            Well    Collision, 1/sec
              W1         1.29534e+10
      global relaxation matrix dimension = 419
      setting global matrices ... done, cpu time[sec] = 0.362244, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.77466, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            386.455      66.0795      17.2498      21.2706       2.3504      270.329      27.8187    0.0825689
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.681131, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002801, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.72042, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.35664e-08  5.35664e-08  5.39462e-09
      low eigenvalue method done, cpu time[sec] = 0.721989, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.36e-08  5.39e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.73e-09  5.39e-09         1
         *Z       ---       ---  3.72e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.39462e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.20227e-33  8.33275e-34  2.57512e-35  1.31165e-34  4.48007e-36  2.63005e-35  4.01895e-40  2.69818e-56

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.50438, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 530 K
      Energy reference = 31511 1/cm
      Energy step      = 88 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007006
         W1 Well: collisional kernel bandwidth = 56
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.440741
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.248095
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.240109
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.28523
         W1 Well: minimal relaxation eigenvalue = 0.081131
         W1 Well: maximal relaxation eigenvalue = 0.988171
         W1 Well:       grid size = 418
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5272 1/cm
         B1 Barrier:        grid size = 359
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -81 1/cm
         B2 Barrier:        grid size = 356
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 182 1/cm
         B3 Barrier:        grid size = 411
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4657 1/cm
         B4 Barrier:        grid size = 429
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6241 1/cm
         B5 Barrier: nonpositive number of states at -23137 1/cm => truncating
         B5 Barrier:        grid size = 621
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23136 1/cm
         B6 Barrier:        grid size = 341
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1503 1/cm
         B7 Barrier:        grid size = 305
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4671 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16727 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.58118, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 418
      MasterEquation::Barrier::truncate: real weight = 2.03707e+43
      MasterEquation::Barrier::truncate: effective weight = 8.16776e+39
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 418
      MasterEquation::Barrier::truncate: real weight = 7.15693e+41
      MasterEquation::Barrier::truncate: effective weight = 2.7424e+38
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5272  -5272 2.37e+09 1.02e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -81 1.75e+15
         B2    183 3.02e+14
         B3  -4657 7.92e+13
         B4  -5272 9.74e+13
         B5  -5272 1.08e+13
         B6   1504 1.24e+15
         B7   4672 1.28e+14
         B8  16727 3.99e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.79e-09  7.47e-09  1.92e-13  2.44e-15  1.89e-36     4e-06    0.0522  4.54e+13
          R  2.64e+08         1      1.97  5.06e-05  6.43e-07  4.98e-28  1.06e+03  1.38e+07   1.2e+22
         P1  1.34e+08     0.507         1  2.57e-05  3.26e-07  2.53e-28       535  6.99e+06  6.07e+21
         P2  5.21e+12  1.98e+04  3.89e+04         1    0.0127  9.83e-24  2.08e+07  2.72e+11  2.36e+26
         P3   4.1e+14  1.55e+06  3.06e+06      78.7         1  7.74e-22  1.64e+09  2.14e+13  1.86e+28
         P4   5.3e+35  2.01e+27  3.96e+27  1.02e+23  1.29e+21         1  2.12e+30  2.77e+34   2.4e+49
         P5   2.5e+05  0.000948   0.00187   4.8e-08   6.1e-10  4.72e-31         1  1.31e+04  1.13e+19
         P6      19.1  7.26e-08  1.43e-07  3.68e-12  4.67e-14  3.61e-35  7.66e-05         1  8.69e+14
         P7   2.2e-14  8.36e-23  1.65e-22  4.23e-27  5.38e-29  4.16e-50  8.82e-20  1.15e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   3.6e+11  7.11e+11  1.82e+07  2.32e+05  1.79e-16   3.8e+14  4.96e+18  4.31e+33
          R  2.77e-12         1      1.97  5.06e-05  6.43e-07  4.98e-28  1.06e+03  1.38e+07   1.2e+22
         P1  1.41e-12     0.507         1  2.57e-05  3.26e-07  2.53e-28       535  6.99e+06  6.07e+21
         P2  5.48e-08  1.98e+04  3.89e+04         1    0.0127  9.83e-24  2.08e+07  2.72e+11  2.36e+26
         P3  4.31e-06  1.55e+06  3.06e+06      78.7         1  7.74e-22  1.64e+09  2.14e+13  1.86e+28
         P4  5.57e+15  2.01e+27  3.96e+27  1.02e+23  1.29e+21         1  2.12e+30  2.77e+34   2.4e+49
         P5  2.63e-15  0.000948   0.00187   4.8e-08   6.1e-10  4.72e-31         1  1.31e+04  1.13e+19
         P6  2.01e-19  7.26e-08  1.43e-07  3.68e-12  4.67e-14  3.61e-35  7.66e-05         1  8.69e+14
         P7  2.32e-34  8.36e-23  1.65e-22  4.23e-27  5.38e-29  4.16e-50  8.82e-20  1.15e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.59556, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         3.19793e+08
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.360951, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.63683, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16081.8       2776.6      727.902      895.618      99.2497      11358.4       1181.2       3.6663
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.864894, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002788, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.90439, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.0241e-06   1.0241e-06  3.17825e-07
      low eigenvalue method done, cpu time[sec] = 0.906045, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.02e-06  3.18e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   9.5e-08  3.18e-07         1
         *Z       ---       ---  2.25e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.17825e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.00051e-31  3.43407e-31  1.00626e-32  8.38245e-32  2.27384e-33  8.26289e-34  2.39773e-39  3.38964e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.54886, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         9.59378e+08
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.362593, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.65917, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5360.61      925.534      242.634      298.539      33.0832      3786.12      393.735       1.2221
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.780854, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002779, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.820463, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.96524e-07  4.96524e-07  1.30432e-07
      low eigenvalue method done, cpu time[sec] = 0.821562, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.97e-07   1.3e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.54e-08   1.3e-07         1
         *Z       ---       ---  2.25e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.30432e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.98485e-31  1.23021e-31   3.4069e-33    2.378e-32   6.9505e-34  7.18901e-34  2.41712e-39  3.39519e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48719, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         1.59896e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.360464, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.64063, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3216.37       555.32       145.58      179.124      19.8499      2271.67      236.241      0.73326
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.798516, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002774, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.83786, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    3.456e-07    3.456e-07  8.05514e-08
      low eigenvalue method done, cpu time[sec] = 0.838998, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.46e-07  8.06e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.13e-08  8.06e-08         1
         *Z       ---       ---  2.25e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.05514e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.5323e-31  7.07854e-32  1.96717e-33  1.27473e-32  3.85519e-34  6.15003e-34  2.43757e-39  3.39424e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48085, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         2.23855e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.359617, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.65108, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2297.4      396.657      103.986      127.945      14.1785      1622.62      168.744     0.523757
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.789052, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002778, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.829077, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.69454e-07  2.69454e-07  5.71923e-08
      low eigenvalue method done, cpu time[sec] = 0.830305, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.69e-07  5.72e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.43e-08  5.72e-08         1
         *Z       ---       ---  2.25e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.71923e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.82822e-31  4.79326e-32  1.34491e-33  8.32059e-33  2.57262e-34  5.34232e-34   2.4586e-39  3.39409e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.4827, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         2.87813e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.36196, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.66043, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1786.87      308.511       80.878      99.5131      11.0277      1262.04      131.245     0.407366
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.789291, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002766, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.828875, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.22536e-07  2.22536e-07  4.37005e-08
      low eigenvalue method done, cpu time[sec] = 0.830019, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.23e-07  4.37e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     2e-08  4.37e-08         1
         *Z       ---       ---  2.25e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.37005e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.41297e-31  3.53532e-32  1.00211e-33  5.99718e-33   1.8846e-34  4.71093e-34  2.47978e-39  3.39412e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49717, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         3.19793e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.361707, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.643, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1608.18       277.66      72.7902      89.5618      9.92497      1135.84       118.12      0.36663
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.796066, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002773, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.835485, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.05101e-07  2.05101e-07   3.8906e-08
      low eigenvalue method done, cpu time[sec] = 0.836603, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.05e-07  3.89e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.84e-08  3.89e-08         1
         *Z       ---       ---  2.25e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.8906e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.26366e-31  3.10139e-32  8.83462e-34  5.21578e-33  1.65011e-34  4.44519e-34  2.49031e-39  3.39452e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48035, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         4.79689e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.361256, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.6617, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1072.12      185.107      48.5268      59.7079      6.61665      757.225       78.747      0.24442
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.780876, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002774, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.819864, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.48713e-07  1.48713e-07  2.44092e-08
      low eigenvalue method done, cpu time[sec] = 0.820965, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.49e-07  2.44e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.33e-08  2.44e-08         1
         *Z       ---       ---  2.25e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.44092e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   8.0562e-32  1.83988e-32  5.35795e-34   3.0079e-33  9.76096e-35  3.45119e-34  2.54083e-39  3.39438e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48721, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         6.39585e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.360214, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.65827, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            804.092       138.83      36.3951      44.7809      4.96249      567.919      59.0602     0.183315
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.791465, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002769, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.830741, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.17549e-07  1.17549e-07  1.72154e-08
      low eigenvalue method done, cpu time[sec] = 0.832324, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.18e-07  1.72e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.04e-08  1.72e-08         1
         *Z       ---       ---  2.25e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.72154e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.73965e-32  1.24847e-32  3.70183e-34  2.00901e-33  6.63451e-35   2.8024e-34  2.58567e-39  3.39451e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49449, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         7.99482e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.360564, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.68385, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            643.273      111.064      29.1161      35.8247      3.96999      454.335      47.2482     0.146652
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.76694, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002769, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.805858, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.75696e-08  9.75696e-08  1.29932e-08
      low eigenvalue method done, cpu time[sec] = 0.806963, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.76e-08   1.3e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.64e-09   1.3e-08         1
         *Z       ---       ---  2.25e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.29932e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.36308e-32  9.15206e-33  2.75466e-34  1.45783e-33  4.87839e-35  2.34573e-34  2.62324e-39  3.39473e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49343, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         9.59378e+09
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.361652, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.67968, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            536.061      92.5534      24.2634      29.8539      3.30832      378.612      39.3735      0.12221
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.766658, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002772, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.806051, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   8.3591e-08   8.3591e-08   1.0254e-08
      low eigenvalue method done, cpu time[sec] = 0.807173, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.36e-08  1.03e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.38e-09  1.03e-08         1
         *Z       ---       ---  2.25e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.0254e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.46201e-32  7.05709e-33  2.15135e-34  1.11619e-33  3.77476e-35  2.00711e-34  2.65311e-39  3.39477e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49129, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         1.11927e+10
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.361435, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.67056, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            459.481      79.3315      20.7972      25.5891      2.83571      324.525      33.7487     0.104751
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.779678, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00277, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.818008, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.32269e-08  7.32269e-08  8.35371e-09
      low eigenvalue method done, cpu time[sec] = 0.819135, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.32e-08  8.35e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.45e-09  8.35e-09         1
         *Z       ---       ---  2.25e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.35371e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.83257e-32  5.64029e-33  1.73853e-34  8.87464e-34  3.02758e-35  1.74633e-34   2.6755e-39  3.39509e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49642, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 530 K
            Well    Collision, 1/sec
              W1         1.27917e+10
      global relaxation matrix dimension = 418
      setting global matrices ... done, cpu time[sec] = 0.361692, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.71045, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            402.046      69.4151      18.1975      22.3904      2.48124      283.959      29.5301    0.0916574
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.742948, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002794, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.781694, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.52176e-08  6.52176e-08     6.97e-09
      low eigenvalue method done, cpu time[sec] = 0.782826, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.52e-08  6.97e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.74e-09  6.97e-09         1
         *Z       ---       ---  2.25e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.97e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.37172e-32  4.63045e-33  1.44119e-34  7.25676e-34  2.49407e-35  1.53962e-34  2.69094e-39  3.39513e-55

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.49539, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 540 K
      Energy reference = 31790 1/cm
      Energy step      = 90 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006617
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.425121
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.240794
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.238085
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.22273
         W1 Well: minimal relaxation eigenvalue = 0.0805815
         W1 Well: maximal relaxation eigenvalue = 0.98725
         W1 Well:       grid size = 413
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5381 1/cm
         B1 Barrier:        grid size = 354
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -70 1/cm
         B2 Barrier:        grid size = 351
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 199 1/cm
         B3 Barrier:        grid size = 405
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4660 1/cm
         B4 Barrier:        grid size = 422
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6190 1/cm
         B5 Barrier: nonpositive number of states at -23111 1/cm => truncating
         B5 Barrier:        grid size = 610
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23110 1/cm
         B6 Barrier:        grid size = 337
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1459 1/cm
         B7 Barrier:        grid size = 301
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4699 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16759 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.49627, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 413
      MasterEquation::Barrier::truncate: real weight = 8.51285e+42
      MasterEquation::Barrier::truncate: effective weight = 3.49086e+39
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 413
      MasterEquation::Barrier::truncate: real weight = 2.85923e+41
      MasterEquation::Barrier::truncate: effective weight = 1.13584e+38
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5381  -5381 2.29e+09 1.07e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -70 1.88e+15
         B2    200 3.28e+14
         B3  -4660 8.63e+13
         B4  -5381 1.06e+14
         B5  -5381 1.18e+13
         B6   1460 1.34e+15
         B7   4700 1.41e+14
         B8  16760 4.57e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.42e-09  6.68e-09  2.19e-13  3.02e-15  5.85e-36  3.36e-06    0.0377   1.8e+13
          R  2.93e+08         1      1.95   6.4e-05  8.83e-07  1.71e-27       984   1.1e+07  5.28e+21
         P1   1.5e+08     0.512         1  3.27e-05  4.52e-07  8.76e-28       503  5.64e+06   2.7e+21
         P2  4.57e+12  1.56e+04  3.05e+04         1    0.0138  2.68e-23  1.54e+07  1.72e+11  8.25e+25
         P3  3.31e+14  1.13e+06  2.21e+06      72.5         1  1.94e-21  1.11e+09  1.25e+13  5.98e+27
         P4  1.71e+35  5.84e+26  1.14e+27  3.74e+22  5.16e+20         1  5.74e+29  6.44e+33  3.08e+48
         P5  2.97e+05   0.00102   0.00199  6.51e-08  8.98e-10  1.74e-30         1  1.12e+04  5.37e+18
         P6      26.5  9.07e-08  1.77e-07  5.81e-12  8.01e-14  1.55e-34  8.92e-05         1  4.79e+14
         P7  5.54e-14  1.89e-22   3.7e-22  1.21e-26  1.67e-28  3.24e-49  1.86e-19  2.09e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.11e+10  1.39e+11  4.55e+06  6.28e+04  1.22e-16  6.99e+13  7.84e+17  3.75e+32
          R  1.41e-11         1      1.95   6.4e-05  8.83e-07  1.71e-27       984   1.1e+07  5.28e+21
         P1   7.2e-12     0.512         1  3.27e-05  4.52e-07  8.76e-28       503  5.64e+06   2.7e+21
         P2   2.2e-07  1.56e+04  3.05e+04         1    0.0138  2.68e-23  1.54e+07  1.72e+11  8.25e+25
         P3  1.59e-05  1.13e+06  2.21e+06      72.5         1  1.94e-21  1.11e+09  1.25e+13  5.98e+27
         P4  8.21e+15  5.84e+26  1.14e+27  3.74e+22  5.16e+20         1  5.74e+29  6.44e+33  3.08e+48
         P5  1.43e-14   0.00102   0.00199  6.51e-08  8.98e-10  1.74e-30         1  1.12e+04  5.37e+18
         P6  1.28e-18  9.07e-08  1.77e-07  5.81e-12  8.01e-14  1.55e-34  8.92e-05         1  4.79e+14
         P7  2.66e-33  1.89e-22   3.7e-22  1.21e-26  1.67e-28  3.24e-49  1.86e-19  2.09e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.51066, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         3.15881e+08
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.351211, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.47732, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16720.9      2914.96       767.37      942.155      104.702      11922.7      1252.81      4.06174
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.990546, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002727, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.02868, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.05618e-06  1.05618e-06  3.38632e-07
      low eigenvalue method done, cpu time[sec] = 1.02981, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.06e-06  3.39e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.73e-08  3.39e-07         1
         *Z       ---       ---  1.46e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.38632e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.50104e-30  1.70067e-30  4.96789e-32  4.10626e-31   1.1173e-32  4.36042e-33  1.49066e-38  3.88677e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.48414, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         9.47643e+08
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.352171, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.52062, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5573.63      971.653       255.79      314.052      34.9008      3974.22      417.605      1.35391
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.886496, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00275, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.924527, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.18781e-07  5.18781e-07  1.41057e-07
      low eigenvalue method done, cpu time[sec] = 0.925624, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.19e-07  1.41e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.71e-08  1.41e-07         1
         *Z       ---       ---  1.46e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.41057e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.02159e-30  6.17237e-31  1.70955e-32  1.18336e-31  3.47171e-33  3.81076e-33  1.50262e-38  3.88718e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.42284, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         1.57941e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.351952, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.49787, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3344.18      582.992      153.474      188.431      20.9405      2384.53      250.563     0.812349
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.909874, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002752, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.947955, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.63057e-07  3.63057e-07  8.77888e-08
      low eigenvalue method done, cpu time[sec] = 0.94908, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.63e-07  8.78e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.27e-08  8.78e-08         1
         *Z       ---       ---  1.46e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.77888e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.29441e-30  3.57606e-31  9.95305e-33  6.39365e-32  1.94158e-33   3.2737e-33  1.51523e-38   3.8878e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.42719, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         2.21117e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.35233, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.51368, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2388.7      416.423      109.624      134.594      14.9575      1703.24      178.973     0.580249
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.896292, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002754, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.934364, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.84017e-07  2.84017e-07  6.26655e-08
      low eigenvalue method done, cpu time[sec] = 0.935511, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.84e-07  6.27e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.55e-08  6.27e-08         1
         *Z       ---       ---  1.46e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.26655e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.39436e-31  2.43317e-31  6.84346e-33  4.19593e-32  1.30299e-33   2.8538e-33  1.52818e-38  3.88791e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.4308, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         2.84293e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.352132, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.53578, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1857.88      323.884      85.2633      104.684      11.6336      1324.74      139.202     0.451305
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.869164, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002739, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.907041, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.35125e-07  2.35125e-07  4.80805e-08
      low eigenvalue method done, cpu time[sec] = 0.908153, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.35e-07  4.81e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.1e-08  4.81e-08         1
         *Z       ---       ---  1.46e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.80804e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.29009e-31  1.80126e-31  5.12148e-33  3.03678e-32  9.58663e-34  2.52411e-33  1.54121e-38  3.88752e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.42468, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         3.15881e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.352551, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.52725, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1672.09      291.496       76.737      94.2155      10.4702      1192.27      125.281     0.406174
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.877528, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002754, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.915642, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.16915e-07  2.16915e-07  4.28808e-08
      low eigenvalue method done, cpu time[sec] = 0.916727, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.17e-07  4.29e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.94e-08  4.29e-08         1
         *Z       ---       ---  1.46e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.28808e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.53101e-31  1.58267e-31  4.52349e-33  2.64573e-32  8.40929e-34  2.38496e-33  1.54767e-38  3.88784e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.422, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         4.73822e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.353675, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.50288, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1114.73      194.331       51.158      62.8104      6.98016      794.844       83.521     0.270783
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.902452, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002745, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.940364, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.57842e-07  1.57842e-07  2.70895e-08
      low eigenvalue method done, cpu time[sec] = 0.941483, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.58e-07  2.71e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.4e-08  2.71e-08         1
         *Z       ---       ---  1.46e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.70895e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.19218e-31  9.44753e-32  2.76341e-33  1.53625e-32  5.01033e-34   1.8622e-33  1.57872e-38  3.88808e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.42292, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         6.31762e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.3507, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.52679, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            836.044      145.748      38.3685      47.1078      5.23512      596.133      62.6407     0.203087
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.881356, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002738, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.919499, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.2506e-07   1.2506e-07  1.92019e-08
      low eigenvalue method done, cpu time[sec] = 0.920598, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.25e-07  1.92e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.1e-08  1.92e-08         1
         *Z       ---       ---  1.46e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.92019e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.00157e-31  6.43969e-32  1.91935e-33  1.03115e-32   3.4233e-34  1.51886e-33  1.60627e-38  3.88824e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.42593, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         7.89703e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.352711, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.54191, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            668.835      116.598      30.6948      37.6862       4.1881      476.906      50.1126      0.16247
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.864944, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002705, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.902585, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.03983e-07  1.03983e-07  1.45497e-08
      low eigenvalue method done, cpu time[sec] = 0.903716, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-07  1.45e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.15e-09  1.45e-08         1
         *Z       ---       ---  1.46e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.45497e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.2906e-31  4.73743e-32  1.43418e-33  7.51145e-33  2.52746e-34    1.276e-33  1.62941e-38  3.88841e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.42357, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         9.47643e+09
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.353102, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.53055, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            557.363      97.1653       25.579      31.4052      3.49008      397.422      41.7605     0.135391
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.874856, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002707, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.912762, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.92051e-08  8.92052e-08  1.15198e-08
      low eigenvalue method done, cpu time[sec] = 0.913882, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.92e-08  1.15e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.83e-09  1.15e-08         1
         *Z       ---       ---  1.46e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.15198e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.8234e-31  3.66363e-32  1.12389e-33  5.76935e-33  1.96224e-34   1.0952e-33  1.64787e-38  3.88867e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.4233, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         1.10558e+10
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.352919, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.54794, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            477.739      83.2845      21.9249      26.9187       2.9915      340.647      35.7947      0.11605
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.855249, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002707, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.893251, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.82296e-08  7.82296e-08  9.41077e-09
      low eigenvalue method done, cpu time[sec] = 0.894378, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.82e-08  9.41e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.85e-09  9.41e-09         1
         *Z       ---       ---  1.46e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.41077e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.49596e-31  2.93533e-32  9.10851e-34  4.59939e-33   1.5783e-34   9.5548e-34   1.6618e-38  3.88885e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.42399, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 540 K
            Well    Collision, 1/sec
              W1         1.26352e+10
      global relaxation matrix dimension = 413
      setting global matrices ... done, cpu time[sec] = 0.350663, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.52704, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            418.022      72.8739      19.1842      23.5539      2.61756      298.067      31.3204     0.101544
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.874068, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002728, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.911585, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.97358e-08  6.97358e-08  7.87075e-09
      low eigenvalue method done, cpu time[sec] = 0.912731, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.97e-08  7.87e-09         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.1e-09  7.87e-09         1
         *Z       ---       ---  1.46e+29
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.87075e-09
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.25554e-31  2.41494e-32   7.5696e-34  3.76962e-33  1.30339e-34  8.44393e-34   1.6715e-38  3.88911e-54

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.41695, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 550 K
      Energy reference = 32067 1/cm
      Energy step      = 92 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007029
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.424261
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.233617
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.232216
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.19179
         W1 Well: minimal relaxation eigenvalue = 0.0800727
         W1 Well: maximal relaxation eigenvalue = 0.986319
         W1 Well:       grid size = 407
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5376 1/cm
         B1 Barrier:        grid size = 349
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -40 1/cm
         B2 Barrier:        grid size = 347
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 142 1/cm
         B3 Barrier:        grid size = 399
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4640 1/cm
         B4 Barrier:        grid size = 416
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6205 1/cm
         B5 Barrier: nonpositive number of states at -23133 1/cm => truncating
         B5 Barrier:        grid size = 600
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23132 1/cm
         B6 Barrier:        grid size = 333
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1430 1/cm
         B7 Barrier:        grid size = 298
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4650 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16703 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.4555, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 407
      MasterEquation::Barrier::truncate: real weight = 3.67994e+42
      MasterEquation::Barrier::truncate: effective weight = 1.54257e+39
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 407
      MasterEquation::Barrier::truncate: real weight = 1.192e+41
      MasterEquation::Barrier::truncate: effective weight = 4.87708e+37
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5376  -5376  2.3e+09 1.12e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -40 2.02e+15
         B2    143 3.55e+14
         B3  -4640  9.4e+13
         B4  -5376 1.15e+14
         B5  -5376 1.28e+13
         B6   1431 1.45e+15
         B7   4651 1.54e+14
         B8  16703 5.22e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.39e-09  4.63e-09  1.92e-13  2.86e-15  1.35e-35  2.19e-06    0.0212  5.73e+12
          R  4.19e+08         1      1.94  8.03e-05   1.2e-06  5.63e-27       919   8.9e+06   2.4e+21
         P1  2.16e+08     0.516         1  4.14e-05  6.18e-07  2.91e-27       474  4.59e+06  1.24e+21
         P2  5.22e+12  1.25e+04  2.42e+04         1    0.0149  7.02e-23  1.15e+07  1.11e+11  2.99e+25
         P3  3.49e+14  8.34e+05  1.62e+06      66.9         1   4.7e-21  7.67e+08  7.42e+12     2e+27
         P4  7.43e+34  1.78e+26  3.44e+26  1.42e+22  2.13e+20         1  1.63e+29  1.58e+33  4.26e+47
         P5  4.56e+05   0.00109   0.00211  8.73e-08   1.3e-09  6.13e-30         1  9.68e+03  2.61e+18
         P6      47.1  1.12e-07  2.18e-07  9.02e-12  1.35e-13  6.33e-34  0.000103         1   2.7e+14
         P7  1.75e-13  4.17e-22  8.08e-22  3.34e-26     5e-28  2.35e-48  3.83e-19  3.71e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.49e+10  2.88e+10  1.19e+06  1.78e+04  8.38e-17  1.37e+13  1.32e+17  3.57e+31
          R  6.73e-11         1      1.94  8.03e-05   1.2e-06  5.63e-27       919   8.9e+06   2.4e+21
         P1  3.47e-11     0.516         1  4.14e-05  6.18e-07  2.91e-27       474  4.59e+06  1.24e+21
         P2  8.38e-07  1.25e+04  2.42e+04         1    0.0149  7.02e-23  1.15e+07  1.11e+11  2.99e+25
         P3  5.61e-05  8.34e+05  1.62e+06      66.9         1   4.7e-21  7.67e+08  7.42e+12     2e+27
         P4  1.19e+16  1.78e+26  3.44e+26  1.42e+22  2.13e+20         1  1.63e+29  1.58e+33  4.26e+47
         P5  7.32e-14   0.00109   0.00211  8.73e-08   1.3e-09  6.13e-30         1  9.68e+03  2.61e+18
         P6  7.56e-18  1.12e-07  2.18e-07  9.02e-12  1.35e-13  6.33e-34  0.000103         1   2.7e+14
         P7   2.8e-32  4.17e-22  8.08e-22  3.34e-26     5e-28  2.35e-48  3.83e-19  3.71e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.46978, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         3.12093e+08
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342201, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.32039, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17375.4       3058.3      808.439       990.48       110.38      12506.4      1327.67      4.49192
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.08234, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002619, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11948, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.40129e-06  1.40129e-06  4.65845e-07
      low eigenvalue method done, cpu time[sec] = 1.12099, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-06  4.66e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.29e-07  4.66e-07         1
         *Z       ---       ---  8.51e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.65845e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.12099e-29  7.94409e-30  2.31234e-31  1.89696e-30  5.17687e-32  2.16403e-32  8.71224e-38  4.07435e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.39266, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         9.36278e+08
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342476, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.30778, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             5791.8      1019.43       269.48       330.16      36.7934      4168.79      442.557      1.49731
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04664, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002612, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08365, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.97454e-07  6.97454e-07  1.96853e-07
      low eigenvalue method done, cpu time[sec] = 1.08479, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.97e-07  1.97e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.33e-08  1.97e-07         1
         *Z       ---       ---  8.51e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.96853e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   9.6598e-30  2.91894e-30   8.0836e-32  5.55067e-31  1.63434e-32  1.89914e-32  8.78213e-38  4.07306e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.34483, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         1.56046e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.341467, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.331, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3475.08      611.661      161.688      198.096      22.0761      2501.28      265.534     0.898384
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02288, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002604, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05929, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.90835e-07  4.90836e-07  1.23435e-07
      low eigenvalue method done, cpu time[sec] = 1.06039, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.91e-07  1.23e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.42e-08  1.23e-07         1
         *Z       ---       ---  8.51e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.23435e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.23068e-30  1.70236e-30   4.7443e-32  3.02212e-31   9.2139e-33  1.63816e-32  8.85567e-38  4.07275e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.34218, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         2.18465e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.343764, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.32831, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2482.2      436.901      115.491      141.497      15.7686      1786.63      189.667     0.641703
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01762, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00261, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05473, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.85322e-07  3.85323e-07  8.85699e-08
      low eigenvalue method done, cpu time[sec] = 1.05583, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.85e-07  8.86e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.45e-08  8.86e-08         1
         *Z       ---       ---  8.51e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.85699e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.54516e-30  1.16367e-30   3.2802e-32  1.99378e-31  6.21764e-33  1.43298e-32  8.93107e-38  4.07318e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.33236, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         2.80883e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.34291, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.32862, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1930.6      339.812      89.8265      110.053      12.2645       1389.6      147.519     0.499102
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01823, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002618, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05473, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.19793e-07  3.19793e-07  6.82291e-08
      low eigenvalue method done, cpu time[sec] = 1.05595, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.2e-07  6.82e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.85e-08  6.82e-08         1
         *Z       ---       ---  8.51e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.82291e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.54104e-30  8.64558e-31   2.4653e-32  1.44881e-31  4.59396e-33  1.27119e-32  9.00679e-38  4.07324e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.33383, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         3.12093e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.343393, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.32549, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1737.54       305.83      80.8439       99.048       11.038      1250.64      132.767     0.449192
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02338, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002604, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0602, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.95328e-07  2.95328e-07  6.09548e-08
      low eigenvalue method done, cpu time[sec] = 1.06134, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.95e-07   6.1e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.63e-08   6.1e-08         1
         *Z       ---       ---  8.51e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.09548e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.17769e-30  7.60805e-31   2.1814e-32  1.26441e-31  4.03703e-33  1.20271e-32  9.04435e-38  4.07341e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.13661, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         4.68139e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.200235, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.31473, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1158.36      203.887      53.8959       66.032      7.35869      833.759      88.5115     0.299461
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02732, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002599, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0637, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.15716e-07  2.15716e-07  3.87681e-08
      low eigenvalue method done, cpu time[sec] = 1.06507, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.16e-07  3.88e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.91e-08  3.88e-08         1
         *Z       ---       ---  8.51e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.87681e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.05334e-30  4.56907e-31  1.34215e-32  7.39125e-32  2.42233e-33  9.44338e-33  9.22424e-38   4.0735e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18413, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         6.24185e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342275, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.33414, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             868.77      152.915      40.4219       49.524      5.51902      625.319      66.3836     0.224596
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01291, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002611, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04927, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.71346e-07  1.71346e-07  2.76153e-08
      low eigenvalue method done, cpu time[sec] = 1.04983, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.71e-07  2.76e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.51e-08  2.76e-08         1
         *Z       ---       ---  8.51e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.76153e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.47733e-30  3.12815e-31  9.37034e-33  4.98523e-32  1.66353e-33  7.73593e-33  9.38357e-38   4.0737e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.32964, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         7.80231e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.34219, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.35103, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            695.016      122.332      32.3376      39.6192      4.41521      500.255      53.1069     0.179677
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.00916, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00261, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04625, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.42734e-07  1.42734e-07  2.10058e-08
      low eigenvalue method done, cpu time[sec] = 1.04738, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.43e-07   2.1e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.25e-08   2.1e-08         1
         *Z       ---       ---  8.51e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.10058e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.13172e-30  2.30925e-31  7.03022e-33  3.64532e-32  1.23314e-33  6.52233e-33   9.5172e-38  4.07389e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.34825, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         9.36278e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342148, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.36571, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             579.18      101.943       26.948       33.016      3.67934      416.879      44.2557     0.149731
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.987314, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00259, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.02411, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.22627e-07  1.22627e-07  1.66844e-08
      low eigenvalue method done, cpu time[sec] = 1.02518, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.23e-07  1.67e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.07e-08  1.67e-08         1
         *Z       ---       ---  8.51e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.66844e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.03727e-31  1.79093e-31  5.52767e-33  2.80861e-32  9.60534e-34  5.61523e-33  9.62387e-38  4.07412e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.33717, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         1.09232e+10
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342782, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.3394, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             496.44      87.3801      23.0983      28.2994      3.15372      357.325      37.9335     0.128341
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.0106, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002607, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04727, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.07667e-07  1.07667e-07  1.36667e-08
      low eigenvalue method done, cpu time[sec] = 1.0484, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.08e-07  1.37e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.41e-09  1.37e-08         1
         *Z       ---       ---  8.51e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.36667e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.43427e-31  1.43839e-31  4.49262e-33  2.24498e-32  7.74759e-34  4.91187e-33  9.70444e-38  4.07432e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.33639, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 550 K
            Well    Collision, 1/sec
              W1         1.24837e+10
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342562, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.3412, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            434.385      76.4576       20.211       24.762      2.75951       312.66      33.1918     0.112298
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.00338, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002619, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04038, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.60712e-08  9.60712e-08  1.14571e-08
      low eigenvalue method done, cpu time[sec] = 1.04147, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.61e-08  1.15e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.38e-09  1.15e-08         1
         *Z       ---       ---  8.51e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.14571e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.25405e-31  1.18588e-31   3.7428e-33  1.84417e-32  6.41362e-34  4.35099e-33   9.7608e-38  4.07454e-53

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.33144, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 560 K
      Energy reference = 32345 1/cm
      Energy step      = 93 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -87 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006904
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.420359
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.23312
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.227418
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.18935
         W1 Well: minimal relaxation eigenvalue = 0.079553
         W1 Well: maximal relaxation eigenvalue = 0.988151
         W1 Well:       grid size = 407
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5505 1/cm
         B1 Barrier:        grid size = 348
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -19 1/cm
         B2 Barrier:        grid size = 346
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 167 1/cm
         B3 Barrier:        grid size = 398
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4669 1/cm
         B4 Barrier:        grid size = 415
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6249 1/cm
         B5 Barrier: nonpositive number of states at -23269 1/cm => truncating
         B5 Barrier:        grid size = 598
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23268 1/cm
         B6 Barrier:        grid size = 332
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1469 1/cm
         B7 Barrier:        grid size = 298
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4631 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16721 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.43954, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 407
      MasterEquation::Barrier::truncate: real weight = 1.64251e+42
      MasterEquation::Barrier::truncate: effective weight = 6.95995e+38
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 407
      MasterEquation::Barrier::truncate: real weight = 5.16858e+40
      MasterEquation::Barrier::truncate: effective weight = 2.15412e+37
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5505  -5505  2.2e+09 1.17e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -19 2.17e+15
         B2    168 3.85e+14
         B3  -4669 1.02e+14
         B4  -5505 1.25e+14
         B5  -5505  1.4e+13
         B6   1470 1.57e+15
         B7   4631 1.69e+14
         B8  16721 5.96e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   2.3e-09  4.42e-09  2.29e-13   3.7e-15  4.08e-35  1.98e-06    0.0166  2.58e+12
          R  4.35e+08         1      1.92  9.98e-05  1.61e-06  1.78e-26       861  7.23e+06  1.12e+21
         P1  2.26e+08      0.52         1  5.19e-05  8.36e-07  9.23e-27       447  3.76e+06  5.83e+20
         P2  4.36e+12     1e+04  1.93e+04         1    0.0161  1.78e-22  8.62e+06  7.25e+10  1.12e+25
         P3   2.7e+14  6.21e+05   1.2e+06        62         1   1.1e-20  5.35e+08  4.49e+12  6.97e+26
         P4  2.45e+34  5.63e+25  1.08e+26  5.62e+21  9.06e+19         1  4.85e+28  4.07e+32  6.32e+46
         P5  5.06e+05   0.00116   0.00224  1.16e-07  1.87e-09  2.06e-29         1  8.41e+03   1.3e+18
         P6      60.2  1.38e-07  2.66e-07  1.38e-11  2.23e-13  2.46e-33  0.000119         1  1.55e+14
         P7  3.88e-13  8.91e-22  1.71e-21  8.89e-26  1.43e-27  1.58e-47  7.67e-19  6.44e-15         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.29e+09  6.33e+09  3.28e+05  5.29e+03  5.84e-17  2.83e+12  2.38e+16  3.69e+30
          R  3.04e-10         1      1.92  9.98e-05  1.61e-06  1.78e-26       861  7.23e+06  1.12e+21
         P1  1.58e-10      0.52         1  5.19e-05  8.36e-07  9.23e-27       447  3.76e+06  5.83e+20
         P2  3.05e-06     1e+04  1.93e+04         1    0.0161  1.78e-22  8.62e+06  7.25e+10  1.12e+25
         P3  0.000189  6.21e+05   1.2e+06        62         1   1.1e-20  5.35e+08  4.49e+12  6.97e+26
         P4  1.71e+16  5.63e+25  1.08e+26  5.62e+21  9.06e+19         1  4.85e+28  4.07e+32  6.32e+46
         P5  3.53e-13   0.00116   0.00224  1.16e-07  1.87e-09  2.06e-29         1  8.41e+03   1.3e+18
         P6   4.2e-17  1.38e-07  2.66e-07  1.38e-11  2.23e-13  2.46e-33  0.000119         1  1.55e+14
         P7  2.71e-31  8.91e-22  1.71e-21  8.89e-26  1.43e-27  1.58e-47  7.67e-19  6.44e-15         1
   MasterEquation::set:  done, cpu time[sec] = 2.45315, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         3.08421e+08
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342986, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.33096, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18045.7      3206.82      851.153      1040.64       116.29      13109.9      1405.87      4.95965
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.09046, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002656, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.10097, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.37579e-06  1.37579e-06  4.69738e-07
      low eigenvalue method done, cpu time[sec] = 1.10209, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.38e-06   4.7e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.26e-07   4.7e-07         1
         *Z       ---       ---  5.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.69738e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.44441e-29   3.5045e-29  1.01738e-30  8.28527e-30  2.26772e-31  1.00699e-31  4.76266e-37  3.92657e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.41071, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         9.25262e+08
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342008, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.36034, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6015.22      1068.94      283.718      346.879      38.7632      4369.97      468.625      1.65322
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.05545, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002624, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06546, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.9298e-07   6.9298e-07  2.01303e-07
      low eigenvalue method done, cpu time[sec] = 1.06657, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.93e-07  2.01e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.24e-08  2.01e-07         1
         *Z       ---       ---  5.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.01303e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.35989e-29  1.30363e-29  3.61176e-31  2.46068e-30  7.27106e-32   8.8978e-32  4.80067e-37  3.92286e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.37618, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1          1.5421e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.343485, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.33592, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3609.13      641.364      170.231      208.127      23.2579      2621.98      281.175      0.99193
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07658, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002628, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.08657, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.90146e-07  4.90146e-07  1.27151e-07
      low eigenvalue method done, cpu time[sec] = 1.08805, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.9e-07  1.27e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.38e-08  1.27e-07         1
         *Z       ---       ---  5.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.27151e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.83229e-29  7.65272e-30  2.13648e-31  1.34983e-30  4.13148e-32  7.71363e-32  4.84062e-37  3.92311e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.37761, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         2.15894e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.341434, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.37009, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2577.95      458.117      121.593      148.662      16.6128      1872.84      200.839     0.708521
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04003, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002633, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05013, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.85991e-07  3.85991e-07  9.17011e-08
      low eigenvalue method done, cpu time[sec] = 1.05126, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.86e-07  9.17e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.43e-08  9.17e-08         1
         *Z       ---       ---  5.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.17011e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.0764e-29  5.25508e-30  1.48517e-31  8.95125e-31  2.80304e-32  6.77389e-32  4.88152e-37  3.92354e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.36985, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         2.77579e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342887, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.37126, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2005.07      356.314      94.5725      115.626      12.9211      1456.66      156.208     0.551072
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04284, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00264, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05296, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.21069e-07  3.21069e-07  7.09186e-08
      low eigenvalue method done, cpu time[sec] = 1.05406, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.21e-07  7.09e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.85e-08  7.09e-08         1
         *Z       ---       ---  5.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.09186e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.62392e-29  3.91811e-30  1.12087e-31  6.53031e-31  2.07964e-32  6.02836e-32  4.92254e-37  3.92355e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.37585, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         3.08421e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342562, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.36661, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1804.57      320.682      85.1153      104.064       11.629      1310.99      140.587     0.495965
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.04933, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002636, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.05949, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.96779e-07  2.96779e-07  6.34636e-08
      low eigenvalue method done, cpu time[sec] = 1.06058, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.97e-07  6.35e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.63e-08  6.35e-08         1
         *Z       ---       ---  5.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.34636e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.45968e-29  3.45313e-30  9.93555e-32  5.70873e-31  1.83075e-32  5.71167e-32  4.94288e-37  3.92371e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.37841, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         4.62631e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342324, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.38512, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1203.04      213.788      56.7435      69.3758      7.75264      873.994       93.725     0.330643
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02324, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002651, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0333, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.17513e-07  2.17513e-07  4.06306e-08
      low eigenvalue method done, cpu time[sec] = 1.03476, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.18e-07  4.06e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.91e-08  4.06e-08         1
         *Z       ---       ---  5.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.06306e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.49347e-30  2.08619e-30   6.1558e-32  3.35912e-31  1.10612e-32  4.51081e-32  5.04018e-37  3.92382e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.37519, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         6.16841e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.341674, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.38418, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            902.283      160.341      42.5576      52.0318      5.81448      655.496      70.2937     0.247983
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.03541, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002647, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.04545, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.73165e-07  1.73165e-07  2.90813e-08
      low eigenvalue method done, cpu time[sec] = 1.04657, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.73e-07  2.91e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.52e-08  2.91e-08         1
         *Z       ---       ---  5.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.90813e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.86274e-30   1.4345e-30  4.31955e-32  2.27646e-31  7.63441e-33   3.7117e-32  5.12632e-37  3.92403e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.37698, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         7.71052e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.341789, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.42709, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            721.826      128.273      34.0461      41.6255      4.65158      524.396       56.235     0.198386
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.00686, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002628, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01699, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.44489e-07  1.44489e-07  2.22047e-08
      low eigenvalue method done, cpu time[sec] = 1.01813, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.44e-07  2.22e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.26e-08  2.22e-08         1
         *Z       ---       ---  5.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.22047e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.27692e-30  1.06259e-30  3.25374e-32  1.67083e-31  5.68156e-33  3.14077e-32  5.19863e-37  3.92419e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.3962, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         9.25262e+09
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342156, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.38621, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            601.522      106.894      28.3718      34.6879      3.87632      436.997      46.8625     0.165322
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02504, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002625, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03499, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.24296e-07  1.24296e-07  1.76918e-08
      low eigenvalue method done, cpu time[sec] = 1.03617, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.24e-07  1.77e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.08e-08  1.77e-08         1
         *Z       ---       ---  5.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.76918e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.22688e-30  8.26418e-31  2.56674e-32  1.29128e-31  4.43992e-33  2.71225e-32  5.25649e-37  3.92437e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.3723, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         1.07947e+10
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342944, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.38383, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             515.59      91.6235      24.3186      29.7325      3.32256      374.569      40.1678     0.141704
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02627, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002639, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03626, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.09247e-07  1.09247e-07  1.45304e-08
      low eigenvalue method done, cpu time[sec] = 1.03736, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.09e-07  1.45e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.48e-09  1.45e-08         1
         *Z       ---       ---  5.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.45304e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.48627e-30   6.6533e-31  2.09195e-32  1.03484e-31  3.59108e-33  2.37881e-32  5.30039e-37  3.92461e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.37196, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 560 K
            Well    Collision, 1/sec
              W1         1.23368e+10
      global relaxation matrix dimension = 407
      setting global matrices ... done, cpu time[sec] = 0.342739, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.39206, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            451.141      80.1705      21.2788      26.0159      2.90724      327.748      35.1469     0.123991
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02254, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002625, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03252, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.75669e-08  9.75669e-08  1.22093e-08
      low eigenvalue method done, cpu time[sec] = 1.03364, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.76e-08  1.22e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.45e-09  1.22e-08         1
         *Z       ---       ---  5.89e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.22093e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.93952e-30   5.4967e-31  1.74704e-32  8.52006e-32  2.97989e-33  2.11211e-32  5.33134e-37  3.92476e-52

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.37711, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 570 K
      Energy reference = 32624 1/cm
      Energy step      = 95 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006872
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.415116
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.228321
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.22817
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.1637
         W1 Well: minimal relaxation eigenvalue = 0.0790417
         W1 Well: maximal relaxation eigenvalue = 0.987273
         W1 Well:       grid size = 402
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5566 1/cm
         B1 Barrier:        grid size = 344
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -56 1/cm
         B2 Barrier:        grid size = 342
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 133 1/cm
         B3 Barrier:        grid size = 392
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4616 1/cm
         B4 Barrier:        grid size = 409
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6231 1/cm
         B5 Barrier: nonpositive number of states at -23237 1/cm => truncating
         B5 Barrier:        grid size = 588
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23237 1/cm
         B6 Barrier:        grid size = 328
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1463 1/cm
         B7 Barrier:        grid size = 294
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4693 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16758 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.39678, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 402
      MasterEquation::Barrier::truncate: real weight = 7.5568e+41
      MasterEquation::Barrier::truncate: effective weight = 3.27097e+38
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 402
      MasterEquation::Barrier::truncate: real weight = 2.32415e+40
      MasterEquation::Barrier::truncate: effective weight = 9.94024e+36
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5566  -5566 2.16e+09 1.22e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -56 2.33e+15
         B2    134 4.17e+14
         B3  -4616 1.11e+14
         B4  -5566 1.36e+14
         B5  -5566 1.52e+13
         B6   1464 1.71e+15
         B7   4694 1.85e+14
         B8  16759 6.79e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.88e-09  3.59e-09  2.32e-13  4.02e-15  1.01e-34  1.52e-06    0.0111  1.01e+12
          R  5.32e+08         1      1.91  0.000123  2.14e-06  5.38e-26       807  5.92e+06  5.39e+20
         P1  2.78e+08     0.523         1  6.45e-05  1.12e-06  2.81e-26       423   3.1e+06  2.82e+20
         P2  4.32e+12  8.12e+03  1.55e+04         1    0.0174  4.37e-22  6.56e+06  4.81e+10  4.38e+24
         P3  2.49e+14  4.68e+05  8.93e+05      57.6         1  2.51e-20  3.78e+08  2.77e+12  2.52e+26
         P4  9.89e+33  1.86e+25  3.55e+25  2.29e+21  3.98e+19         1   1.5e+28   1.1e+32     1e+46
         P5  6.59e+05   0.00124   0.00237  1.53e-07  2.65e-09  6.66e-29         1  7.34e+03  6.68e+17
         P6      89.8  1.69e-07  3.23e-07  2.08e-11  3.61e-13  9.08e-33  0.000136         1   9.1e+13
         P7  9.86e-13  1.85e-21  3.54e-21  2.28e-25  3.97e-27  9.97e-47   1.5e-18   1.1e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.66e+08  1.46e+09  9.44e+04  1.64e+03  4.12e-17  6.19e+11  4.54e+15  4.13e+29
          R   1.3e-09         1      1.91  0.000123  2.14e-06  5.38e-26       807  5.92e+06  5.39e+20
         P1  6.83e-10     0.523         1  6.45e-05  1.12e-06  2.81e-26       423   3.1e+06  2.82e+20
         P2  1.06e-05  8.12e+03  1.55e+04         1    0.0174  4.37e-22  6.56e+06  4.81e+10  4.38e+24
         P3   0.00061  4.68e+05  8.93e+05      57.6         1  2.51e-20  3.78e+08  2.77e+12  2.52e+26
         P4  2.43e+16  1.86e+25  3.55e+25  2.29e+21  3.98e+19         1   1.5e+28   1.1e+32     1e+46
         P5  1.62e-12   0.00124   0.00237  1.53e-07  2.65e-09  6.66e-29         1  7.34e+03  6.68e+17
         P6   2.2e-16  1.69e-07  3.23e-07  2.08e-11  3.61e-13  9.08e-33  0.000136         1   9.1e+13
         P7  2.42e-30  1.85e-21  3.54e-21  2.28e-25  3.97e-27  9.97e-47   1.5e-18   1.1e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.41036, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1          3.0486e+08
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.334462, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.08996, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18731.7      3360.57      895.555      1092.67      122.437      13733.6      1487.52      5.46711
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26104, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002547, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.29709, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.56994e-06  1.56994e-06  5.51463e-07
      low eigenvalue method done, cpu time[sec] = 1.29858, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.57e-06  5.51e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.43e-07  5.51e-07         1
         *Z       ---       ---  3.81e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.51463e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.98792e-28  1.46664e-28  4.24673e-30  3.43415e-29  9.42602e-31  4.45805e-31  2.44763e-36  3.49039e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.31647, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         9.14579e+08
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.333177, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.10061, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6243.89      1120.19      298.518      364.224      40.8123      4577.88      495.841      1.82237
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.19929, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002534, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.23531, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.00228e-07  8.00228e-07   2.3956e-07
      low eigenvalue method done, cpu time[sec] = 1.23642, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     8e-07   2.4e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.18e-08   2.4e-07         1
         *Z       ---       ---  3.81e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.3956e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.86528e-28  5.52086e-29  1.53031e-30  1.03475e-29  3.06812e-31  3.95713e-31    2.467e-36  3.48954e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26116, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1          1.5243e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.335599, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.11123, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3746.33      672.113      179.111      218.534      24.4874      2746.73      297.505      1.09342
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.18902, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002536, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22486, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.68884e-07  5.68884e-07  1.52397e-07
      low eigenvalue method done, cpu time[sec] = 1.22596, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.69e-07  1.52e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.07e-08  1.52e-07         1
         *Z       ---       ---  3.81e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.52397e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.22018e-28  3.26161e-29  9.12189e-31  5.71793e-30  1.75672e-31  3.44449e-31  2.48734e-36  3.48972e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26491, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         2.13402e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.334787, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.08509, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2675.95      480.081      127.936      156.096       17.491      1961.95      212.503     0.781016
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.22011, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002533, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.25644, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.49431e-07  4.49431e-07  1.10454e-07
      low eigenvalue method done, cpu time[sec] = 1.25758, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.49e-07   1.1e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.98e-08   1.1e-07         1
         *Z       ---       ---  3.81e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.10454e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.98884e-29  2.24974e-29  6.37475e-31  3.81093e-30  1.19816e-31  3.03508e-31  2.50814e-36  3.48977e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26662, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         2.74374e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.333458, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.49022, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2081.3      373.396      99.5062      121.408      13.6041      1525.96       165.28     0.607457
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.814877, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002535, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.85051, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.74701e-07  3.74701e-07   8.5749e-08
      low eigenvalue method done, cpu time[sec] = 0.852142, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.75e-07  8.57e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.31e-08  8.57e-08         1
         *Z       ---       ---  3.81e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.5749e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.0565e-29  1.68318e-29  4.83071e-31    2.791e-30  8.92554e-32  2.70879e-31  2.52898e-36  3.48995e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.27282, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1          3.0486e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.335174, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.10134, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1873.17      336.057      89.5555      109.267      12.2437      1373.36      148.752     0.546711
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.20685, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00253, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.24242, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.46682e-07  3.46682e-07  7.68608e-08
      low eigenvalue method done, cpu time[sec] = 1.24299, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.47e-07  7.69e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.05e-08  7.69e-08         1
         *Z       ---       ---  3.81e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.68608e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.35305e-29  1.48563e-29  4.28945e-31  2.44389e-30   7.8709e-32  2.56979e-31  2.53931e-36   3.4899e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26849, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         4.57289e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.33587, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.15106, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1248.78      224.038      59.7037      72.8448      8.16245      915.575      99.1682     0.364474
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.15876, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002529, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19465, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.54979e-07  2.54979e-07  4.95263e-08
      low eigenvalue method done, cpu time[sec] = 1.19576, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.55e-07  4.95e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.23e-08  4.95e-08         1
         *Z       ---       ---  3.81e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.95263e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.15822e-29  9.02794e-30  2.67586e-31  1.44735e-30  4.78787e-32  2.04042e-31  2.58872e-36  3.49009e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.27524, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         6.09719e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.335029, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.11366, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            936.583      168.028      44.7778      54.6336      6.12184      686.681      74.3761     0.273355
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.187, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002529, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.2228, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.03471e-07  2.03471e-07  3.56159e-08
      low eigenvalue method done, cpu time[sec] = 1.22392, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.03e-07  3.56e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.77e-08  3.56e-08         1
         *Z       ---       ---  3.81e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.56159e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.01994e-29  6.23433e-30  1.88703e-31  9.85472e-31  3.32092e-32  1.68599e-31   2.6325e-36  3.49026e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26504, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         7.62149e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.335823, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.10747, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            749.267      134.423      35.8222      43.7069      4.89747      549.345      59.5009     0.218684
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.19451, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002537, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.2306, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.70073e-07  1.70073e-07  2.72953e-08
      low eigenvalue method done, cpu time[sec] = 1.23228, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.7e-07  2.73e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.48e-08  2.73e-08         1
         *Z       ---       ---  3.81e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.72953e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.33064e-29  4.63362e-30    1.427e-31  7.25964e-31  2.48104e-32  1.43157e-31  2.66933e-36  3.49043e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26948, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         9.14579e+09
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.335205, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.10428, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            624.389      112.019      29.8518      36.4224      4.08123      457.788      49.5841     0.182237
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.19646, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002525, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.23181, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.46504e-07  1.46504e-07  2.18146e-08
      low eigenvalue method done, cpu time[sec] = 1.23236, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.47e-07  2.18e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.27e-08  2.18e-08         1
         *Z       ---       ---  3.81e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.18146e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.87255e-29  3.61377e-30  1.12935e-31  5.62756e-31  1.94505e-32  1.23987e-31  2.69892e-36  3.49061e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26531, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         1.06701e+10
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.334644, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.13164, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             535.19      96.0162      25.5873      31.2192      3.49819      392.389      42.5007     0.156203
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17278, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002553, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.20897, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.2891e-07   1.2891e-07  1.79634e-08
      low eigenvalue method done, cpu time[sec] = 1.21011, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.29e-07   1.8e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.11e-08   1.8e-08         1
         *Z       ---       ---  3.81e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.79634e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.54844e-29  2.91626e-30  9.22983e-32  4.52156e-31  1.57747e-32  1.09021e-31  2.72151e-36  3.49078e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.2695, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 570 K
            Well    Collision, 1/sec
              W1         1.21944e+10
      global relaxation matrix dimension = 402
      setting global matrices ... done, cpu time[sec] = 0.335477, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.128, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            468.292      84.0142      22.3889      27.3168      3.06092      343.341      37.1881     0.136678
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17224, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002558, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.20847, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.15235e-07  1.15235e-07  1.51283e-08
      low eigenvalue method done, cpu time[sec] = 1.20959, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.15e-07  1.51e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.94e-09  1.51e-08         1
         *Z       ---       ---  3.81e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.51283e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.30854e-29  2.41426e-30  7.72652e-32  3.73103e-31  1.31208e-32  9.70169e-32   2.7376e-36  3.49095e-51

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26464, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 580 K
      Energy reference = 32901 1/cm
      Energy step      = 97 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007572
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.406566
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.224651
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.221518
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.11288
         W1 Well: minimal relaxation eigenvalue = 0.0785442
         W1 Well: maximal relaxation eigenvalue = 0.986427
         W1 Well:       grid size = 397
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5608 1/cm
         B1 Barrier:        grid size = 340
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -79 1/cm
         B2 Barrier:        grid size = 337
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 211 1/cm
         B3 Barrier:        grid size = 387
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4638 1/cm
         B4 Barrier:        grid size = 403
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6190 1/cm
         B5 Barrier: nonpositive number of states at -23165 1/cm => truncating
         B5 Barrier:        grid size = 578
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23165 1/cm
         B6 Barrier:        grid size = 324
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1472 1/cm
         B7 Barrier:        grid size = 291
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4673 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16701 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.3291, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 397
      MasterEquation::Barrier::truncate: real weight = 3.57803e+41
      MasterEquation::Barrier::truncate: effective weight = 1.58136e+38
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 397
      MasterEquation::Barrier::truncate: real weight = 1.08104e+40
      MasterEquation::Barrier::truncate: effective weight = 4.73577e+36
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5608  -5608 2.13e+09 1.28e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -79  2.5e+15
         B2    212 4.52e+14
         B3  -4638 1.21e+14
         B4  -5608 1.47e+14
         B5  -5608 1.65e+13
         B6   1473 1.85e+15
         B7   4674 2.02e+14
         B8  16702 7.72e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.48e-09  2.81e-09  2.23e-13  4.16e-15  2.32e-34  1.12e-06   0.00723  3.93e+11
          R  6.76e+08         1       1.9  0.000151  2.81e-06  1.57e-25       759  4.88e+06  2.66e+20
         P1  3.56e+08     0.527         1  7.95e-05  1.48e-06  8.26e-26       400  2.57e+06   1.4e+20
         P2  4.48e+12  6.63e+03  1.26e+04         1    0.0187  1.04e-21  5.03e+06  3.24e+10  1.76e+24
         P3   2.4e+14  3.55e+05  6.74e+05      53.6         1  5.57e-20   2.7e+08  1.74e+12  9.45e+25
         P4  4.31e+33  6.38e+24  1.21e+25  9.62e+20  1.79e+19         1  4.84e+27  3.11e+31   1.7e+45
         P5   8.9e+05   0.00132    0.0025  1.99e-07  3.71e-09  2.07e-28         1  6.43e+03   3.5e+17
         P6       138  2.05e-07  3.89e-07  3.09e-11  5.76e-13  3.21e-32  0.000155         1  5.44e+13
         P7  2.54e-12  3.76e-21  7.14e-21  5.68e-25  1.06e-26   5.9e-46  2.86e-18  1.84e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.88e+08  3.57e+08  2.83e+04       529  2.95e-17  1.43e+11  9.17e+14  4.99e+28
          R  5.32e-09         1       1.9  0.000151  2.81e-06  1.57e-25       759  4.88e+06  2.66e+20
         P1   2.8e-09     0.527         1  7.95e-05  1.48e-06  8.26e-26       400  2.57e+06   1.4e+20
         P2  3.53e-05  6.63e+03  1.26e+04         1    0.0187  1.04e-21  5.03e+06  3.24e+10  1.76e+24
         P3   0.00189  3.55e+05  6.74e+05      53.6         1  5.57e-20   2.7e+08  1.74e+12  9.45e+25
         P4   3.4e+16  6.38e+24  1.21e+25  9.62e+20  1.79e+19         1  4.84e+27  3.11e+31   1.7e+45
         P5  7.01e-12   0.00132    0.0025  1.99e-07  3.71e-09  2.07e-28         1  6.43e+03   3.5e+17
         P6  1.09e-15  2.05e-07  3.89e-07  3.09e-11  5.76e-13  3.21e-32  0.000155         1  5.44e+13
         P7     2e-29  3.76e-21  7.14e-21  5.68e-25  1.06e-26   5.9e-46  2.86e-18  1.84e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.34262, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         3.01404e+08
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.325804, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.92819, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19433.6      3519.71      941.692      1146.63      128.828      14377.9      1572.71      6.01601
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.39596, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002521, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.43132, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.86205e-06  1.86206e-06  6.72556e-07
      low eigenvalue method done, cpu time[sec] = 1.43246, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.86e-06  6.73e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.69e-07  6.73e-07         1
         *Z       ---       ---  2.45e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.72556e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.60057e-27  5.83261e-28  1.68552e-29  1.35366e-28  3.72584e-30  1.87076e-30  1.19173e-35  2.87621e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.26281, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         9.04211e+08
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.325788, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.95395, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6477.86      1173.24      313.897      382.211      42.9428      4792.63      524.238      2.00534
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.305, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002461, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.34049, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.60275e-07  9.60275e-07  2.96081e-07
      low eigenvalue method done, cpu time[sec] = 1.34166, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   9.6e-07  2.96e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.59e-08  2.96e-07         1
         *Z       ---       ---  2.45e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.96081e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   7.5828e-28  2.22161e-28  6.16322e-30  4.13677e-29  1.23074e-30  1.66897e-30  1.20112e-35  2.87726e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19746, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         1.50702e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.325629, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.96837, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3886.72      703.942      188.338      229.326      25.7657      2875.58      314.543       1.2032
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.2896, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002467, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.32488, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.86104e-07  6.86104e-07  1.89669e-07
      low eigenvalue method done, cpu time[sec] = 1.32601, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.86e-07   1.9e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.09e-08   1.9e-07         1
         *Z       ---       ---  2.45e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.89669e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.99404e-28  1.32075e-28  3.70142e-30  2.30242e-29   7.0999e-31   1.4589e-30  1.21097e-35  2.87696e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19913, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         2.10983e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.326416, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.97992, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2776.23      502.816      134.527      163.805       18.404      2053.98      224.673      0.85943
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.28056, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002459, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31536, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.43762e-07  5.43762e-07  1.38136e-07
      low eigenvalue method done, cpu time[sec] = 1.31648, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.44e-07  1.38e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.8e-08  1.38e-07         1
         *Z       ---       ---  2.45e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.38136e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.69651e-28  9.15015e-29  2.60015e-30  1.54214e-29  4.86754e-31  1.28991e-30  1.22102e-35  2.87703e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19737, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         2.71263e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.323779, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.97459, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2159.29      391.079      104.632      127.404      14.3143      1597.54      174.746     0.668446
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.29463, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002485, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.33009, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.54392e-07  4.54392e-07  1.07642e-07
      low eigenvalue method done, cpu time[sec] = 1.33121, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.54e-07  1.08e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     4e-08  1.08e-07         1
         *Z       ---       ---  2.45e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.07642e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.91254e-28  6.86923e-29  1.97824e-30  1.13371e-29  3.64044e-31  1.15455e-30  1.23109e-35  2.87709e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20655, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         3.01404e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.325614, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.97161, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1943.36      351.971      94.1692      114.663      12.8828      1437.79      157.271     0.601601
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.29818, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002467, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.33315, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.2081e-07   4.2081e-07  9.66396e-08
      low eigenvalue method done, cpu time[sec] = 1.33427, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.21e-07  9.66e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.7e-08  9.66e-08         1
         *Z       ---       ---  2.45e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.66396e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.62632e-28  6.07183e-29  1.75958e-30  9.94318e-30  3.21573e-31   1.0967e-30  1.23607e-35  2.87716e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20695, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         4.52106e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.323797, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.9786, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1295.57      234.647      62.7795      76.4421      8.58856      958.526      104.848     0.401067
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.28925, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00246, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.32412, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.1059e-07   3.1059e-07   6.2666e-08
      low eigenvalue method done, cpu time[sec] = 1.32557, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.11e-07  6.27e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.71e-08  6.27e-08         1
         *Z       ---       ---  2.45e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.2666e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.72971e-28  3.71109e-29  1.10505e-30  5.92619e-30  1.96919e-31  8.75441e-31  1.25989e-35  2.87728e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20297, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         6.02808e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.321594, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.98437, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             971.68      175.985      47.0846      57.3316      6.44142      718.894      78.6357     0.300801
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.28328, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00247, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31827, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.48436e-07  2.48436e-07  4.52737e-08
      low eigenvalue method done, cpu time[sec] = 1.3194, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.48e-07  4.53e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.16e-08  4.53e-08         1
         *Z       ---       ---  2.45e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.52737e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.26194e-28  2.57355e-29  7.83102e-31  4.05369e-30  1.37249e-31  7.26374e-31  1.28097e-35  2.87741e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20325, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1          7.5351e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.326621, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.9799, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            777.344      140.788      37.6677      45.8653      5.15313      575.115      62.9086      0.24064
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27297, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002483, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.3081, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.08024e-07  2.08024e-07  3.48237e-08
      low eigenvalue method done, cpu time[sec] = 1.30921, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.08e-07  3.48e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.8e-08  3.48e-08         1
         *Z       ---       ---  2.45e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.48237e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.77413e-29  1.91915e-29   5.9448e-31  2.99707e-30   1.0293e-31  6.18857e-31  1.29872e-35  2.87754e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19315, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         9.04211e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.325286, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.98057, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            647.786      117.324      31.3897      38.2211      4.29428      479.263      52.4238     0.200534
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27342, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002462, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.3084, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.79444e-07  1.79444e-07  2.79153e-08
      low eigenvalue method done, cpu time[sec] = 1.30951, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.79e-07  2.79e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.55e-08  2.79e-08         1
         *Z       ---       ---  2.45e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.79153e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.87639e-29  1.50087e-29  4.71979e-31  2.33024e-30  8.09479e-32  5.37532e-31  1.31301e-35  2.87769e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18215, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         1.05491e+10
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.318988, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.97264, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            555.246      100.563      26.9055      32.7609      3.68081      410.797      44.9347     0.171886
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27391, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002482, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30873, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.58073e-07  1.58073e-07  2.30463e-08
      low eigenvalue method done, cpu time[sec] = 1.31035, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.58e-07   2.3e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.36e-08   2.3e-08         1
         *Z       ---       ---  2.45e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.30463e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.52969e-29  1.21401e-29  3.86781e-31  1.87703e-30  6.58263e-32  4.73835e-31  1.32395e-35  2.87783e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18006, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 580 K
            Well    Collision, 1/sec
              W1         1.20562e+10
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.325863, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.99938, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             485.84      87.9927      23.5423      28.6658      3.22071      359.447      39.3179       0.1504
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27165, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00246, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.30627, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.41439e-07  1.41439e-07  1.94524e-08
      low eigenvalue method done, cpu time[sec] = 1.3074, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.41e-07  1.95e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.21e-08  1.95e-08         1
         *Z       ---       ---  2.45e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.94524e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.53025e-29  1.00708e-29  3.24548e-31  1.55228e-30  5.48798e-32  4.22597e-31   1.3318e-35  2.87797e-50

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20607, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 590 K
      Energy reference = 33179 1/cm
      Energy step      = 98 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.008204
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.408414
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.223277
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.225167
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.10184
         W1 Well: minimal relaxation eigenvalue = 0.0780485
         W1 Well: maximal relaxation eigenvalue = 0.988185
         W1 Well:       grid size = 397
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5727 1/cm
         B1 Barrier:        grid size = 339
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -43 1/cm
         B2 Barrier:        grid size = 337
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 152 1/cm
         B3 Barrier:        grid size = 386
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4649 1/cm
         B4 Barrier:        grid size = 402
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6217 1/cm
         B5 Barrier: nonpositive number of states at -23171 1/cm => truncating
         B5 Barrier:        grid size = 575
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23171 1/cm
         B6 Barrier:        grid size = 324
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1427 1/cm
         B7 Barrier:        grid size = 291
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4660 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16715 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.32465, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 397
      MasterEquation::Barrier::truncate: real weight = 1.74094e+41
      MasterEquation::Barrier::truncate: effective weight = 7.77366e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 397
      MasterEquation::Barrier::truncate: real weight = 5.18927e+39
      MasterEquation::Barrier::truncate: effective weight = 2.30318e+36
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5727  -5727 2.05e+09 1.34e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -43 2.67e+15
         B2    153 4.89e+14
         B3  -4649 1.31e+14
         B4  -5727  1.6e+14
         B5  -5727  1.8e+13
         B6   1428    2e+15
         B7   4661 2.21e+14
         B8  16715 8.77e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.4e-09  2.63e-09  2.56e-13  5.12e-15  6.16e-34  9.98e-07   0.00566  1.87e+11
          R  7.16e+08         1      1.89  0.000184  3.67e-06  4.41e-25       715  4.05e+06  1.34e+20
         P1   3.8e+08      0.53         1  9.73e-05  1.95e-06  2.34e-25       379  2.15e+06  7.12e+19
         P2   3.9e+12  5.45e+03  1.03e+04         1      0.02   2.4e-21  3.89e+06  2.21e+10  7.31e+23
         P3  1.95e+14  2.73e+05  5.14e+05        50         1   1.2e-19  1.95e+08   1.1e+12  3.66e+25
         P4  1.62e+33  2.27e+24  4.28e+24  4.16e+20  8.32e+18         1  1.62e+27  9.19e+30  3.04e+44
         P5     1e+06    0.0014   0.00264  2.57e-07  5.13e-09  6.17e-28         1  5.67e+03  1.88e+17
         P6       177  2.47e-07  4.65e-07  4.53e-11  9.05e-13  1.09e-31  0.000176         1  3.31e+13
         P7  5.33e-12  7.45e-21  1.41e-20  1.37e-24  2.73e-26  3.28e-45  5.33e-18  3.02e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.83e+07   9.1e+07  8.86e+03       177  2.13e-17  3.45e+10  1.96e+14  6.48e+27
          R  2.07e-08         1      1.89  0.000184  3.67e-06  4.41e-25       715  4.05e+06  1.34e+20
         P1   1.1e-08      0.53         1  9.73e-05  1.95e-06  2.34e-25       379  2.15e+06  7.12e+19
         P2  0.000113  5.45e+03  1.03e+04         1      0.02   2.4e-21  3.89e+06  2.21e+10  7.31e+23
         P3   0.00565  2.73e+05  5.14e+05        50         1   1.2e-19  1.95e+08   1.1e+12  3.66e+25
         P4   4.7e+16  2.27e+24  4.28e+24  4.16e+20  8.32e+18         1  1.62e+27  9.19e+30  3.04e+44
         P5   2.9e-11    0.0014   0.00264  2.57e-07  5.13e-09  6.17e-28         1  5.67e+03  1.88e+17
         P6  5.11e-15  2.47e-07  4.65e-07  4.53e-11  9.05e-13  1.09e-31  0.000176         1  3.31e+13
         P7  1.54e-28  7.45e-21  1.41e-20  1.37e-24  2.73e-26  3.28e-45  5.33e-18  3.02e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.33826, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.98048e+08
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.32644, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.93469, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20151.6      3684.38      989.609      1202.56      135.471        15043      1661.55      6.60861
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37743, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002705, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41225, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.87193e-06  1.87193e-06  6.91032e-07
      low eigenvalue method done, cpu time[sec] = 1.41337, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.87e-06  6.91e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.69e-07  6.91e-07         1
         *Z       ---       ---  1.74e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.91032e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.12186e-27  2.21197e-27  6.37761e-29  5.08788e-28  1.40421e-29  7.52472e-30  5.49939e-35    2.208e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.25091, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         8.94145e+08
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.326075, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.95102, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             6717.2      1228.13       329.87      400.855      45.1569      5014.35      553.851      2.20287
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.31211, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00248, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.34688, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.75784e-07  9.75785e-07  3.08149e-07
      low eigenvalue method done, cpu time[sec] = 1.34801, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.76e-07  3.08e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.67e-08  3.08e-07         1
         *Z       ---       ---  1.74e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.08149e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.93644e-27  8.52046e-28  2.36535e-29  1.57631e-28   4.7052e-30  6.72713e-30   5.5426e-35  2.20793e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19893, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         1.49024e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.324681, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 5.0053, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4030.32      736.876      197.922      240.513      27.0942      3008.61       332.31      1.32172
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.25305, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0025, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.2888, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.00414e-07  7.00414e-07  1.98734e-07
      low eigenvalue method done, cpu time[sec] = 1.28992, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     7e-07  1.99e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.18e-08  1.99e-07         1
         *Z       ---       ---  1.74e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.98734e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.9467e-27  5.09612e-28  1.43094e-29  8.83479e-29   2.7342e-30  5.89756e-30  5.58783e-35  2.20781e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19644, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.08634e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.325487, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.95244, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2878.8       526.34      141.373      171.795       19.353      2149.01      237.365     0.944087
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.3091, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002494, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.34398, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.56729e-07  5.56729e-07   1.4542e-07
      low eigenvalue method done, cpu time[sec] = 1.34507, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.57e-07  1.45e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.89e-08  1.45e-07         1
         *Z       ---       ---  1.74e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.4542e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.44756e-27  3.54563e-28  1.01028e-29  5.94601e-29  1.88397e-30   5.2284e-30  5.63396e-35  2.20784e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19804, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.68243e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.324112, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.97151, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2239.07      409.375      109.957      133.618      15.0523      1671.45      184.617      0.73429
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.28941, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002501, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.32444, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.66213e-07  4.66213e-07  1.13732e-07
      low eigenvalue method done, cpu time[sec] = 1.32557, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.66e-07  1.14e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.08e-08  1.14e-07         1
         *Z       ---       ---  1.74e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.13732e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.14463e-27  2.67059e-28  7.71635e-30  4.38746e-29  1.41449e-30   4.6909e-30  5.68007e-35   2.2079e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20079, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         2.98048e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.326465, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.9581, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2015.16      368.438      98.9609      120.256      13.5471       1504.3      166.155     0.660861
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.30518, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.0025, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.34031, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.32134e-07  4.32134e-07  1.02266e-07
      low eigenvalue method done, cpu time[sec] = 1.34142, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.32e-07  1.02e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.77e-08  1.02e-07         1
         *Z       ---       ---  1.74e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.02266e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.03373e-27  2.36393e-28  6.87485e-30  3.85409e-29  1.25153e-30  4.46076e-30  5.70287e-35  2.20794e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20429, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         4.47072e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.327484, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.97973, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1343.44      245.625       65.974      80.1709      9.03139      1002.87       110.77     0.440574
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27905, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002495, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31408, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.19984e-07  3.19985e-07  6.67236e-08
      low eigenvalue method done, cpu time[sec] = 1.3152, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.2e-07  6.67e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.77e-08  6.67e-08         1
         *Z       ---       ---  1.74e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.67236e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.84949e-28  1.45294e-28  4.34587e-30  2.31136e-29  7.71393e-31  3.57749e-30  5.81172e-35  2.20805e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19663, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         5.96096e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.325341, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.96246, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1007.58      184.219      49.4805      60.1282      6.77354      752.152      83.0776     0.330431
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.29574, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002531, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.33085, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.56512e-07  2.56512e-07  4.84227e-08
      low eigenvalue method done, cpu time[sec] = 1.33194, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.57e-07  4.84e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.21e-08  4.84e-08         1
         *Z       ---       ---  1.74e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.84227e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.0194e-28  1.01173e-28  3.09447e-30   1.5882e-29  5.40199e-31  2.97947e-30  5.90799e-35  2.20817e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19709, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         7.45121e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.324083, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.97487, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            806.063      147.375      39.5844      48.1026      5.41883      601.722      66.4621     0.264344
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.28662, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002507, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.32132, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.15136e-07  2.15136e-07  3.73787e-08
      low eigenvalue method done, cpu time[sec] = 1.32245, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.15e-07  3.74e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.85e-08  3.74e-08         1
         *Z       ---       ---  1.74e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.73787e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.90136e-28  7.56921e-29  2.35799e-30  1.17841e-29   4.0664e-31  2.54639e-30  5.98904e-35  2.20828e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.19858, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         8.94145e+09
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.326154, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.97661, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             671.72      122.813       32.987      40.0855      4.51569      501.435      55.3851     0.220287
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.28576, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002499, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.32088, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.85818e-07  1.85818e-07  3.00519e-08
      low eigenvalue method done, cpu time[sec] = 1.32199, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.86e-07  3.01e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.59e-08  3.01e-08         1
         *Z       ---       ---  1.74e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.00519e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.15303e-28  5.93543e-29  1.87794e-30   9.1891e-30  3.20785e-31   2.2177e-30  6.05436e-35   2.2084e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20503, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         1.04317e+10
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.324428, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.98819, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             575.76      105.268      28.2746       34.359       3.8706      429.801      47.4729     0.188817
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27445, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002539, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.3097, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.63859e-07  1.63859e-07  2.48726e-08
      low eigenvalue method done, cpu time[sec] = 1.31082, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.64e-07  2.49e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.4e-08  2.49e-08         1
         *Z       ---       ---  1.74e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.48726e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.62043e-28  4.81203e-29  1.54304e-30  7.42041e-30  2.61547e-31   1.9595e-30  6.10454e-35  2.20851e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20075, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 590 K
            Well    Collision, 1/sec
              W1         1.19219e+10
      global relaxation matrix dimension = 397
      setting global matrices ... done, cpu time[sec] = 0.325241, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.98369, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             503.79      92.1095      24.7402      30.0641      3.38677      376.076      41.5388     0.165215
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.28052, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002522, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31576, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.46745e-07  1.46745e-07  2.10399e-08
      low eigenvalue method done, cpu time[sec] = 1.31687, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.47e-07   2.1e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.25e-08   2.1e-08         1
         *Z       ---       ---  1.74e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.10399e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.22415e-28  3.99979e-29  1.29776e-30  6.14991e-30  2.18553e-31  1.75127e-30  6.14071e-35  2.20862e-49

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.20385, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 600 K
      Energy reference = 33457 1/cm
      Energy step      = 100 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006247
         W1 Well: collisional kernel bandwidth = 55
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.403283
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.218482
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.204622
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.08416
         W1 Well: minimal relaxation eigenvalue = 0.0775733
         W1 Well: maximal relaxation eigenvalue = 0.987344
         W1 Well:       grid size = 392
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5743 1/cm
         B1 Barrier:        grid size = 335
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -43 1/cm
         B2 Barrier:        grid size = 333
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 156 1/cm
         B3 Barrier:        grid size = 381
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4643 1/cm
         B4 Barrier:        grid size = 397
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6243 1/cm
         B5 Barrier: nonpositive number of states at -23143 1/cm => truncating
         B5 Barrier:        grid size = 566
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23143 1/cm
         B6 Barrier:        grid size = 320
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1456 1/cm
         B7 Barrier:        grid size = 288
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4657 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16757 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.27334, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 392
      MasterEquation::Barrier::truncate: real weight = 8.69284e+40
      MasterEquation::Barrier::truncate: effective weight = 3.96075e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 392
      MasterEquation::Barrier::truncate: real weight = 2.56552e+39
      MasterEquation::Barrier::truncate: effective weight = 1.16361e+36
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5743  -5743 2.04e+09  1.4e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -43 2.87e+15
         B2    157 5.29e+14
         B3  -4643 1.43e+14
         B4  -5743 1.73e+14
         B5  -5743 1.95e+13
         B6   1457 2.16e+15
         B7   4658 2.41e+14
         B8  16757 9.95e+11
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.05e-09  1.97e-09  2.34e-13  4.99e-15  1.26e-33   7.1e-07   0.00356   7.3e+10
          R   9.5e+08         1      1.87  0.000222  4.74e-06   1.2e-24       674  3.38e+06  6.94e+19
         P1  5.07e+08     0.533         1  0.000118  2.53e-06  6.39e-25       360   1.8e+06   3.7e+19
         P2  4.28e+12  4.51e+03  8.45e+03         1    0.0214   5.4e-21  3.04e+06  1.52e+10  3.13e+23
         P3     2e+14  2.11e+05  3.96e+05      46.8         1  2.53e-19  1.42e+08  7.14e+11  1.46e+25
         P4  7.93e+32  8.35e+23  1.57e+24  1.85e+20  3.96e+18         1  5.63e+26  2.83e+30  5.79e+43
         P5  1.41e+06   0.00148   0.00278  3.29e-07  7.03e-09  1.78e-27         1  5.02e+03  1.03e+17
         P6       281  2.96e-07  5.54e-07  6.56e-11   1.4e-12  3.54e-31  0.000199         1  2.05e+13
         P7  1.37e-11  1.44e-20   2.7e-20   3.2e-24  6.83e-26  1.73e-44  9.72e-18  4.88e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.3e+07  2.43e+07  2.88e+03      61.5  1.55e-17  8.75e+09  4.39e+13     9e+26
          R   7.7e-08         1      1.87  0.000222  4.74e-06   1.2e-24       674  3.38e+06  6.94e+19
         P1  4.11e-08     0.533         1  0.000118  2.53e-06  6.39e-25       360   1.8e+06   3.7e+19
         P2  0.000347  4.51e+03  8.45e+03         1    0.0214   5.4e-21  3.04e+06  1.52e+10  3.13e+23
         P3    0.0163  2.11e+05  3.96e+05      46.8         1  2.53e-19  1.42e+08  7.14e+11  1.46e+25
         P4  6.43e+16  8.35e+23  1.57e+24  1.85e+20  3.96e+18         1  5.63e+26  2.83e+30  5.79e+43
         P5  1.14e-10   0.00148   0.00278  3.29e-07  7.03e-09  1.78e-27         1  5.02e+03  1.03e+17
         P6  2.28e-14  2.96e-07  5.54e-07  6.56e-11   1.4e-12  3.54e-31  0.000199         1  2.05e+13
         P7  1.11e-27  1.44e-20   2.7e-20   3.2e-24  6.83e-26  1.73e-44  9.72e-18  4.88e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.28758, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.94788e+08
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.318328, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.76847, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20885.7      3854.65      1039.35      1260.52      142.371      15729.5      1754.14      7.24803
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.50034, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002424, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.53447, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.32145e-06  2.32145e-06  8.79759e-07
      low eigenvalue method done, cpu time[sec] = 1.5356, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.32e-06   8.8e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.09e-07   8.8e-07         1
         *Z       ---       ---  1.12e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.79759e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.23712e-26  8.01271e-27   2.3064e-28  1.82805e-27  5.05866e-29  2.85876e-29   2.4089e-34  1.58255e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.18571, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         8.84364e+08
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.307275, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.77559, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             6961.9      1284.88      346.451      420.172       47.457      5243.16      584.712      2.41601
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.43032, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002407, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.46448, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.22358e-06  1.22359e-06  3.97277e-07
      low eigenvalue method done, cpu time[sec] = 1.46561, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.22e-06  3.97e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.09e-07  3.97e-07         1
         *Z       ---       ---  1.12e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.97277e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.08613e-26  3.12112e-27  8.67356e-29  5.74009e-28  1.71892e-29  2.57131e-29  2.42774e-34  1.58258e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10325, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         1.47394e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.306068, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.7792, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4177.14      770.931       207.87      252.103      28.4742       3145.9      350.827      1.44961
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.42745, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002429, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.46209, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.82544e-07  8.82544e-07  2.57916e-07
      low eigenvalue method done, cpu time[sec] = 1.46319, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.83e-07  2.58e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.77e-08  2.58e-07         1
         *Z       ---       ---  1.12e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.57915e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.24685e-27  1.87795e-27  5.28476e-29  3.23927e-28  1.00603e-29  2.26443e-29  2.44743e-34   1.5827e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10421, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.06352e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.304423, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.79362, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2983.67      550.665      148.479      180.074      20.3387      2247.07      250.591      1.03543
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.41291, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00243, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.44717, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.03663e-07  7.03663e-07  1.89598e-07
      low eigenvalue method done, cpu time[sec] = 1.44826, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.04e-07   1.9e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.16e-08   1.9e-07         1
         *Z       ---       ---  1.12e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.89598e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.41307e-27  1.31209e-27  3.74967e-29  2.19044e-28  6.96623e-30  2.01458e-29  2.46748e-34  1.58277e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10368, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.65309e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.303601, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.78456, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2320.63      428.295      115.484      140.057       15.819      1747.72      194.904     0.805336
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.25309, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002412, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.28727, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.90584e-07  5.90584e-07  1.48814e-07
      low eigenvalue method done, cpu time[sec] = 1.28773, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.91e-07  1.49e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.15e-08  1.49e-07         1
         *Z       ---       ---  1.12e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.48814e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.29531e-27  9.91502e-28  2.87489e-29  1.62218e-28  5.25021e-30  1.81273e-29   2.4875e-34  1.58277e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10619, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         2.94788e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.317029, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.77313, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2088.57      385.465      103.935      126.052      14.2371      1572.95      175.414     0.724803
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.43143, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002416, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.46561, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.4792e-07   5.4792e-07  1.34016e-07
      low eigenvalue method done, cpu time[sec] = 1.46673, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.48e-07  1.34e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.77e-08  1.34e-07         1
         *Z       ---       ---  1.12e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.34016e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.88495e-27  8.78876e-28  2.56555e-29  1.42719e-28  4.65291e-30  1.72601e-29   2.4974e-34   1.5828e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.11155, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         4.42182e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.304391, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.78669, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1392.38      256.977      69.2901      84.0344       9.4914      1048.63      116.942     0.483202
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.42208, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002433, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.45637, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.07132e-07  4.07132e-07  8.79691e-08
      low eigenvalue method done, cpu time[sec] = 1.45749, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.07e-07   8.8e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.52e-08   8.8e-08         1
         *Z       ---       ---  1.12e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.79691e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.5895e-27  5.43187e-28  1.63224e-29   8.6116e-29  2.88626e-30  1.39157e-29  2.54458e-34  1.58286e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10518, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         5.89576e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.304626, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.7928, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1044.28      192.733      51.9676      63.0258      7.11855      786.474      87.7068     0.362401
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.41644, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002415, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.45057, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.27144e-07  3.27144e-07  6.41244e-08
      low eigenvalue method done, cpu time[sec] = 1.45168, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.27e-07  6.41e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.82e-08  6.41e-08         1
         *Z       ---       ---  1.12e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.41244e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.90591e-27  3.79778e-28  1.16771e-29  5.94367e-29  2.03068e-30  1.16366e-29   2.5863e-34  1.58295e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10339, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1          7.3697e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.304722, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.79583, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            835.428      154.186      41.5741      50.4206      5.69484       629.18      70.1655     0.289921
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.40863, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002411, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.44276, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.74861e-07  2.74861e-07  4.96731e-08
      low eigenvalue method done, cpu time[sec] = 1.4439, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.75e-07  4.97e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.36e-08  4.97e-08         1
         *Z       ---       ---  1.12e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.96731e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.4865e-27  2.85045e-28  8.93105e-30  4.42559e-29  1.53426e-30  9.97813e-30  2.62144e-34  1.58303e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.0992, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         8.84364e+09
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.305024, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.80559, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             696.19      128.488      34.6451      42.0172       4.7457      524.316      58.4712     0.241601
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.40269, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00241, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.43687, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.37735e-07  2.37735e-07  4.00525e-08
      low eigenvalue method done, cpu time[sec] = 1.43799, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.38e-07  4.01e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.03e-08  4.01e-08         1
         *Z       ---       ---  1.12e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.00525e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.20482e-27  2.24116e-28  7.13468e-30  3.46104e-29  1.21402e-30  8.71449e-30  2.64983e-34   1.5831e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10346, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         1.03176e+10
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.304613, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.79646, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            596.734      110.133      29.6958      36.0147      4.06774      449.414      50.1182     0.207087
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.41189, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002403, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.44617, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.09881e-07  2.09881e-07  3.32318e-08
      low eigenvalue method done, cpu time[sec] = 1.44725, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.1e-07  3.32e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.79e-08  3.32e-08         1
         *Z       ---       ---  1.12e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.32318e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00375e-27  1.82111e-28   5.8777e-30  2.80178e-29  9.92402e-31  7.71863e-30  2.67172e-34  1.58318e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.10491, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 600 K
            Well    Collision, 1/sec
              W1         1.17915e+10
      global relaxation matrix dimension = 392
      setting global matrices ... done, cpu time[sec] = 0.304153, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.80754, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            522.142      96.3664      25.9838      31.5129      3.55927      393.237      43.8534     0.181201
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.40878, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00241, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.44299, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.88143e-07  1.88143e-07  2.81719e-08
      low eigenvalue method done, cpu time[sec] = 1.44408, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.88e-07  2.82e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.6e-08  2.82e-08         1
         *Z       ---       ---  1.12e+28
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.81719e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.53778e-28  1.51672e-28   4.9547e-30  2.32706e-29  8.31146e-31  6.91322e-30   2.6876e-34  1.58326e-48

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.11065, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 610 K
      Energy reference = 33735 1/cm
      Energy step      = 102 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006642
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.380885
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.206387
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.217429
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.04954
         W1 Well: minimal relaxation eigenvalue = 0.0770799
         W1 Well: maximal relaxation eigenvalue = 0.986585
         W1 Well:       grid size = 388
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5841 1/cm
         B1 Barrier:        grid size = 331
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -27 1/cm
         B2 Barrier:        grid size = 329
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 176 1/cm
         B3 Barrier:        grid size = 376
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4617 1/cm
         B4 Barrier:        grid size = 392
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6249 1/cm
         B5 Barrier: nonpositive number of states at -23181 1/cm => truncating
         B5 Barrier:        grid size = 558
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23181 1/cm
         B6 Barrier:        grid size = 316
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1502 1/cm
         B7 Barrier:        grid size = 285
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4664 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16700 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.2125, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 388
      MasterEquation::Barrier::truncate: real weight = 4.44855e+40
      MasterEquation::Barrier::truncate: effective weight = 2.06744e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 388
      MasterEquation::Barrier::truncate: real weight = 1.30391e+39
      MasterEquation::Barrier::truncate: effective weight = 6.04066e+35
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5841  -5841 1.97e+09 1.46e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -27 3.07e+15
         B2    177 5.72e+14
         B3  -4617 1.55e+14
         B4  -5841 1.87e+14
         B5  -5841 2.12e+13
         B6   1503 2.33e+15
         B7   4665 2.63e+14
         B8  16701 1.13e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.44e-10  1.76e-09  2.52e-13  5.74e-15  2.97e-33  6.02e-07   0.00268  3.46e+10
          R  1.06e+09         1      1.86  0.000266  6.07e-06  3.15e-24       637  2.84e+06  3.66e+19
         P1  5.68e+08     0.536         1  0.000143  3.26e-06  1.69e-24       342  1.52e+06  1.97e+19
         P2  3.97e+12  3.75e+03  6.99e+03         1    0.0228  1.18e-20  2.39e+06  1.07e+10  1.37e+23
         P3  1.74e+14  1.65e+05  3.07e+05      43.9         1  5.18e-19  1.05e+08  4.68e+11  6.03e+24
         P4  3.36e+32  3.18e+23  5.92e+23  8.47e+19  1.93e+18         1  2.02e+26  9.02e+29  1.16e+43
         P5  1.66e+06   0.00157   0.00293  4.18e-07  9.53e-09  4.94e-27         1  4.46e+03  5.75e+16
         P6       373  3.52e-07  6.56e-07  9.38e-11  2.14e-12  1.11e-30  0.000224         1  1.29e+13
         P7  2.89e-11  2.73e-20  5.09e-20  7.28e-24  1.66e-25  8.59e-44  1.74e-17  7.75e-14         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.64e+06  6.79e+06       971      22.1  1.15e-17  2.32e+09  1.03e+13  1.33e+26
          R  2.75e-07         1      1.86  0.000266  6.07e-06  3.15e-24       637  2.84e+06  3.66e+19
         P1  1.47e-07     0.536         1  0.000143  3.26e-06  1.69e-24       342  1.52e+06  1.97e+19
         P2   0.00103  3.75e+03  6.99e+03         1    0.0228  1.18e-20  2.39e+06  1.07e+10  1.37e+23
         P3    0.0452  1.65e+05  3.07e+05      43.9         1  5.18e-19  1.05e+08  4.68e+11  6.03e+24
         P4  8.72e+16  3.18e+23  5.92e+23  8.47e+19  1.93e+18         1  2.02e+26  9.02e+29  1.16e+43
         P5  4.31e-10   0.00157   0.00293  4.18e-07  9.53e-09  4.94e-27         1  4.46e+03  5.75e+16
         P6  9.67e-14  3.52e-07  6.56e-07  9.38e-11  2.14e-12  1.11e-30  0.000224         1  1.29e+13
         P7  7.49e-27  2.73e-20  5.09e-20  7.28e-24  1.66e-25  8.59e-44  1.74e-17  7.75e-14         1
   MasterEquation::set:  done, cpu time[sec] = 2.2259, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.91619e+08
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.312368, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.60965, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21636.1      4030.67      1090.97      1320.53      149.535      16437.6      1850.57      7.93786
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.62251, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002419, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.6566, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.43415e-06  2.43416e-06  9.41384e-07
      low eigenvalue method done, cpu time[sec] = 1.65769, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.43e-06  9.41e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.18e-07  9.41e-07         1
         *Z       ---       ---  7.94e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.41383e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.82695e-26    2.779e-26  7.98859e-28  6.29188e-27  1.74565e-28   1.0475e-28   1.0038e-33  1.06285e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.13106, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         8.74857e+08
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.303268, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.61377, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7212.04      1343.56      363.656      440.178      49.8451      5479.19      616.857      2.64595
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.56267, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002357, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.5962, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.29617e-06  1.29617e-06  4.30371e-07
      low eigenvalue method done, cpu time[sec] = 1.5973, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.3e-06   4.3e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.14e-07   4.3e-07         1
         *Z       ---       ---  7.94e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.30371e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.84511e-26  1.09445e-26   3.0452e-28  2.00169e-27  6.01313e-29  9.44599e-29   1.0116e-33  1.06291e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05839, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1          1.4581e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.299028, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.59803, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4327.23      806.134      218.193      264.107      29.9071      3287.51      370.114      1.58757
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.56871, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002354, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.60295, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.39083e-07  9.39083e-07  2.81211e-07
      low eigenvalue method done, cpu time[sec] = 1.60405, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.39e-07  2.81e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.22e-08  2.81e-07         1
         *Z       ---       ---  7.94e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.81211e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.58169e-26  6.62402e-27  1.86843e-28   1.1372e-27  3.54398e-29  8.34366e-29  1.01974e-33  1.06302e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.04978, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.04133e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.297419, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.62492, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3090.88       575.81      155.852      188.648      21.3622      2348.22      264.367      1.13398
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.54178, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00235, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57638, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.50881e-07  7.50881e-07  2.07657e-07
      low eigenvalue method done, cpu time[sec] = 1.5775, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.51e-07  2.08e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.54e-08  2.08e-07         1
         *Z       ---       ---  7.94e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.07657e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.93691e-26  4.64719e-27  1.33213e-28  7.72557e-28  2.46592e-29  7.44295e-29  1.02802e-33  1.06302e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05128, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.62457e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.30021, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.61218, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2404.01      447.852      121.219      146.726       16.615       1826.4      205.619     0.881985
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.556, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002345, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.58974, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.31525e-07  6.31525e-07  1.63559e-07
      low eigenvalue method done, cpu time[sec] = 1.59084, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.32e-07  1.64e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.48e-08  1.64e-07         1
         *Z       ---       ---  7.94e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.63559e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.54221e-26  3.52302e-27  1.02517e-28  5.74181e-28  1.86542e-29  6.71294e-29  1.03628e-33  1.06304e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.04739, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         2.91619e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.299477, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.63645, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2163.61      403.067      109.097      132.053      14.9535      1643.76      185.057     0.793786
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53773, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002352, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57176, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.86407e-07  5.86407e-07  1.47515e-07
      low eigenvalue method done, cpu time[sec] = 1.57287, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.86e-07  1.48e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.08e-08  1.48e-07         1
         *Z       ---       ---  7.94e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.47515e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.39692e-26  3.12713e-27  9.16322e-29  5.05934e-28  1.65582e-29  6.39862e-29  1.04036e-33  1.06306e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.0562, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         4.37429e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.299145, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.62813, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1442.41      268.711      72.7311      88.0356      9.96903      1095.84      123.371     0.529191
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.54015, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002369, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57385, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.37133e-07  4.37133e-07  9.74049e-08
      low eigenvalue method done, cpu time[sec] = 1.57497, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.37e-07  9.74e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.76e-08  9.74e-08         1
         *Z       ---       ---  7.94e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.74049e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.36534e-27  1.94326e-27  5.86661e-29  3.07114e-28  1.03359e-29  5.18236e-29  1.05981e-33  1.06311e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05001, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         5.83238e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.299485, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.64047, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1081.81      201.533      54.5483      66.0267      7.47677      821.878      92.5285     0.396893
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53175, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002357, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.56559, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.52021e-07  3.52021e-07  7.13113e-08
      low eigenvalue method done, cpu time[sec] = 1.5667, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.52e-07  7.13e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.01e-08  7.13e-08         1
         *Z       ---       ---  7.94e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.13113e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   6.9225e-27  1.36411e-27  4.21635e-29  2.12898e-28  7.30539e-30  4.34935e-29    1.077e-33  1.06316e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05507, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         7.29048e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.299452, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.62928, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            865.445      161.227      43.6387      52.8214      5.98142      657.502      74.0228     0.317515
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53848, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002369, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57221, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.96247e-07  2.96247e-07  5.54304e-08
      low eigenvalue method done, cpu time[sec] = 1.57329, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.96e-07  5.54e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.53e-08  5.54e-08         1
         *Z       ---       ---  7.94e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.54304e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.41747e-27  1.02709e-27  3.23658e-29  1.59069e-28  5.53951e-30  3.74075e-29  1.09151e-33  1.06321e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.04696, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         8.74857e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.298781, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.6488, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            721.204      134.356      36.3656      44.0178      4.98451      547.919      61.6857     0.264595
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.44798, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002352, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.55166, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.56566e-07  2.56566e-07  4.48223e-08
      low eigenvalue method done, cpu time[sec] = 1.55278, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.57e-07  4.48e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.18e-08  4.48e-08         1
         *Z       ---       ---  7.94e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.48223e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.40323e-27  8.09668e-28  2.59339e-29  1.24756e-28  4.39642e-30  3.27549e-29  1.10326e-33  1.06327e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05351, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         1.02067e+10
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.302416, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.64926, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            618.175      115.162      31.1705      37.7296      4.27244      469.645      52.8734     0.226796
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51804, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002362, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.55187, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.26747e-07  2.26747e-07  3.72799e-08
      low eigenvalue method done, cpu time[sec] = 1.55297, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.27e-07  3.73e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.92e-08  3.73e-08         1
         *Z       ---       ---  7.94e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.72799e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.67721e-27  6.59392e-28    2.142e-29  1.01238e-28  3.60305e-30  2.90777e-29  1.11236e-33  1.06332e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05389, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 610 K
            Well    Collision, 1/sec
              W1         1.16648e+10
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.301172, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.65633, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            540.903      100.767      27.2742      33.0134      3.73839      410.939      46.2643     0.198447
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51088, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002345, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54462, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.03444e-07  2.03443e-07  3.16707e-08
      low eigenvalue method done, cpu time[sec] = 1.54571, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.03e-07  3.17e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.72e-08  3.17e-08         1
         *Z       ---       ---  7.94e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.16707e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.13434e-27  5.50253e-28  1.80969e-29  8.42634e-29  3.02432e-30  2.60962e-29  1.11901e-33  1.06337e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05094, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 620 K
      Energy reference = 34013 1/cm
      Energy step      = 103 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.0068
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.382534
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.208088
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.213223
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.045
         W1 Well: minimal relaxation eigenvalue = 0.0766059
         W1 Well: maximal relaxation eigenvalue = 0.988279
         W1 Well:       grid size = 388
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5950 1/cm
         B1 Barrier:        grid size = 331
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -79 1/cm
         B2 Barrier:        grid size = 329
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 125 1/cm
         B3 Barrier:        grid size = 375
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4611 1/cm
         B4 Barrier:        grid size = 391
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6260 1/cm
         B5 Barrier: nonpositive number of states at -23255 1/cm => truncating
         B5 Barrier:        grid size = 556
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23255 1/cm
         B6 Barrier:        grid size = 316
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1464 1/cm
         B7 Barrier:        grid size = 285
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4657 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16709 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.20685, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 388
      MasterEquation::Barrier::truncate: real weight = 2.33041e+40
      MasterEquation::Barrier::truncate: effective weight = 1.09366e+37
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 388
      MasterEquation::Barrier::truncate: real weight = 6.80147e+38
      MasterEquation::Barrier::truncate: effective weight = 3.18501e+35
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5950  -5950  1.9e+09 1.52e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -79 3.29e+15
         B2    126 6.18e+14
         B3  -4611 1.68e+14
         B4  -5950 2.03e+14
         B5  -5950  2.3e+13
         B6   1465 2.52e+15
         B7   4658 2.86e+14
         B8  16709 1.27e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  8.78e-10  1.63e-09  2.79e-13  6.77e-15  7.04e-33  5.29e-07    0.0021  1.73e+10
          R  1.14e+09         1      1.85  0.000318  7.72e-06  8.02e-24       603   2.4e+06  1.97e+19
         P1  6.15e+08     0.539         1  0.000172  4.16e-06  4.33e-24       325  1.29e+06  1.07e+19
         P2  3.58e+12  3.14e+03  5.83e+03         1    0.0243  2.52e-20   1.9e+06  7.54e+09  6.21e+22
         P3  1.48e+14   1.3e+05   2.4e+05      41.2         1  1.04e-18  7.81e+07  3.11e+11  2.56e+24
         P4  1.42e+32  1.25e+23  2.31e+23  3.97e+19  9.62e+17         1  7.52e+25  2.99e+29  2.46e+42
         P5  1.89e+06   0.00166   0.00307  5.28e-07  1.28e-08  1.33e-26         1  3.98e+03  3.27e+16
         P6       475  4.17e-07  7.73e-07  1.33e-10  3.22e-12  3.35e-30  0.000252         1  8.24e+12
         P7  5.77e-11  5.06e-20  9.39e-20  1.61e-23  3.91e-25  4.06e-43  3.05e-17  1.21e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.07e+06  1.97e+06       339      8.22  8.54e-18  6.42e+08  2.55e+12   2.1e+25
          R  9.39e-07         1      1.85  0.000318  7.72e-06  8.02e-24       603   2.4e+06  1.97e+19
         P1  5.06e-07     0.539         1  0.000172  4.16e-06  4.33e-24       325  1.29e+06  1.07e+19
         P2   0.00295  3.14e+03  5.83e+03         1    0.0243  2.52e-20   1.9e+06  7.54e+09  6.21e+22
         P3     0.122   1.3e+05   2.4e+05      41.2         1  1.04e-18  7.81e+07  3.11e+11  2.56e+24
         P4  1.17e+17  1.25e+23  2.31e+23  3.97e+19  9.62e+17         1  7.52e+25  2.99e+29  2.46e+42
         P5  1.56e-09   0.00166   0.00307  5.28e-07  1.28e-08  1.33e-26         1  3.98e+03  3.27e+16
         P6  3.92e-13  4.17e-07  7.73e-07  1.33e-10  3.22e-12  3.35e-30  0.000252         1  8.24e+12
         P7  4.75e-26  5.06e-20  9.39e-20  1.61e-23  3.91e-25  4.06e-43  3.05e-17  1.21e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.22132, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.88537e+08
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.312444, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.61523, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22402.9      4212.58       1144.5      1382.67      156.971      17167.6      1950.96      8.68132
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.6057, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002361, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.63907, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.49379e-06  2.49379e-06  9.82073e-07
      low eigenvalue method done, cpu time[sec] = 1.64015, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.49e-06  9.82e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.22e-07  9.82e-07         1
         *Z       ---       ---  5.79e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.82072e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.62797e-25  9.25886e-26  2.65608e-27  2.07925e-26  5.78334e-28  3.64902e-28  3.99828e-33  6.71223e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.12315, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         8.65611e+08
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.301644, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.61977, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7467.63      1404.19        381.5       460.89      52.3237      5722.54      650.319      2.89377
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.54476, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00236, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57856, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.34074e-06  1.34074e-06   4.5426e-07
      low eigenvalue method done, cpu time[sec] = 1.58012, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.34e-06  4.54e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.18e-07  4.54e-07         1
         *Z       ---       ---  5.79e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.5426e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.30572e-25  3.68377e-26   1.0258e-27  6.69874e-27  2.01851e-28  3.30921e-28  4.02922e-33  6.71304e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.04761, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         1.44268e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.297802, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.63757, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4480.58      842.516        228.9      276.534      31.3942      3433.53      390.191      1.73626
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53186, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00235, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.56563, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.75498e-07  9.75498e-07  2.98669e-07
      low eigenvalue method done, cpu time[sec] = 1.56674, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.75e-07  2.99e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.49e-08  2.99e-07         1
         *Z       ---       ---  5.79e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.98669e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.82011e-26  2.24201e-26  6.33662e-28  3.83041e-27  1.19773e-28   2.9353e-28  4.06146e-33  6.71302e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.0523, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.01976e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.298119, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.65086, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3200.41      601.797        163.5      197.524      22.4244      2452.52      278.708      1.24019
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53367, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002346, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.56758, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.82119e-07  7.82119e-07  2.21511e-07
      low eigenvalue method done, cpu time[sec] = 1.56867, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.82e-07  2.22e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.77e-08  2.22e-07         1
         *Z       ---       ---  5.79e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.21511e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.64549e-26  1.57914e-26  4.53906e-28  2.61391e-27    8.373e-29  2.62705e-28  4.09422e-33  6.71313e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06755, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.59683e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.299839, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.65085, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2489.21      468.064      127.167       153.63      17.4412      1907.51      216.773     0.964591
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.52744, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002355, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.56123, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.59106e-07  6.59106e-07  1.75062e-07
      low eigenvalue method done, cpu time[sec] = 1.56234, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.59e-07  1.75e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.69e-08  1.75e-07         1
         *Z       ---       ---  5.79e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.75062e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.30886e-26  1.20083e-26  3.50585e-28  1.94947e-27  6.35698e-29  2.37582e-28  4.12685e-33  6.71323e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06066, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         2.88537e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.298825, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.63574, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2240.29      421.258       114.45      138.267      15.6971      1716.76      195.096     0.868132
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53983, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002356, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.57363, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.1252e-07   6.1252e-07  1.58118e-07
      low eigenvalue method done, cpu time[sec] = 1.5752, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.13e-07  1.58e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.27e-08  1.58e-07         1
         *Z       ---       ---  5.79e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.58118e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.81556e-26   1.0673e-26  3.13848e-28   1.7203e-27  5.65148e-29   2.2673e-28  4.14296e-33  6.71329e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06266, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         4.32805e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.300994, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.64928, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1493.53      280.839      76.3001      92.1779      10.4647      1144.51      130.064     0.578754
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.53124, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002352, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.56453, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.58012e-07  4.58012e-07  1.05007e-07
      low eigenvalue method done, cpu time[sec] = 1.56561, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.58e-07  1.05e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.92e-08  1.05e-07         1
         *Z       ---       ---  5.79e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.05007e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.24674e-26  6.66741e-27  2.02173e-28  1.05039e-27  3.54936e-29  1.84546e-28  4.21965e-33  6.71365e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06421, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         5.77074e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.299059, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.64264, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1120.14      210.629      57.2251      69.1334      7.84855      858.382      97.5478     0.434066
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.52531, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002352, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.55893, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.69616e-07  3.69616e-07  7.72025e-08
      low eigenvalue method done, cpu time[sec] = 1.56004, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.7e-07  7.72e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.15e-08  7.72e-08         1
         *Z       ---       ---  5.79e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.72025e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.40986e-26  4.69849e-27  1.45957e-28  7.31269e-28  2.51992e-29  1.55476e-28  4.28741e-33  6.71397e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.04952, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         7.21342e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.300328, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.648, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            896.116      168.503      45.7801      55.3067      6.27884      686.705      78.0382     0.347253
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.52104, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.00234, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.55459, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.11548e-07  3.11548e-07  6.02109e-08
      low eigenvalue method done, cpu time[sec] = 1.55571, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.12e-07  6.02e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.64e-08  6.02e-08         1
         *Z       ---       ---  5.79e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.02109e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.89216e-26  3.54859e-27   1.1244e-28  5.48227e-28  1.91757e-29  1.34139e-28  4.34462e-33  6.71429e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05484, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         8.65611e+09
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.299441, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.65233, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            746.763      140.419        38.15       46.089      5.23237      572.254      65.0319     0.289377
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51554, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002349, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54933, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.70157e-07  2.70157e-07  4.88234e-08
      low eigenvalue method done, cpu time[sec] = 1.55045, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.7e-07  4.88e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.28e-08  4.88e-08         1
         *Z       ---       ---  5.79e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.88234e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.54214e-26  2.80456e-27  9.03612e-29  4.31171e-28  1.52634e-29  1.17768e-28  4.39103e-33  6.71461e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05083, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         1.00988e+10
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.303435, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.64988, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            640.083      120.359         32.7      39.5048      4.48489      490.504      55.7416     0.248038
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51885, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00235, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.55214, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.39006e-07  2.39006e-07  4.07043e-08
      low eigenvalue method done, cpu time[sec] = 1.55322, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.39e-07  4.07e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.02e-08  4.07e-08         1
         *Z       ---       ---  5.79e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.07043e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.29089e-26  2.28903e-27  7.48217e-29  3.50727e-28  1.25404e-29  1.04789e-28  4.42709e-33  6.71495e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06029, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 620 K
            Well    Collision, 1/sec
              W1         1.15415e+10
      global relaxation matrix dimension = 388
      setting global matrices ... done, cpu time[sec] = 0.30051, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.65288, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            560.072      105.314      28.6125      34.5667      3.92428      429.191      48.7739     0.217033
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.51366, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002346, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.5476, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.14631e-07  2.14631e-07  3.46518e-08
      low eigenvalue method done, cpu time[sec] = 1.54871, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.15e-07  3.47e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.81e-08  3.47e-08         1
         *Z       ---       ---  5.79e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.46518e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.10257e-26  1.91382e-27  6.33532e-29  2.92527e-28  1.05491e-29  9.42368e-29   4.4536e-33  6.71528e-47

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.05077, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 630 K
      Energy reference = 34291 1/cm
      Energy step      = 105 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006634
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.374746
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.206956
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.203725
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 1.01473
         W1 Well: minimal relaxation eigenvalue = 0.0761651
         W1 Well: maximal relaxation eigenvalue = 0.987466
         W1 Well:       grid size = 383
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -5924 1/cm
         B1 Barrier:        grid size = 327
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -43 1/cm
         B2 Barrier:        grid size = 325
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 165 1/cm
         B3 Barrier:        grid size = 371
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4664 1/cm
         B4 Barrier:        grid size = 386
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6238 1/cm
         B5 Barrier: nonpositive number of states at -23249 1/cm => truncating
         B5 Barrier:        grid size = 548
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23248 1/cm
         B6 Barrier:        grid size = 313
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1426 1/cm
         B7 Barrier:        grid size = 282
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4681 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16756 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.15502, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 383
      MasterEquation::Barrier::truncate: real weight = 1.24828e+40
      MasterEquation::Barrier::truncate: effective weight = 5.97197e+36
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 383
      MasterEquation::Barrier::truncate: real weight = 3.63565e+38
      MasterEquation::Barrier::truncate: effective weight = 1.73632e+35
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -5924  -5924 1.92e+09 1.59e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -43 3.52e+15
         B2    166 6.67e+14
         B3  -4664 1.82e+14
         B4  -5924 2.19e+14
         B5  -5924  2.5e+13
         B6   1427 2.72e+15
         B7   4682 3.12e+14
         B8  16756 1.44e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.18e-10  1.14e-09  2.33e-13  6.01e-15  1.23e-32  3.53e-07   0.00126  6.71e+09
          R  1.62e+09         1      1.84  0.000378  9.73e-06  1.98e-23       572  2.03e+06  1.09e+19
         P1  8.78e+08     0.542         1  0.000205  5.28e-06  1.08e-23       310   1.1e+06  5.89e+18
         P2  4.29e+12  2.65e+03  4.88e+03         1    0.0258  5.25e-20  1.51e+06  5.39e+09  2.88e+22
         P3  1.66e+14  1.03e+05   1.9e+05      38.8         1  2.04e-18  5.87e+07  2.09e+11  1.12e+24
         P4  8.16e+31  5.04e+22   9.3e+22   1.9e+19  4.91e+17         1  2.88e+25  1.03e+29  5.47e+41
         P5  2.83e+06   0.00175   0.00323  6.61e-07   1.7e-08  3.47e-26         1  3.56e+03   1.9e+16
         P6       796  4.91e-07  9.07e-07  1.86e-10  4.78e-12  9.75e-30  0.000281         1  5.34e+12
         P7  1.49e-10  9.21e-20   1.7e-19  3.48e-23  8.96e-25  1.83e-42  5.26e-17  1.87e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.24e+05  5.97e+05       122      3.15  6.42e-18  1.85e+08  6.59e+11  3.52e+24
          R  3.09e-06         1      1.84  0.000378  9.73e-06  1.98e-23       572  2.03e+06  1.09e+19
         P1  1.67e-06     0.542         1  0.000205  5.28e-06  1.08e-23       310   1.1e+06  5.89e+18
         P2   0.00818  2.65e+03  4.88e+03         1    0.0258  5.25e-20  1.51e+06  5.39e+09  2.88e+22
         P3     0.317  1.03e+05   1.9e+05      38.8         1  2.04e-18  5.87e+07  2.09e+11  1.12e+24
         P4  1.56e+17  5.04e+22   9.3e+22   1.9e+19  4.91e+17         1  2.88e+25  1.03e+29  5.47e+41
         P5   5.4e-09   0.00175   0.00323  6.61e-07   1.7e-08  3.47e-26         1  3.56e+03   1.9e+16
         P6  1.52e-12  4.91e-07  9.07e-07  1.86e-10  4.78e-12  9.75e-30  0.000281         1  5.34e+12
         P7  2.84e-25  9.21e-20   1.7e-19  3.48e-23  8.96e-25  1.83e-42  5.26e-17  1.87e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.16859, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         2.85538e+08
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.305501, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.50906, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23186.2      4400.46         1200      1446.97      164.685      17920.1       2055.4      9.48084
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.68282, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002314, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.71558, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.31425e-06  3.31425e-06  1.33866e-06
      low eigenvalue method done, cpu time[sec] = 1.71665, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.31e-06  1.34e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.96e-07  1.34e-06         1
         *Z       ---       ---  3.71e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.33866e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.48006e-25  2.96206e-25  8.49011e-27  6.60598e-26  1.84205e-27  1.23005e-27  1.52123e-32  3.99791e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.06492, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         8.56613e+08
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.293352, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.51861, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7728.72      1466.82      400.001      482.322      54.8949      5973.35      685.134      3.16028
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.62638, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002265, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.65882, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.80059e-06  1.80059e-06  6.26524e-07
      low eigenvalue method done, cpu time[sec] = 1.65992, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.8e-06  6.27e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.58e-07  6.27e-07         1
         *Z       ---       ---  3.71e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.26523e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.26096e-25  1.19106e-25  3.32167e-27  2.15511e-26  6.51368e-28  1.11816e-27  1.53292e-32   3.9976e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00801, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         1.42769e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.294726, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.51057, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4637.23      880.093      240.001      289.393       32.937      3584.01       411.08      1.89617
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.63, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002276, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.66252, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.31619e-06   1.3162e-06  4.14481e-07
      low eigenvalue method done, cpu time[sec] = 1.66359, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.32e-06  4.14e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-07  4.14e-07         1
         *Z       ---       ---  3.71e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.1448e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.89554e-25  7.29007e-26  2.06563e-27  1.24027e-26  3.89102e-28  9.94674e-28  1.54509e-32  3.99759e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00251, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         1.99876e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.293741, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.53687, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3312.31      628.638      171.429       206.71      23.5264      2560.01      293.629      1.35441
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.60305, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002271, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.6356, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.05845e-06  1.05845e-06  3.08732e-07
      low eigenvalue method done, cpu time[sec] = 1.63704, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.06e-06  3.09e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.17e-08  3.09e-07         1
         *Z       ---       ---  3.71e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.08732e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.19083e-25  5.15512e-26  1.48653e-27  8.50149e-27  2.73276e-28  8.92504e-28  1.55743e-32  3.99774e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00393, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         2.56984e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.294831, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.5271, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2576.24       488.94      133.334      160.774      18.2983      1991.12      228.378      1.05343
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.6098, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00227, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64238, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.93947e-07  8.93947e-07  2.44811e-07
      low eigenvalue method done, cpu time[sec] = 1.64352, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.94e-07  2.45e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.71e-08  2.45e-07         1
         *Z       ---       ---  3.71e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.44811e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.75591e-25  3.93226e-26  1.15228e-27  6.36228e-27  2.08222e-28  8.08973e-28  1.56972e-32  3.99782e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00031, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         2.85538e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.294782, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.5165, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2318.62      440.046          120      144.697      16.4685      1792.01       205.54     0.948084
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.62064, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002269, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.65288, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.31522e-07  8.31522e-07  2.21434e-07
      low eigenvalue method done, cpu time[sec] = 1.65399, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.32e-07  2.21e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.16e-08  2.21e-07         1
         *Z       ---       ---  3.71e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.21434e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.59498e-25  3.49964e-26  1.03311e-27  5.62261e-27  1.85397e-28  7.72814e-28  1.57578e-32  3.99785e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00059, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         4.28306e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.29579, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.54113, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1545.74      293.364      80.0002      96.4645       10.979      1194.67      137.027     0.632056
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.5987, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002261, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.6313, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.2392e-07   6.2392e-07  1.47893e-07
      low eigenvalue method done, cpu time[sec] = 1.63269, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.24e-07  1.48e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.34e-08  1.48e-07         1
         *Z       ---       ---  3.71e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.47893e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.08137e-25  2.19775e-26  6.69543e-28    3.453e-27  1.17142e-28  6.31786e-28  1.60463e-32  3.99803e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00816, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         5.71075e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.29489, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.54055, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1159.31      220.023      60.0001      72.3483      8.23424      896.003       102.77     0.474042
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.59732, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002264, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.62991, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.04699e-07  5.04699e-07  1.09187e-07
      low eigenvalue method done, cpu time[sec] = 1.63166, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.05e-07  1.09e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.29e-08  1.09e-07         1
         *Z       ---       ---  3.71e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.09187e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.05926e-26  1.55475e-26  4.85519e-28  2.41414e-27  8.35353e-29  5.34123e-28  1.63013e-32  3.99823e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00442, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         7.13844e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.293017, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.53792, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            927.447      176.019      48.0001      57.8787      6.58739      716.802       82.216     0.379233
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.60519, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002264, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.63794, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.26171e-07  4.26171e-07  8.54377e-08
      low eigenvalue method done, cpu time[sec] = 1.63905, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.26e-07  8.54e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.61e-08  8.54e-08         1
         *Z       ---       ---  3.71e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.54377e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.34854e-26  1.17785e-26  3.75341e-28  1.81592e-27  6.37902e-29  4.62162e-28   1.6517e-32  3.99843e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00433, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         8.56613e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.294378, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.54832, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            772.872      146.682      40.0001      48.2322      5.48949      597.335      68.5134     0.316028
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.59353, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002263, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.62607, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.70079e-07  3.70079e-07  6.94695e-08
      low eigenvalue method done, cpu time[sec] = 1.62758, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.7e-07  6.95e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.13e-08  6.95e-08         1
         *Z       ---       ---  3.71e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.94694e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.18815e-26  9.33269e-27   3.0252e-28  1.43215e-27  5.09228e-29  4.06766e-28  1.66924e-32  3.99862e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00676, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         9.99382e+09
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.294872, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.53244, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            662.462      125.728      34.2858      41.3419      4.70528      512.002      58.7257     0.270881
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.6017, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002265, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.63431, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.27792e-07  3.27792e-07  5.80532e-08
      low eigenvalue method done, cpu time[sec] = 1.63542, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.28e-07  5.81e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.76e-08  5.81e-08         1
         *Z       ---       ---  3.71e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.80532e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.35293e-26   7.6338e-27  2.51119e-28  1.16771e-27  4.19418e-29  3.62725e-28  1.68293e-32  3.99882e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.99952, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 630 K
            Well    Collision, 1/sec
              W1         1.14215e+10
      global relaxation matrix dimension = 383
      setting global matrices ... done, cpu time[sec] = 0.294565, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.55146, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            579.654      110.012      30.0001      36.1742      4.11712      448.001       51.385     0.237021
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.58593, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002271, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.61854, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.94655e-07  2.94655e-07  4.95224e-08
      low eigenvalue method done, cpu time[sec] = 1.61997, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.95e-07  4.95e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.48e-08  4.95e-08         1
         *Z       ---       ---  3.71e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.95224e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.72545e-26  6.39463e-27  2.13091e-28  9.75948e-28  3.53582e-29  3.26833e-28  1.69307e-32  3.99902e-46

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.00275, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 640 K
      Energy reference = 34569 1/cm
      Energy step      = 107 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006668
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.375504
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.199147
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.19679
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.995345
         W1 Well: minimal relaxation eigenvalue = 0.0756684
         W1 Well: maximal relaxation eigenvalue = 0.986803
         W1 Well:       grid size = 380
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6091 1/cm
         B1 Barrier:        grid size = 324
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -99 1/cm
         B2 Barrier:        grid size = 322
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 114 1/cm
         B3 Barrier:        grid size = 367
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4700 1/cm
         B4 Barrier:        grid size = 381
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6198 1/cm
         B5 Barrier: nonpositive number of states at -23211 1/cm => truncating
         B5 Barrier:        grid size = 540
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23211 1/cm
         B6 Barrier:        grid size = 310
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1398 1/cm
         B7 Barrier:        grid size = 279
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4715 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16699 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.12246, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 380
      MasterEquation::Barrier::truncate: real weight = 6.82974e+39
      MasterEquation::Barrier::truncate: effective weight = 3.32968e+36
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 380
      MasterEquation::Barrier::truncate: real weight = 1.98877e+38
      MasterEquation::Barrier::truncate: effective weight = 9.68505e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6091  -6091 1.81e+09 1.66e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -99 3.76e+15
         B2    115 7.21e+14
         B3  -4700 1.97e+14
         B4  -6091 2.37e+14
         B5  -6091 2.71e+13
         B6   1399 2.93e+15
         B7   4716 3.39e+14
         B8  16700 1.62e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.36e-10  1.17e-09  2.84e-13  7.76e-15  3.04e-32  3.45e-07    0.0011  3.87e+09
          R  1.57e+09         1      1.84  0.000446  1.22e-05  4.77e-23       543  1.74e+06  6.09e+18
         P1  8.56e+08     0.545         1  0.000243  6.64e-06   2.6e-23       296  9.45e+05  3.32e+18
         P2  3.52e+12  2.24e+03  4.12e+03         1    0.0273  1.07e-19  1.22e+06  3.89e+09  1.36e+22
         P3  1.29e+14  8.21e+04  1.51e+05      36.6         1  3.92e-18  4.45e+07  1.42e+11  4.99e+23
         P4  3.29e+31   2.1e+22  3.85e+22  9.35e+18  2.55e+17         1  1.14e+25  3.64e+28  1.28e+41
         P5   2.9e+06   0.00184   0.00338  8.22e-07  2.25e-08  8.79e-26         1   3.2e+03  1.12e+16
         P6       905  5.76e-07  1.06e-06  2.57e-10  7.02e-12  2.75e-29  0.000313         1  3.51e+12
         P7  2.58e-10  1.64e-19  3.02e-19  7.33e-23     2e-24  7.84e-42  8.91e-17  2.85e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.02e+05  1.88e+05      45.6      1.25  4.87e-18  5.54e+07  1.77e+11  6.22e+23
          R  9.79e-06         1      1.84  0.000446  1.22e-05  4.77e-23       543  1.74e+06  6.09e+18
         P1  5.33e-06     0.545         1  0.000243  6.64e-06   2.6e-23       296  9.45e+05  3.32e+18
         P2     0.022  2.24e+03  4.12e+03         1    0.0273  1.07e-19  1.22e+06  3.89e+09  1.36e+22
         P3     0.803  8.21e+04  1.51e+05      36.6         1  3.92e-18  4.45e+07  1.42e+11  4.99e+23
         P4  2.05e+17   2.1e+22  3.85e+22  9.35e+18  2.55e+17         1  1.14e+25  3.64e+28  1.28e+41
         P5   1.8e-08   0.00184   0.00338  8.22e-07  2.25e-08  8.79e-26         1   3.2e+03  1.12e+16
         P6  5.64e-12  5.76e-07  1.06e-06  2.57e-10  7.02e-12  2.75e-29  0.000313         1  3.51e+12
         P7  1.61e-24  1.64e-19  3.02e-19  7.33e-23     2e-24  7.84e-42  8.91e-17  2.85e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.13639, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         2.82618e+08
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.300173, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.39428, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              23986      4594.48      1257.52      1513.48      172.684      18695.2      2164.01      10.3387
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.76854, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002258, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.80097, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.0495e-06  3.04951e-06  1.24751e-06
      low eigenvalue method done, cpu time[sec] = 1.80204, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.05e-06  1.25e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.7e-07  1.25e-06         1
         *Z       ---       ---   2.9e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.24751e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.6367e-24  9.14066e-25  2.61574e-26  2.02363e-25  5.65639e-27  3.98129e-27  5.56996e-32  2.25006e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 7.02757, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         8.47853e+08
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.290189, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.38562, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7995.35      1531.49      419.173      504.493      57.5612      6231.74      721.337      3.44624
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71685, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00224, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.7488, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.67115e-06  1.67115e-06  5.90417e-07
      low eigenvalue method done, cpu time[sec] = 1.74989, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.67e-06   5.9e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.45e-07   5.9e-07         1
         *Z       ---       ---   2.9e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.90417e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.33921e-24  3.71164e-25  1.03621e-26  6.68149e-26  2.02535e-27  3.63093e-27  5.61275e-32  2.25017e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.94721, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         1.41309e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.287383, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.39018, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4797.21      918.897      251.504      302.696      34.5367      3739.04      432.802      2.06774
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71667, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002244, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.7488, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.22629e-06  1.22629e-06  3.92919e-07
      low eigenvalue method done, cpu time[sec] = 1.74986, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.23e-06  3.93e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-07  3.93e-07         1
         *Z       ---       ---   2.9e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.92919e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.15333e-25  2.28398e-25  6.48564e-27  3.86913e-26  1.21772e-27  3.24008e-27  5.65721e-32   2.2502e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.9523, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         1.97832e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.286289, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.40358, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3426.58      656.355      179.646      216.211      24.6691      2670.74      309.144      1.47696
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70431, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002257, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73684, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.88604e-07  9.88604e-07  2.93894e-07
      low eigenvalue method done, cpu time[sec] = 1.73794, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.89e-07  2.94e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.49e-08  2.94e-07         1
         *Z       ---       ---   2.9e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.93894e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.95384e-25  1.62125e-25  4.68845e-27  2.66359e-26  8.59092e-28  2.91503e-27  5.70223e-32  2.25025e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.95009, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         2.54356e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.285651, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.38526, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2665.12      510.498      139.724      168.164      19.1871      2077.25      240.446      1.14875
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.719, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002262, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.75107, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.36481e-07  8.36481e-07  2.33801e-07
      low eigenvalue method done, cpu time[sec] = 1.75219, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.36e-07  2.34e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.15e-08  2.34e-07         1
         *Z       ---       ---   2.9e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.33801e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.59108e-25  1.24035e-25  3.64691e-27  2.00001e-26  6.56865e-28  2.64828e-27  5.74696e-32  2.25029e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.94691, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         2.82618e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.286357, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.40775, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2398.6      459.448      125.752      151.348      17.2684      1869.52      216.401      1.03387
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71073, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002264, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.74284, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.78658e-07  7.78658e-07  2.11769e-07
      low eigenvalue method done, cpu time[sec] = 1.74438, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.79e-07  2.12e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.65e-08  2.12e-07         1
         *Z       ---       ---   2.9e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.11769e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.08558e-25   1.1053e-25  3.27465e-27  1.77002e-26  5.85731e-28  2.53253e-27  5.76901e-32   2.2503e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96254, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         4.23927e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.288705, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.41442, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1599.07      306.299      83.8346      100.899      11.5122      1246.35      144.267     0.689248
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70305, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002254, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73488, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.85927e-07  5.85927e-07   1.4222e-07
      low eigenvalue method done, cpu time[sec] = 1.73596, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.86e-07  1.42e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.97e-08  1.42e-07         1
         *Z       ---       ---   2.9e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.4222e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.46663e-25  6.97655e-26   2.1348e-27  1.09316e-26  3.72275e-28  2.07946e-27  5.87377e-32  2.25042e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96231, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         5.65236e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.284874, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.41825, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1199.3      229.724       62.876      75.6739      8.63418       934.76      108.201     0.516936
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69691, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002255, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72895, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.74898e-07  4.74898e-07  1.05425e-07
      low eigenvalue method done, cpu time[sec] = 1.73007, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.75e-07  1.05e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.01e-08  1.05e-07         1
         *Z       ---       ---   2.9e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.05425e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.59396e-25  4.95398e-26  1.55476e-27  7.67441e-27  2.66621e-28   1.7641e-27  5.96617e-32  2.25053e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.95739, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         7.06544e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.286854, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.42306, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            959.441      183.779      50.3008      60.5391      6.90734      747.808      86.5604     0.413549
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69104, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002263, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72257, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.01602e-07  4.01602e-07  8.27612e-08
      low eigenvalue method done, cpu time[sec] = 1.72369, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.02e-07  8.28e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.38e-08  8.28e-08         1
         *Z       ---       ---   2.9e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.27612e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.04985e-25   3.7643e-26  1.20608e-27  5.79164e-27  2.04297e-28  1.53081e-27  6.04424e-32  2.25064e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.96053, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         8.47853e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.28753, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.41347, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            799.535      153.149      41.9173      50.4493      5.75612      623.174      72.1337     0.344624
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69582, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002263, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72786, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.49155e-07  3.49155e-07  6.74738e-08
      low eigenvalue method done, cpu time[sec] = 1.72927, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.49e-07  6.75e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.93e-08  6.75e-08         1
         *Z       ---       ---   2.9e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.74738e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.6796e-25  2.99006e-26  9.74859e-28  4.58006e-27  1.63551e-28  1.35063e-27  6.10775e-32  2.25075e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.95516, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         9.89162e+09
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.288402, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.40507, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            685.315      131.271      35.9291      43.2422      4.93382      534.149      61.8289     0.295392
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70453, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002252, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73662, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   3.0956e-07   3.0956e-07  5.65151e-08
      low eigenvalue method done, cpu time[sec] = 1.73796, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.1e-07  5.65e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.59e-08  5.65e-08         1
         *Z       ---       ---   2.9e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.65151e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.4124e-25  2.45097e-26  8.11198e-28  3.74302e-27  1.35034e-28  1.20698e-27  6.15738e-32  2.25086e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.95814, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 640 K
            Well    Collision, 1/sec
              W1         1.13047e+10
      global relaxation matrix dimension = 380
      setting global matrices ... done, cpu time[sec] = 0.285949, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.42214, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            599.651      114.862       31.438       37.837      4.31709       467.38      54.1003     0.258468
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.68928, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002254, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72127, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.78495e-07  2.78495e-07  4.83072e-08
      low eigenvalue method done, cpu time[sec] = 1.72245, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.78e-07  4.83e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.32e-08  4.83e-08         1
         *Z       ---       ---   2.9e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.83072e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.2112e-25  2.05694e-26  6.89824e-28  3.13468e-27  1.14079e-28  1.08963e-27  6.19423e-32  2.25097e-45

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.95513, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 650 K
      Energy reference = 34847 1/cm
      Energy step      = 108 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -86 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006592
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.37068
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.195868
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.203273
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.983369
         W1 Well: minimal relaxation eigenvalue = 0.0752497
         W1 Well: maximal relaxation eigenvalue = 0.98837
         W1 Well:       grid size = 379
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6085 1/cm
         B1 Barrier:        grid size = 323
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -37 1/cm
         B2 Barrier:        grid size = 321
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 178 1/cm
         B3 Barrier:        grid size = 366
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4681 1/cm
         B4 Barrier:        grid size = 380
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6193 1/cm
         B5 Barrier: nonpositive number of states at -23149 1/cm => truncating
         B5 Barrier:        grid size = 537
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23149 1/cm
         B6 Barrier:        grid size = 309
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1474 1/cm
         B7 Barrier:        grid size = 279
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4714 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16703 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.10759, elapsed time[sec] = 0
      B4 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 379
      MasterEquation::Barrier::truncate: real weight = 3.81307e+39
      MasterEquation::Barrier::truncate: effective weight = 1.87635e+36
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 379
      MasterEquation::Barrier::truncate: real weight = 1.1119e+38
      MasterEquation::Barrier::truncate: effective weight = 5.46671e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6085  -6085 1.82e+09 1.74e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -37 4.02e+15
         B2    179 7.78e+14
         B3  -4681 2.14e+14
         B4  -6085 2.57e+14
         B5  -6085 2.93e+13
         B6   1475 3.16e+15
         B7   4715 3.69e+14
         B8  16703 1.83e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.77e-10  8.71e-10   2.5e-13  7.22e-15  5.32e-32  2.46e-07  0.000709  1.66e+09
          R   2.1e+09         1      1.83  0.000524  1.52e-05  1.12e-22       516  1.49e+06  3.47e+18
         P1  1.15e+09     0.547         1  0.000287  8.29e-06  6.11e-23       282  8.14e+05   1.9e+18
         P2     4e+12  1.91e+03  3.49e+03         1    0.0289  2.13e-19  9.85e+05  2.84e+09  6.63e+21
         P3  1.38e+14   6.6e+04  1.21e+05      34.6         1  7.37e-18   3.4e+07  9.81e+10  2.29e+23
         P4  1.88e+31  8.95e+21  1.64e+22  4.69e+18  1.36e+17         1  4.62e+24  1.33e+28  3.11e+40
         P5  4.07e+06   0.00194   0.00354  1.02e-06  2.94e-08  2.17e-25         1  2.88e+03  6.73e+15
         P6  1.41e+03  6.73e-07  1.23e-06  3.52e-10  1.02e-11  7.51e-29  0.000347         1  2.34e+12
         P7  6.04e-10  2.88e-19  5.26e-19  1.51e-22  4.36e-24  3.22e-41  1.49e-16  4.28e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.34e+04   6.1e+04      17.5     0.506  3.73e-18  1.72e+07  4.97e+10  1.16e+23
          R  2.99e-05         1      1.83  0.000524  1.52e-05  1.12e-22       516  1.49e+06  3.47e+18
         P1  1.64e-05     0.547         1  0.000287  8.29e-06  6.11e-23       282  8.14e+05   1.9e+18
         P2    0.0572  1.91e+03  3.49e+03         1    0.0289  2.13e-19  9.85e+05  2.84e+09  6.63e+21
         P3      1.98   6.6e+04  1.21e+05      34.6         1  7.37e-18   3.4e+07  9.81e+10  2.29e+23
         P4  2.68e+17  8.95e+21  1.64e+22  4.69e+18  1.36e+17         1  4.62e+24  1.33e+28  3.11e+40
         P5  5.81e-08   0.00194   0.00354  1.02e-06  2.94e-08  2.17e-25         1  2.88e+03  6.73e+15
         P6  2.01e-11  6.73e-07  1.23e-06  3.52e-10  1.02e-11  7.51e-29  0.000347         1  2.34e+12
         P7  8.62e-24  2.88e-19  5.26e-19  1.51e-22  4.36e-24  3.22e-41  1.49e-16  4.28e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.12114, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         2.79774e+08
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.298, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.35387, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24802.5      4794.76       1317.1      1582.25      180.974      19493.4      2276.89      11.2582
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.8049, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002224, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83707, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.85503e-06  3.85504e-06  1.61246e-06
      low eigenvalue method done, cpu time[sec] = 1.83818, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.86e-06  1.61e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.41e-07  1.61e-06         1
         *Z       ---       ---  1.95e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.61246e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.90567e-24  2.71713e-24  7.77258e-26  5.97813e-25  1.67507e-26  1.23661e-26  1.95365e-31  1.20067e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.99083, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         8.39322e+08
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.266727, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.50097, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8267.52      1598.25      439.033      527.418      60.3248      6497.81      758.964      3.75274
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.60266, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002226, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.63438, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.13328e-06  2.13328e-06  7.71696e-07
      low eigenvalue method done, cpu time[sec] = 1.63551, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.13e-06  7.72e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.86e-07  7.72e-07         1
         *Z       ---       ---  1.95e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.71695e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.05819e-24  1.11459e-24  3.11726e-26  1.99756e-25  6.07297e-27  1.13353e-26  1.96858e-31  1.20079e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.93096, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         1.39887e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.285443, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.38181, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4960.51      958.952       263.42      316.451      36.1949      3898.68      455.378      2.25164
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.72235, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002242, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.75444, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.57226e-06  1.57226e-06  5.16579e-07
      low eigenvalue method done, cpu time[sec] = 1.75558, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.57e-06  5.17e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.36e-07  5.17e-07         1
         *Z       ---       ---  1.95e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.16579e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.78949e-24  6.89592e-25  1.96356e-26  1.16388e-25  3.67474e-27  1.01533e-26  1.98407e-31   1.2008e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.94329, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         1.95842e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.284485, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.38487, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3543.22      684.966      188.157      226.036      25.8535      2784.77       325.27      1.60832
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71793, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002231, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.74956, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.27112e-06  1.27112e-06  3.87976e-07
      low eigenvalue method done, cpu time[sec] = 1.75068, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.27e-06  3.88e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.09e-07  3.88e-07         1
         *Z       ---       ---  1.95e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.87976e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.12765e-24  4.91363e-25  1.42574e-26   8.0466e-26  2.60403e-27  9.16182e-27  1.99974e-31  1.20082e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.93923, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         2.51796e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.285264, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.39055, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2755.84      532.751      146.344      175.806      20.1083      2165.94      252.988      1.25091
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.713, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00224, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.74453, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.07778e-06  1.07778e-06  3.09631e-07
      low eigenvalue method done, cpu time[sec] = 1.74561, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.08e-06   3.1e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.21e-08   3.1e-07         1
         *Z       ---       ---  1.95e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.09631e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.71601e-24  3.77037e-25  1.11282e-26  6.06189e-26  1.99788e-27   8.3439e-27  2.01529e-31  1.20084e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.9418, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         2.79774e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.283879, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.38862, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2480.25      479.476       131.71      158.225      18.0974      1949.34      227.689      1.12582
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71457, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002221, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.74626, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.00415e-06  1.00415e-06  2.80837e-07
      low eigenvalue method done, cpu time[sec] = 1.74735, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     1e-06  2.81e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.57e-08  2.81e-07         1
         *Z       ---       ---  1.95e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.80837e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.56295e-24  3.36413e-25  1.00069e-26  5.37235e-26  1.78414e-27  7.98792e-27  2.02295e-31  1.20085e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.94176, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         4.19661e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.284502, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.39486, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1653.5      319.651      87.8066      105.484       12.065      1299.56      151.793     0.750547
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71061, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002225, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.74242, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.58094e-07  7.58095e-07  1.89628e-07
      low eigenvalue method done, cpu time[sec] = 1.7435, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.58e-07   1.9e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.42e-08   1.9e-07         1
         *Z       ---       ---  1.95e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.89628e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.07105e-24  2.13418e-25  6.56153e-27  3.33645e-26  1.14053e-27  6.58857e-27  2.05932e-31  1.20091e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.94253, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         5.59548e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.284451, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.40313, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1240.13      239.738       65.855      79.1126      9.04872      974.671      113.845     0.562911
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70078, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002228, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.73279, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.15842e-07  6.15842e-07   1.4113e-07
      low eigenvalue method done, cpu time[sec] = 1.73414, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.16e-07  1.41e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.19e-08  1.41e-07         1
         *Z       ---       ---  1.95e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.4113e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.04571e-25  1.52112e-25   4.7991e-27  2.35187e-26  8.20317e-28  5.60899e-27  2.09139e-31  1.20097e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.94517, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         6.99435e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.285065, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.38703, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            992.102       191.79       52.684      63.2901      7.23898      779.737      91.0757     0.450328
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.71591, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002235, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.7483, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.2169e-07  5.21691e-07  1.11142e-07
      low eigenvalue method done, cpu time[sec] = 1.74945, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.22e-07  1.11e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.38e-08  1.11e-07         1
         *Z       ---       ---  1.95e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.11142e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.37784e-25  1.15926e-25  3.73539e-27  1.78061e-26  6.30684e-28  4.88125e-27  2.11851e-31  1.20103e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.94198, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         8.39322e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.28507, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.39923, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            826.752      159.825      43.9033      52.7418      6.03248      649.781      75.8964     0.375274
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.70904, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002227, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.74131, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.54186e-07  4.54186e-07  9.08509e-08
      low eigenvalue method done, cpu time[sec] = 1.74245, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.54e-07  9.09e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.8e-08  9.09e-08         1
         *Z       ---       ---  1.95e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.08509e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.23942e-25  9.23094e-26  3.02773e-27  1.41189e-26  5.06308e-28  4.31728e-27  2.14062e-31  1.20109e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.94658, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1         9.79209e+09
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.285324, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.414, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            708.644      136.993      37.6314      45.2072       5.1707      556.955       65.054     0.321663
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69138, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002234, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72393, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.03139e-07  4.03139e-07  7.62672e-08
      low eigenvalue method done, cpu time[sec] = 1.72506, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.03e-07  7.63e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.37e-08  7.63e-08         1
         *Z       ---       ---  1.95e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.62672e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.4157e-25  7.58264e-26  2.52548e-27   1.1565e-26  4.19025e-28  3.86637e-27  2.15795e-31  1.20114e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.94499, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 650 K
            Well    Collision, 1/sec
              W1          1.1191e+10
      global relaxation matrix dimension = 379
      setting global matrices ... done, cpu time[sec] = 0.285485, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.40975, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            620.064      119.869      32.9275      39.5563      4.52436      487.336      56.9223     0.281455
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.69386, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002217, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.72552, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.63036e-07  3.63036e-07  6.53193e-08
      low eigenvalue method done, cpu time[sec] = 1.72701, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.63e-07  6.53e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.02e-08  6.53e-08         1
         *Z       ---       ---  1.95e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.53193e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.79402e-25  6.37537e-26  2.15211e-27  9.70467e-27   3.5474e-28  3.49707e-27  2.17089e-31   1.2012e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.94369, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 660 K
      Energy reference = 35125 1/cm
      Energy step      = 110 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006728
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.365715
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.19996
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.200795
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.970009
         W1 Well: minimal relaxation eigenvalue = 0.0747695
         W1 Well: maximal relaxation eigenvalue = 0.987717
         W1 Well:       grid size = 376
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6235 1/cm
         B1 Barrier:        grid size = 320
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -75 1/cm
         B2 Barrier:        grid size = 318
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 144 1/cm
         B3 Barrier:        grid size = 362
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4695 1/cm
         B4 Barrier:        grid size = 376
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6235 1/cm
         B5 Barrier: nonpositive number of states at -23175 1/cm => truncating
         B5 Barrier:        grid size = 530
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23175 1/cm
         B6 Barrier:        grid size = 306
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1464 1/cm
         B7 Barrier:        grid size = 277
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4655 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16755 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.0923, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 376
      MasterEquation::Barrier::truncate: real weight = 6.34626e+37
      MasterEquation::Barrier::truncate: effective weight = 3.17892e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6235  -6235 1.73e+09 1.81e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -75  4.3e+15
         B2    145 8.39e+14
         B3  -4695 2.31e+14
         B4  -6235 2.77e+14
         B5  -6235 3.18e+13
         B6   1465 3.41e+15
         B7   4655 4.01e+14
         B8  16755 2.05e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.75e-10  8.64e-10  2.91e-13  8.89e-15  1.21e-31  2.33e-07  0.000608  9.57e+08
          R  2.11e+09         1      1.82  0.000612  1.87e-05  2.55e-22       491  1.28e+06  2.02e+18
         P1  1.16e+09      0.55         1  0.000336  1.03e-05   1.4e-22       270  7.03e+05  1.11e+18
         P2  3.44e+12  1.63e+03  2.97e+03         1    0.0306  4.16e-19  8.02e+05  2.09e+09  3.29e+21
         P3  1.13e+14  5.34e+04  9.72e+04      32.7         1  1.36e-17  2.62e+07  6.84e+10  1.08e+23
         P4  8.26e+30  3.93e+21  7.14e+21   2.4e+18  7.35e+16         1  1.93e+24  5.02e+27  7.91e+39
         P5  4.29e+06   0.00204   0.00371  1.25e-06  3.81e-08  5.19e-25         1  2.61e+03  4.11e+15
         P6  1.65e+03  7.81e-07  1.42e-06  4.78e-10  1.46e-11  1.99e-28  0.000383         1  1.57e+12
         P7  1.04e-09  4.96e-19  9.03e-19  3.04e-22  9.29e-24  1.26e-40  2.44e-16  6.35e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.13e+04  2.05e+04      6.91     0.211  2.88e-18  5.54e+06  1.45e+10  2.28e+22
          R  8.85e-05         1      1.82  0.000612  1.87e-05  2.55e-22       491  1.28e+06  2.02e+18
         P1  4.87e-05      0.55         1  0.000336  1.03e-05   1.4e-22       270  7.03e+05  1.11e+18
         P2     0.145  1.63e+03  2.97e+03         1    0.0306  4.16e-19  8.02e+05  2.09e+09  3.29e+21
         P3      4.73  5.34e+04  9.72e+04      32.7         1  1.36e-17  2.62e+07  6.84e+10  1.08e+23
         P4  3.48e+17  3.93e+21  7.14e+21   2.4e+18  7.35e+16         1  1.93e+24  5.02e+27  7.91e+39
         P5   1.8e-07   0.00204   0.00371  1.25e-06  3.81e-08  5.19e-25         1  2.61e+03  4.11e+15
         P6  6.92e-11  7.81e-07  1.42e-06  4.78e-10  1.46e-11  1.99e-28  0.000383         1  1.57e+12
         P7  4.39e-23  4.96e-19  9.03e-19  3.04e-22  9.29e-24  1.26e-40  2.44e-16  6.35e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.1066, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         2.77003e+08
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.293404, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.26797, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25635.9      5001.41      1378.79      1653.34      189.564      20315.1      2394.15      12.2435
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.8631, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00223, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89497, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.67023e-06  3.67024e-06  1.55375e-06
      low eigenvalue method done, cpu time[sec] = 1.89633, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.67e-06  1.55e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.22e-07  1.55e-06         1
         *Z       ---       ---  1.53e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.55375e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.29151e-23  7.81815e-24   2.2337e-25  1.70858e-24   4.7986e-26   3.7192e-26  6.58132e-31  6.08923e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.97392, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         8.31008e+08
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.283489, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.27632, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8545.29      1667.14      459.597      551.113      63.1881      6771.68       798.05      4.08116
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.79461, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002193, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82629, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.0479e-06   2.0479e-06  7.51572e-07
      low eigenvalue method done, cpu time[sec] = 1.8274, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.05e-06  7.52e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.77e-07  7.52e-07         1
         *Z       ---       ---  1.53e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.51571e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.18844e-23  3.23746e-24  9.06575e-26  5.77506e-25  1.76069e-26  3.42162e-26  6.63117e-31   6.0895e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.90095, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         1.38501e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.283408, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.2964, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5127.18      1000.28      275.758      330.668      37.9129      4063.01       478.83       2.4487
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.78823, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00218, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.81973, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.51498e-06  1.51498e-06  5.05969e-07
      low eigenvalue method done, cpu time[sec] = 1.82083, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.51e-06  5.06e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.3e-07  5.06e-07         1
         *Z       ---       ---  1.53e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.05969e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.21416e-24  2.01335e-24  5.74594e-26  3.38494e-25  1.07202e-26  3.07461e-26  6.68283e-31  6.08968e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.917, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         1.93902e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.284637, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.30334, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3662.27      714.487       196.97      236.191      27.0806      2902.15      342.021      1.74907
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.78044, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00218, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.81184, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.22778e-06  1.22778e-06  3.81525e-07
      low eigenvalue method done, cpu time[sec] = 1.81294, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.23e-06  3.82e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.05e-07  3.82e-07         1
         *Z       ---       ---  1.53e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.81524e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.28968e-24  1.43985e-24  4.19017e-26  2.34992e-25  7.62947e-27  2.78173e-26  6.73502e-31  6.08979e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91685, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         2.49302e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.283432, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.29523, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2848.43      555.712      153.199      183.704      21.0627      2257.23      266.017      1.36039
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.7807, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002171, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.81196, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.04289e-06  1.04289e-06  3.05428e-07
      low eigenvalue method done, cpu time[sec] = 1.81307, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.04e-06  3.05e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.85e-08  3.05e-07         1
         *Z       ---       ---  1.53e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.05428e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.0882e-24    1.108e-24  3.28144e-26    1.776e-25  5.87313e-27   2.5391e-26  6.78679e-31  6.08991e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.9045, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         2.77003e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.283971, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.31051, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2563.59      500.141      137.879      165.334      18.9564      2031.51      239.415      1.22435
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.77618, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002173, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.80785, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.72365e-07  9.72365e-07  2.77394e-07
      low eigenvalue method done, cpu time[sec] = 1.80897, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.72e-07  2.77e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.23e-08  2.77e-07         1
         *Z       ---       ---  1.53e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.77394e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.64039e-24  9.89835e-25  2.95502e-26  1.57614e-25  5.25229e-27  2.43324e-26   6.8123e-31  6.08998e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91956, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         4.15504e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.284302, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.30939, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1709.06      333.427      91.9194      110.223      12.6376      1354.34       159.61     0.816232
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.76306, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002171, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.79466, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.36174e-07  7.36174e-07  1.88296e-07
      low eigenvalue method done, cpu time[sec] = 1.79573, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.36e-07  1.88e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.19e-08  1.88e-07         1
         *Z       ---       ---  1.53e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.88296e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.19649e-24  6.31029e-25  1.94862e-26  9.84179e-26  3.37665e-27  2.01553e-26  6.93337e-31  6.09027e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.90502, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         5.54005e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.284396, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.30934, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1281.79       250.07      68.9396       82.667      9.47822      1015.75      119.708     0.612174
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.77161, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002179, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.80306, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.99204e-07  5.99204e-07  1.40687e-07
      low eigenvalue method done, cpu time[sec] = 1.8042, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.99e-07  1.41e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.01e-08  1.41e-07         1
         *Z       ---       ---  1.53e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.40687e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.41041e-24  4.51395e-25  1.43117e-26  6.96521e-26  2.43874e-27  1.72162e-26  7.04026e-31  6.09057e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.91358, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         6.92507e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.284552, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.31893, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1025.44      200.056      55.1517      66.1336      7.58258      812.602       95.766     0.489739
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.7616, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002173, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.79234, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.08348e-07  5.08348e-07  1.11137e-07
      low eigenvalue method done, cpu time[sec] = 1.79345, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.08e-07  1.11e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.24e-08  1.11e-07         1
         *Z       ---       ---  1.53e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.11137e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.91658e-24  3.45008e-25  1.11764e-26  5.29011e-26  1.88117e-27   1.5024e-26  7.13085e-31  6.09086e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.90997, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         8.31008e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.283778, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.30895, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            854.529      166.714      45.9597      55.1113      6.31881      677.168       79.805     0.408116
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.76614, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002187, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.79747, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.43094e-07  4.43094e-07  9.10818e-08
      low eigenvalue method done, cpu time[sec] = 1.79858, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.43e-07  9.11e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.68e-08  9.11e-08         1
         *Z       ---       ---  1.53e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.10818e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.57848e-24  2.75386e-25  9.08404e-27  4.20568e-26  1.51434e-27  1.33196e-26  7.20497e-31  6.09116e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.90547, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         9.69509e+09
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.284799, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.31924, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            732.454      142.897       39.394      47.2383      5.41613       580.43      68.4043     0.349814
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.76881, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002167, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.80047, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.93679e-07  3.93679e-07  7.66305e-08
      low eigenvalue method done, cpu time[sec] = 1.80158, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.94e-07  7.66e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.26e-08  7.66e-08         1
         *Z       ---       ---  1.53e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.66305e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.33322e-24   2.2668e-25  7.59499e-27  3.45267e-26  1.25622e-27  1.19532e-26  7.26339e-31  6.09145e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.9213, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 660 K
            Well    Collision, 1/sec
              W1         1.10801e+10
      global relaxation matrix dimension = 376
      setting global matrices ... done, cpu time[sec] = 0.285059, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.32942, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            640.897      125.035      34.4698      41.3335      4.73911      507.876      59.8538     0.306087
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.75767, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002172, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.78898, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.54812e-07  3.54812e-07  6.57578e-08
      low eigenvalue method done, cpu time[sec] = 1.79008, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.55e-07  6.58e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.93e-08  6.58e-08         1
         *Z       ---       ---  1.53e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.57578e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.14771e-24  1.90934e-25  6.48549e-27  2.90299e-26  1.06569e-27  1.08314e-26  7.30735e-31  6.09175e-44

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92183, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 670 K
      Energy reference = 35403 1/cm
      Energy step      = 112 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006676
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.365842
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.191152
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.194858
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.940067
         W1 Well: minimal relaxation eigenvalue = 0.0743363
         W1 Well: maximal relaxation eigenvalue = 0.987016
         W1 Well:       grid size = 372
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6261 1/cm
         B1 Barrier:        grid size = 317
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -101 1/cm
         B2 Barrier:        grid size = 315
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 122 1/cm
         B3 Barrier:        grid size = 358
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4693 1/cm
         B4 Barrier:        grid size = 372
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6261 1/cm
         B5 Barrier: nonpositive number of states at -23173 1/cm => truncating
         B5 Barrier:        grid size = 523
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23173 1/cm
         B6 Barrier:        grid size = 303
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1466 1/cm
         B7 Barrier:        grid size = 274
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4714 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16698 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.04708, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 372
      MasterEquation::Barrier::truncate: real weight = 3.69382e+37
      MasterEquation::Barrier::truncate: effective weight = 1.88418e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6261  -6261 1.71e+09 1.89e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -101 4.59e+15
         B2    123 9.04e+14
         B3  -4693  2.5e+14
         B4  -6261 2.99e+14
         B5  -6261 3.44e+13
         B6   1467 3.67e+15
         B7   4715 4.36e+14
         B8  16699 2.31e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.77e-10  6.83e-10  2.68e-13  8.66e-15  2.14e-31  1.76e-07  0.000417  4.48e+08
          R  2.65e+09         1      1.81  0.000712   2.3e-05  5.67e-22       468  1.11e+06  1.19e+18
         P1  1.46e+09     0.552         1  0.000393  1.27e-05  3.13e-22       258  6.11e+05  6.56e+17
         P2  3.73e+12   1.4e+03  2.54e+03         1    0.0323  7.96e-19  6.57e+05  1.55e+09  1.67e+21
         P3  1.16e+14  4.35e+04  7.89e+04        31         1  2.47e-17  2.04e+07  4.82e+10  5.18e+22
         P4  4.68e+30  1.76e+21   3.2e+21  1.26e+18  4.05e+16         1  8.25e+23  1.95e+27   2.1e+39
         P5  5.67e+06   0.00214   0.00388  1.52e-06  4.91e-08  1.21e-24         1  2.37e+03  2.54e+15
         P6   2.4e+03  9.04e-07  1.64e-06  6.44e-10  2.08e-11  5.12e-28  0.000423         1  1.07e+12
         P7  2.23e-09  8.41e-19  1.52e-18  5.99e-22  1.93e-23  4.77e-40  3.93e-16  9.31e-13         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.94e+03  7.15e+03      2.81    0.0906  2.24e-18  1.84e+06  4.36e+09  4.69e+21
          R  0.000254         1      1.81  0.000712   2.3e-05  5.67e-22       468  1.11e+06  1.19e+18
         P1   0.00014     0.552         1  0.000393  1.27e-05  3.13e-22       258  6.11e+05  6.56e+17
         P2     0.356   1.4e+03  2.54e+03         1    0.0323  7.96e-19  6.57e+05  1.55e+09  1.67e+21
         P3        11  4.35e+04  7.89e+04        31         1  2.47e-17  2.04e+07  4.82e+10  5.18e+22
         P4  4.47e+17  1.76e+21   3.2e+21  1.26e+18  4.05e+16         1  8.25e+23  1.95e+27   2.1e+39
         P5  5.42e-07   0.00214   0.00388  1.52e-06  4.91e-08  1.21e-24         1  2.37e+03  2.54e+15
         P6  2.29e-10  9.04e-07  1.64e-06  6.44e-10  2.08e-11  5.12e-28  0.000423         1  1.07e+12
         P7  2.13e-22  8.41e-19  1.52e-18  5.99e-22  1.93e-23  4.77e-40  3.93e-16  9.31e-13         1
   MasterEquation::set:  done, cpu time[sec] = 2.06111, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         2.74301e+08
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.288957, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.12525, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              26486      5214.56      1442.65      1726.79      198.461      21160.5      2515.89      13.2988
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.97212, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002196, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.00288, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   4.3574e-06  4.35741e-06  1.87913e-06
      low eigenvalue method done, cpu time[sec] = 2.00396, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.36e-06  1.88e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.82e-07  1.88e-06         1
         *Z       ---       ---  1.08e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.87913e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.42845e-23  2.17727e-23  6.21392e-25  4.72732e-24  1.33074e-25  1.08222e-25  2.14579e-30  2.94032e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92912, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         8.22904e+08
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.279885, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.14236, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8828.68      1738.19      480.882      575.596      66.1536      7053.49      838.632      4.43292
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.90909, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002148, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.93995, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.45288e-06  2.45288e-06  9.18484e-07
      low eigenvalue method done, cpu time[sec] = 1.94101, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.45e-06  9.18e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.11e-07  9.18e-07         1
         *Z       ---       ---  1.08e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.18483e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.36753e-23  9.09969e-24  2.55157e-25  1.61595e-24  4.94039e-26  9.98902e-26  2.16203e-30  2.94036e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.87024, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         1.37151e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.280269, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.1623, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5297.21      1042.91      288.529      345.358      39.6922      4232.09      503.179      2.65975
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.8903, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002164, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.92113, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.82188e-06  1.82188e-06  6.21775e-07
      low eigenvalue method done, cpu time[sec] = 1.92222, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.82e-06  6.22e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.56e-07  6.22e-07         1
         *Z       ---       ---  1.08e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.21774e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.34012e-23   5.6877e-24  1.62704e-25  9.52704e-25  3.02637e-26  9.00312e-26  2.17882e-30  2.94041e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.86941, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         1.92011e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.277438, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.1634, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3783.72      744.937      206.092      246.684      28.3516      3022.92      359.414      1.89982
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88112, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002144, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91203, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.48039e-06  1.48039e-06  4.70678e-07
      low eigenvalue method done, cpu time[sec] = 1.91314, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.48e-06  4.71e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.26e-07  4.71e-07         1
         *Z       ---       ---  1.08e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.70678e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.79868e-23  4.08216e-24  1.19152e-25  6.64091e-25  2.16298e-26   8.1662e-26  2.19575e-30  2.94047e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85703, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         2.46871e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.276412, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.15159, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2942.89      579.395      160.294      191.865      22.0512      2351.16      279.544      1.47764
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.89411, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002158, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.92511, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.25991e-06  1.25991e-06  3.77945e-07
      low eigenvalue method done, cpu time[sec] = 1.9266, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.26e-06  3.78e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.07e-07  3.78e-07         1
         *Z       ---       ---  1.08e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.77945e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.45941e-23  3.15015e-24  9.36173e-26  5.03482e-25  1.67052e-26  7.47015e-26  2.21253e-30  2.94053e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85676, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         2.74301e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.276038, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.16107, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             2648.6      521.456      144.265      172.679      19.8461      2116.05      251.589      1.32988
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88213, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002163, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91326, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.17567e-06  1.17567e-06  3.43702e-07
      low eigenvalue method done, cpu time[sec] = 1.91437, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.18e-06  3.44e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.93e-08  3.44e-07         1
         *Z       ---       ---  1.08e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.43702e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.33266e-23   2.8176e-24  8.44231e-26  4.47427e-25  1.49603e-26  7.16571e-26  2.22078e-30  2.94056e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85127, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         4.11452e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.275778, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.162, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1765.74      347.637      96.1764      115.119      13.2307       1410.7      167.726     0.886585
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88678, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002163, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91812, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.92851e-07  8.92851e-07  2.34518e-07
      low eigenvalue method done, cpu time[sec] = 1.91987, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.93e-07  2.35e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.49e-08  2.35e-07         1
         *Z       ---       ---  1.08e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.34518e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.22662e-24  1.80492e-24   5.5981e-26  2.80879e-25  9.67143e-27  5.96014e-26  2.25992e-30   2.9407e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85726, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         5.48602e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.27615, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.17148, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1324.3      260.728      72.1323      86.3395      9.92304      1058.02      125.795     0.664939
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.87001, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002151, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90076, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.28295e-07  7.28295e-07  1.75892e-07
      low eigenvalue method done, cpu time[sec] = 1.90187, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.28e-07  1.76e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.08e-08  1.76e-07         1
         *Z       ---       ---  1.08e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.75892e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.98377e-24  1.29573e-24  4.12837e-26  1.99565e-25  7.01365e-27  5.10758e-26  2.29441e-30  2.94084e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85303, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         6.85753e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.275512, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.16838, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1059.44      208.582      57.7058      69.0716      7.93843      846.419      100.636     0.531951
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.8745, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002152, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90535, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.18878e-07  6.18878e-07  1.39371e-07
      low eigenvalue method done, cpu time[sec] = 1.90647, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.19e-07  1.39e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.15e-08  1.39e-07         1
         *Z       ---       ---  1.08e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.39371e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   5.5696e-24  9.93169e-25  3.23446e-26  1.52043e-25  5.42771e-27  4.46924e-26  2.32362e-30  2.94098e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85187, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         8.22904e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.275413, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.15609, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            882.868      173.819      48.0882      57.5596      6.61536      705.349      83.8632     0.443292
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88378, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002144, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91454, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.40145e-07  5.40145e-07  1.14511e-07
      low eigenvalue method done, cpu time[sec] = 1.91566, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   5.4e-07  1.15e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.48e-08  1.15e-07         1
         *Z       ---       ---  1.08e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.14511e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.59855e-24   7.9463e-25  2.63603e-26  1.21188e-25  4.38108e-27   3.9714e-26  2.34753e-30  2.94113e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.84996, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1         9.60054e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.275288, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.17579, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            756.744      148.987      41.2185      49.3368      5.67031      604.585      71.8827     0.379965
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.87575, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002151, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90652, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.80431e-07  4.80431e-07   9.6552e-08
      low eigenvalue method done, cpu time[sec] = 1.90795, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.8e-07  9.66e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.97e-08  9.66e-08         1
         *Z       ---       ---  1.08e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.6552e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.89236e-24  6.55421e-25  2.20904e-26  9.97105e-26  3.64273e-27  3.57119e-26  2.36641e-30  2.94127e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.86071, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 670 K
            Well    Collision, 1/sec
              W1          1.0972e+10
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.274916, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.19041, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            662.151      130.364      36.0661      43.1697      4.96152      529.012      62.8974     0.332469
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.86604, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002148, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89671, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.33401e-07  4.33401e-07  8.30106e-08
      low eigenvalue method done, cpu time[sec] = 1.89783, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.33e-07   8.3e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.57e-08   8.3e-08         1
         *Z       ---       ---  1.08e+27
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.30105e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.35704e-24  5.53051e-25  1.89016e-26  8.39984e-26  3.09647e-27  3.24187e-26  2.38065e-30  2.94141e-43

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.86408, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 680 K
      Energy reference = 35682 1/cm
      Energy step      = 113 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006633
         W1 Well: collisional kernel bandwidth = 54
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.363887
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.189087
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.194071
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.945547
         W1 Well: minimal relaxation eigenvalue = 0.073901
         W1 Well: maximal relaxation eigenvalue = 0.988596
         W1 Well:       grid size = 372
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6353 1/cm
         B1 Barrier:        grid size = 316
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -25 1/cm
         B2 Barrier:        grid size = 314
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 200 1/cm
         B3 Barrier:        grid size = 357
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4658 1/cm
         B4 Barrier:        grid size = 371
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6240 1/cm
         B5 Barrier: nonpositive number of states at -23191 1/cm => truncating
         B5 Barrier:        grid size = 521
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23190 1/cm
         B6 Barrier:        grid size = 303
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1443 1/cm
         B7 Barrier:        grid size = 275
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4607 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16698 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.047, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 372
      MasterEquation::Barrier::truncate: real weight = 2.19497e+37
      MasterEquation::Barrier::truncate: effective weight = 1.12978e+34
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6353  -6353 1.66e+09 1.98e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -25  4.9e+15
         B2    201 9.74e+14
         B3  -4658 2.71e+14
         B4  -6240 3.23e+14
         B5  -6353 3.72e+13
         B6   1444 3.95e+15
         B7   4608 4.74e+14
         B8  16699 2.59e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.42e-10  6.18e-10  2.82e-13  9.59e-15  4.22e-31  1.53e-07  0.000329  2.44e+08
          R  2.92e+09         1       1.8  0.000825   2.8e-05  1.23e-21       446   9.6e+05  7.12e+17
         P1  1.62e+09     0.554         1  0.000457  1.55e-05  6.83e-22       247  5.32e+05  3.95e+17
         P2  3.54e+12  1.21e+03  2.19e+03         1     0.034  1.49e-18  5.41e+05  1.16e+09  8.64e+20
         P3  1.04e+14  3.57e+04  6.44e+04      29.4         1   4.4e-17  1.59e+07  3.43e+10  2.54e+22
         P4  2.37e+30  8.11e+20  1.46e+21  6.69e+17  2.27e+16         1  3.62e+23  7.79e+26  5.78e+38
         P5  6.55e+06   0.00224   0.00405  1.85e-06  6.28e-08  2.76e-24         1  2.15e+03   1.6e+15
         P6  3.04e+03  1.04e-06  1.88e-06  8.59e-10  2.92e-11  1.28e-27  0.000464         1  7.42e+11
         P7   4.1e-09   1.4e-18  2.53e-18  1.16e-21  3.93e-23  1.73e-39  6.26e-16  1.35e-12         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.42e+03  2.56e+03      1.17    0.0398  1.75e-18  6.34e+05  1.36e+09  1.01e+21
          R  0.000704         1       1.8  0.000825   2.8e-05  1.23e-21       446   9.6e+05  7.12e+17
         P1   0.00039     0.554         1  0.000457  1.55e-05  6.83e-22       247  5.32e+05  3.95e+17
         P2     0.853  1.21e+03  2.19e+03         1     0.034  1.49e-18  5.41e+05  1.16e+09  8.64e+20
         P3      25.1  3.57e+04  6.44e+04      29.4         1   4.4e-17  1.59e+07  3.43e+10  2.54e+22
         P4  5.71e+17  8.11e+20  1.46e+21  6.69e+17  2.27e+16         1  3.62e+23  7.79e+26  5.78e+38
         P5  1.58e-06   0.00224   0.00405  1.85e-06  6.28e-08  2.76e-24         1  2.15e+03   1.6e+15
         P6  7.33e-10  1.04e-06  1.88e-06  8.59e-10  2.92e-11  1.28e-27  0.000464         1  7.42e+11
         P7  9.88e-22   1.4e-18  2.53e-18  1.16e-21  3.93e-23  1.73e-39  6.26e-16  1.35e-12         1
   MasterEquation::set:  done, cpu time[sec] = 2.06017, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         2.71667e+08
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.288036, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.14638, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27355.4      5434.97       1508.9      1802.87      207.697      22032.4      2642.61      14.4312
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.95094, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002154, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.98186, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.58323e-06  4.58324e-06  2.00434e-06
      low eigenvalue method done, cpu time[sec] = 1.98297, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.58e-06     2e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     4e-07     2e-06         1
         *Z       ---       ---  8.17e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.00434e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.74754e-22  5.87318e-23  1.67546e-24  1.26779e-23    3.577e-25  3.05174e-25  6.74099e-30   1.3553e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.92596, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1            8.15e+08
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.279251, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.15937, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9118.46      1811.66      502.967      600.956      69.2325      7344.14       880.87      4.81041
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.89237, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002142, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.92295, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.60136e-06  2.60136e-06   9.8976e-07
      low eigenvalue method done, cpu time[sec] = 1.92405, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.6e-06   9.9e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.23e-07   9.9e-07         1
         *Z       ---       ---  8.17e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.89759e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.24435e-23  2.47742e-23  6.95879e-25  4.38184e-24  1.34334e-25  2.82517e-25  6.79173e-30   1.3553e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.86725, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         1.35833e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.279744, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.16178, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5471.07      1086.99       301.78      360.574      41.5395      4406.48      528.522      2.88624
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.8928, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002169, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.92355, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.93943e-06  1.93943e-06  6.73671e-07
      low eigenvalue method done, cpu time[sec] = 1.92462, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.94e-06  6.74e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.65e-07  6.74e-07         1
         *Z       ---       ---  8.17e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.73671e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.45778e-23  1.55626e-23  4.46372e-25   2.5982e-24  8.27815e-26  2.55349e-25  6.84414e-30  1.35532e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.86827, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         1.90167e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.276849, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.17206, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3907.91      776.425      215.557      257.553      29.6711      3147.49      377.516       2.0616
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.87811, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002155, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.90877, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.57977e-06  1.57977e-06  5.11911e-07
      low eigenvalue method done, cpu time[sec] = 1.90985, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.58e-06  5.12e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.34e-07  5.12e-07         1
         *Z       ---       ---  8.17e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.11911e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.98204e-23  1.12091e-23  3.28242e-25  1.81833e-24  5.94105e-26  2.32166e-25  6.89692e-30  1.35535e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85937, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1           2.445e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.277743, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.16057, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3039.49      603.886      167.656      200.319      23.0775      2448.05      293.623      1.60347
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.8889, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002154, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91985, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.34694e-06  1.34695e-06  4.12276e-07
      low eigenvalue method done, cpu time[sec] = 1.92097, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.35e-06  4.12e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.13e-07  4.12e-07         1
         *Z       ---       ---  8.17e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.12276e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.05404e-23  8.67391e-24  2.58725e-25  1.38283e-24  4.60316e-26  2.12814e-25  6.94916e-30  1.35537e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85906, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         2.71667e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.275855, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.17205, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2735.54      543.497       150.89      180.287      20.7697      2203.24      264.261      1.44312
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.87651, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002148, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.9074, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.25783e-06  1.25783e-06  3.75401e-07
      low eigenvalue method done, cpu time[sec] = 1.90849, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.26e-06  3.75e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-07  3.75e-07         1
         *Z       ---       ---  8.17e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.75401e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.70657e-23  7.76747e-24  2.33636e-25   1.2305e-24  4.12801e-26  2.04331e-25  6.97485e-30  1.35539e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85421, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1           4.075e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.276751, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.15444, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1823.69      362.332      100.593      120.191      13.8465      1468.83      176.174     0.962081
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.8843, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002162, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91465, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.58014e-07  9.58014e-07  2.57448e-07
      low eigenvalue method done, cpu time[sec] = 1.91574, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.58e-07  2.57e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     8e-08  2.57e-07         1
         *Z       ---       ---  8.17e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.57448e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.57897e-23   4.9994e-24  1.55768e-25  7.76517e-25  2.68321e-26  1.70625e-25  7.09654e-30  1.35545e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.84584, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         5.43333e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.277431, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.17045, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1367.77      271.749      75.4451      90.1434      10.3849      1101.62       132.13     0.721561
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88206, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002144, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.91298, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.83022e-07  7.83022e-07  1.93814e-07
      low eigenvalue method done, cpu time[sec] = 1.91407, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.83e-07  1.94e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.5e-08  1.94e-07         1
         *Z       ---       ---  8.17e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.93814e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.95924e-23  3.60165e-24  1.15333e-25  5.53841e-25  1.95365e-26  1.46675e-25  7.20378e-30  1.35552e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.86224, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         6.79166e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.276623, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.19215, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1094.21      217.399      60.3561      72.1147       8.3079      881.296      105.704     0.577249
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.86086, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002156, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89169, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.66403e-07  6.66403e-07   1.5403e-07
      low eigenvalue method done, cpu time[sec] = 1.89283, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.66e-07  1.54e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.51e-08  1.54e-07         1
         *Z       ---       ---  8.17e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.5403e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.56708e-23  2.76839e-24  9.06486e-26  4.23248e-25   1.5167e-26  1.28678e-25  7.29469e-30  1.35558e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.86658, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1            8.15e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.275312, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.19497, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            911.846      181.166      50.2967      60.0956      6.92325      734.414       88.087     0.481041
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.85671, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002162, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.88752, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.82339e-07  5.82339e-07   1.2687e-07
      low eigenvalue method done, cpu time[sec] = 1.88864, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.82e-07  1.27e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.8e-08  1.27e-07         1
         *Z       ---       ---  8.17e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.2687e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.29702e-23  2.22016e-24  7.40729e-26  3.38215e-25  1.22748e-26  1.14599e-25  7.36924e-30  1.35565e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.86073, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         9.50833e+09
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.275496, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.18541, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            781.582      155.285      43.1115      51.5105      5.93421      629.497      75.5031     0.412321
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.86645, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002152, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89752, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.18489e-07  5.18489e-07  1.07201e-07
      low eigenvalue method done, cpu time[sec] = 1.8986, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.18e-07  1.07e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.26e-08  1.07e-07         1
         *Z       ---       ---  8.17e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.07201e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.10015e-23   1.8349e-24  6.22154e-26   2.7888e-25  1.02292e-26  1.03252e-25  7.42827e-30  1.35571e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.86562, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 680 K
            Well    Collision, 1/sec
              W1         1.08667e+10
      global relaxation matrix dimension = 372
      setting global matrices ... done, cpu time[sec] = 0.278957, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.18331, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            683.884      135.874      37.7225      45.0717      5.19244       550.81      66.0652      0.36078
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.86316, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002152, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.89404, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.68141e-07  4.68141e-07   9.2338e-08
      low eigenvalue method done, cpu time[sec] = 1.89517, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.68e-07  9.23e-08         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.84e-08  9.23e-08         1
         *Z       ---       ---  8.17e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.2338e-08
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.50587e-24  1.55103e-24  5.33404e-26  2.35382e-25  8.71254e-27  9.38939e-26  7.47304e-30  1.35578e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85961, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 690 K
      Energy reference = 35960 1/cm
      Energy step      = 115 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007023
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.35319
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.184341
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.196229
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.912641
         W1 Well: minimal relaxation eigenvalue = 0.0734857
         W1 Well: maximal relaxation eigenvalue = 0.987897
         W1 Well:       grid size = 368
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6359 1/cm
         B1 Barrier:        grid size = 313
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -35 1/cm
         B2 Barrier:        grid size = 311
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 194 1/cm
         B3 Barrier:        grid size = 353
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4635 1/cm
         B4 Barrier:        grid size = 367
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6245 1/cm
         B5 Barrier: nonpositive number of states at -23265 1/cm => truncating
         B5 Barrier:        grid size = 515
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23264 1/cm
         B6 Barrier:        grid size = 300
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1460 1/cm
         B7 Barrier:        grid size = 272
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4679 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16755 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 2.00504, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 368
      MasterEquation::Barrier::truncate: real weight = 1.32472e+37
      MasterEquation::Barrier::truncate: effective weight = 6.93964e+33
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6359  -6359 1.66e+09 2.07e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -35 5.23e+15
         B2    195 1.05e+15
         B3  -4635 2.92e+14
         B4  -6245 3.49e+14
         B5  -6359 4.03e+13
         B6   1461 4.25e+15
         B7   4680 5.14e+14
         B8  16755  2.9e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.64e-10  4.76e-10  2.51e-13  8.98e-15  6.93e-31  1.13e-07  0.000221  1.15e+08
          R  3.78e+09         1       1.8  0.000951   3.4e-05  2.62e-21       426  8.37e+05  4.33e+17
         P1   2.1e+09     0.556         1  0.000529  1.89e-05  1.46e-21       237  4.65e+05  2.41e+17
         P2  3.98e+12  1.05e+03  1.89e+03         1    0.0357  2.76e-18  4.48e+05   8.8e+08  4.56e+20
         P3  1.11e+14  2.94e+04  5.29e+04        28         1  7.71e-17  1.25e+07  2.46e+10  1.28e+22
         P4  1.44e+30  3.82e+20  6.86e+20  3.63e+17   1.3e+16         1  1.63e+23  3.19e+26  1.65e+38
         P5  8.88e+06   0.00235   0.00422  2.23e-06  7.98e-08  6.15e-24         1  1.96e+03  1.02e+15
         P6  4.52e+03  1.19e-06  2.15e-06  1.14e-09  4.06e-11  3.13e-27  0.000509         1  5.18e+11
         P7  8.73e-09  2.31e-18  4.15e-18  2.19e-21  7.84e-23  6.05e-39  9.83e-16  1.93e-12         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1       527       948     0.501    0.0179  1.38e-18  2.25e+05  4.41e+08  2.28e+20
          R    0.0019         1       1.8  0.000951   3.4e-05  2.62e-21       426  8.37e+05  4.33e+17
         P1   0.00105     0.556         1  0.000529  1.89e-05  1.46e-21       237  4.65e+05  2.41e+17
         P2      1.99  1.05e+03  1.89e+03         1    0.0357  2.76e-18  4.48e+05   8.8e+08  4.56e+20
         P3      55.8  2.94e+04  5.29e+04        28         1  7.71e-17  1.25e+07  2.46e+10  1.28e+22
         P4  7.24e+17  3.82e+20  6.86e+20  3.63e+17   1.3e+16         1  1.63e+23  3.19e+26  1.65e+38
         P5  4.45e-06   0.00235   0.00422  2.23e-06  7.98e-08  6.15e-24         1  1.96e+03  1.02e+15
         P6  2.27e-09  1.19e-06  2.15e-06  1.14e-09  4.06e-11  3.13e-27  0.000509         1  5.18e+11
         P7  4.38e-21  2.31e-18  4.15e-18  2.19e-21  7.84e-23  6.05e-39  9.83e-16  1.93e-12         1
   MasterEquation::set:  done, cpu time[sec] = 2.0193, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         2.69096e+08
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.28238, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.05476, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            28239.6      5661.55      1577.24       1881.2      217.229      22926.5      2773.67      15.6364
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01704, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002083, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.04761, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.58791e-06  5.58792e-06  2.48937e-06
      low eigenvalue method done, cpu time[sec] = 2.04867, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.59e-06  2.49e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.88e-07  2.49e-06         1
         *Z       ---       ---  5.76e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.48936e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.6113e-22  1.53825e-22  4.38606e-24  3.30146e-23  9.33574e-25  8.33291e-25  2.04349e-29  5.97493e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.87948, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         8.07288e+08
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.27373, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.03876, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9413.19      1887.18      525.746      627.068      72.4098      7642.16      924.556      5.21215
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.97114, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002061, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.00132, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.19889e-06  3.19889e-06  1.24164e-06
      low eigenvalue method done, cpu time[sec] = 2.00282, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.2e-06  1.24e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.74e-07  1.24e-06         1
         *Z       ---       ---  5.76e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.24164e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.46281e-22  6.54748e-23  1.84217e-24  1.15349e-23  3.54582e-25  7.74069e-25  2.05873e-29  5.97511e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.8056, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         1.34548e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.273992, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.04349, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5647.91      1132.31      315.447      376.241      43.4459       4585.3      554.734      3.12729
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.96797, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002102, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.99832, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.39434e-06  2.39434e-06  8.49618e-07
      low eigenvalue method done, cpu time[sec] = 1.99942, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.39e-06   8.5e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.04e-07   8.5e-07         1
         *Z       ---       ---  5.76e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.49617e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.72931e-22  4.13318e-23  1.18856e-24  6.87818e-24  2.19787e-25  7.01728e-25  2.07444e-29  5.97522e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.80648, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         1.88367e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.274334, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.0718, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4034.22      808.793       225.32      268.743      31.0328      3275.21      396.238      2.23378
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.94768, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002068, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.97802, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.95537e-06  1.95537e-06  6.48028e-07
      low eigenvalue method done, cpu time[sec] = 1.9791, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.96e-06  6.48e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.65e-07  6.48e-07         1
         *Z       ---       ---  5.76e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.48027e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.33899e-22  2.98733e-23  8.77565e-25  4.83252e-24   1.5838e-25  6.39602e-25  2.09026e-29  5.97535e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.81838, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         2.42186e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.271965, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.05637, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3137.73      629.061      175.249      209.023      24.1366      2547.39      308.185      1.73738
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.95321, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002066, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.9841, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.6704e-06   1.6704e-06  5.23421e-07
      low eigenvalue method done, cpu time[sec] = 1.98523, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.67e-06  5.23e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.41e-07  5.23e-07         1
         *Z       ---       ---  5.76e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.23421e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.09267e-22  2.31796e-23  6.93888e-25  3.68629e-24  1.23101e-25  5.87528e-25   2.1059e-29  5.97545e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.80746, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         2.69096e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.272794, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.0598, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2823.96      566.155      157.724       188.12      21.7229      2292.65      277.367      1.56364
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.94669, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002067, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.97696, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.56115e-06  1.56115e-06  4.77202e-07
      low eigenvalue method done, cpu time[sec] = 1.97841, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.56e-06  4.77e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.31e-07  4.77e-07         1
         *Z       ---       ---  5.76e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.77201e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.00024e-22  2.07816e-23  6.27444e-25  3.28448e-24  1.10544e-25  5.64643e-25   2.1136e-29  5.97552e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.80459, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         4.03644e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.271727, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.05028, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1882.64      377.437      105.149      125.414       14.482      1528.43      184.911      1.04243
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.95855, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002069, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.98859, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.19269e-06  1.19269e-06  3.28893e-07
      low eigenvalue method done, cpu time[sec] = 1.9897, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.19e-06  3.29e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.94e-08  3.29e-07         1
         *Z       ---       ---  5.76e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.28893e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.99343e-23  1.34383e-23  4.20566e-25   2.0834e-24  7.22392e-26   4.7338e-25  2.15005e-29   5.9758e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.80487, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         5.38192e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.273331, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.09211, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1411.98      283.078      78.8618      94.0601      10.8615      1146.32      138.683     0.781822
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.92894, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002064, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.9593, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.76927e-07  9.76927e-07  2.48511e-07
      low eigenvalue method done, cpu time[sec] = 1.96044, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.77e-07  2.49e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   8.1e-08  2.49e-07         1
         *Z       ---       ---  5.76e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.48511e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.33206e-23  9.71468e-24  3.12622e-25   1.4916e-24   5.2805e-26   4.0821e-25  2.18221e-29  5.97609e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.81962, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1          6.7274e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.274453, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.07248, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1129.58      226.462      63.0895      75.2481      8.68918       917.06      110.947     0.625458
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.94606, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002068, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.97639, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.32794e-07  8.32794e-07   1.9808e-07
      low eigenvalue method done, cpu time[sec] = 1.97745, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.33e-07  1.98e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.88e-08  1.98e-07         1
         *Z       ---       ---  5.76e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.9808e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.2771e-23  7.48779e-24  2.46482e-25  1.14333e-24  4.11234e-26   3.5905e-25  2.20955e-29  5.97637e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.82256, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         8.07288e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.27332, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.06578, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            941.319      188.718      52.5746      62.7068      7.24098      764.216      92.4556     0.521215
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.95361, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002065, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.98385, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.28702e-07  7.28702e-07  1.63551e-07
      low eigenvalue method done, cpu time[sec] = 1.98523, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.29e-07  1.64e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     6e-08  1.64e-07         1
         *Z       ---       ---  5.76e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.63551e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.54852e-23  6.01881e-24  2.01936e-25  9.15915e-25  3.33682e-26  3.20475e-25  2.23204e-29  5.97666e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.8142, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         9.41836e+09
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.272153, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.08797, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            806.845      161.759      45.0639      53.7486      6.20656      655.043      79.2477     0.446755
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.93419, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002075, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.96437, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.49519e-07  6.49519e-07  1.38485e-07
      low eigenvalue method done, cpu time[sec] = 1.96548, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.5e-07  1.38e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.33e-08  1.38e-07         1
         *Z       ---       ---  5.76e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.38485e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.01609e-23  4.98421e-24   1.6999e-25  7.56852e-25  2.78698e-26  2.89304e-25  2.24994e-29  5.97694e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.8192, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 690 K
            Well    Collision, 1/sec
              W1         1.07638e+10
      global relaxation matrix dimension = 368
      setting global matrices ... done, cpu time[sec] = 0.272335, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.0698, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            705.989      141.539      39.4309      47.0301      5.43074      573.162      69.3417     0.390911
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.94739, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002056, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.97761, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.86997e-07  5.86997e-07  1.19504e-07
      low eigenvalue method done, cpu time[sec] = 1.9787, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.87e-07   1.2e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.81e-08   1.2e-07         1
         *Z       ---       ---  5.76e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.19504e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.61078e-23  4.22044e-24  1.46026e-25  6.40003e-25  2.37839e-26  2.63539e-25  2.26362e-29  5.97723e-42

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.81376, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 700 K
      Energy reference = 36238 1/cm
      Energy step      = 117 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -85.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007191
         W1 Well: collisional kernel bandwidth = 53
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.349463
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.186469
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.185446
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.897326
         W1 Well: minimal relaxation eigenvalue = 0.073041
         W1 Well: maximal relaxation eigenvalue = 0.987293
         W1 Well:       grid size = 365
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -6467 1/cm
         B1 Barrier:        grid size = 310
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -31 1/cm
         B2 Barrier:        grid size = 308
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 201 1/cm
         B3 Barrier:        grid size = 350
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4711 1/cm
         B4 Barrier:        grid size = 363
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6232 1/cm
         B5 Barrier: nonpositive number of states at -23315 1/cm => truncating
         B5 Barrier:        grid size = 509
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23314 1/cm
         B6 Barrier:        grid size = 297
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1489 1/cm
         B7 Barrier:        grid size = 270
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4648 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16699 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.97296, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 365
      MasterEquation::Barrier::truncate: real weight = 8.13069e+36
      MasterEquation::Barrier::truncate: effective weight = 4.33371e+33
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -6467  -6467  1.6e+09 2.16e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -31 5.58e+15
         B2    202 1.13e+15
         B3  -4711 3.16e+14
         B4  -6232 3.76e+14
         B5  -6467 4.35e+13
         B6   1490 4.57e+15
         B7   4648 5.58e+14
         B8  16700 3.24e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.44e-10  4.38e-10  2.67e-13     1e-14  1.33e-30  9.96e-08  0.000179  6.54e+07
          R  4.09e+09         1      1.79   0.00109   4.1e-05  5.45e-21       407  7.32e+05  2.67e+17
         P1  2.28e+09     0.558         1  0.000609  2.29e-05  3.04e-21       227  4.08e+05  1.49e+17
         P2  3.75e+12       916  1.64e+03         1    0.0375  4.99e-18  3.73e+05  6.71e+08  2.45e+20
         P3  9.98e+13  2.44e+04  4.37e+04      26.6         1  1.33e-16  9.94e+06  1.79e+10  6.53e+21
         P4  7.51e+29  1.83e+20  3.29e+20     2e+17  7.52e+15         1  7.47e+22  1.34e+26  4.91e+37
         P5     1e+07   0.00246    0.0044  2.68e-06  1.01e-07  1.34e-23         1   1.8e+03  6.56e+14
         P6  5.59e+03  1.37e-06  2.45e-06  1.49e-09   5.6e-11  7.44e-27  0.000556         1  3.65e+11
         P7  1.53e-08  3.74e-18   6.7e-18  4.08e-21  1.53e-22  2.04e-38  1.52e-15  2.74e-12         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1       201       361      0.22   0.00825   1.1e-18   8.2e+04  1.47e+08  5.38e+19
          R   0.00497         1      1.79   0.00109   4.1e-05  5.45e-21       407  7.32e+05  2.67e+17
         P1   0.00277     0.558         1  0.000609  2.29e-05  3.04e-21       227  4.08e+05  1.49e+17
         P2      4.55       916  1.64e+03         1    0.0375  4.99e-18  3.73e+05  6.71e+08  2.45e+20
         P3       121  2.44e+04  4.37e+04      26.6         1  1.33e-16  9.94e+06  1.79e+10  6.53e+21
         P4  9.12e+17  1.83e+20  3.29e+20     2e+17  7.52e+15         1  7.47e+22  1.34e+26  4.91e+37
         P5  1.22e-05   0.00246    0.0044  2.68e-06  1.01e-07  1.34e-23         1   1.8e+03  6.56e+14
         P6  6.79e-09  1.37e-06  2.45e-06  1.49e-09   5.6e-11  7.44e-27  0.000556         1  3.65e+11
         P7  1.86e-20  3.74e-18   6.7e-18  4.08e-21  1.53e-22  2.04e-38  1.52e-15  2.74e-12         1
   MasterEquation::set:  done, cpu time[sec] = 1.98721, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         2.66587e+08
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.277782, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.97828, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            29140.8      5895.03      1647.88      1962.05       227.09      23845.4      2909.55      16.9211
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.07788, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00204, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.10769, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.73279e-06   5.7328e-06  2.58427e-06
      low eigenvalue method done, cpu time[sec] = 2.10878, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.73e-06  2.58e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.97e-07  2.58e-06         1
         *Z       ---       ---  4.47e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.58426e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.18258e-21  3.91692e-22  1.11619e-23  8.35917e-23  2.36893e-24   2.2182e-24  6.01091e-29  2.52347e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.85384, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         7.99762e+08
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.26917, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.97422, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9713.61      1965.01      549.295      654.018      75.6966      7948.46      969.849      5.64037
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02802, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002028, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.05776, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.30705e-06  3.30706e-06  1.30155e-06
      low eigenvalue method done, cpu time[sec] = 2.05886, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.31e-06   1.3e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.82e-07   1.3e-06         1
         *Z       ---       ---  4.47e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.30155e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.37498e-22   1.6818e-22   4.7394e-24  2.95149e-23  9.09673e-25  2.06396e-24  6.05548e-29  2.52353e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78599, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         1.33294e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.268183, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.9999, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5828.17      1179.01      329.577      392.411       45.418      4769.08       581.91      3.38422
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00695, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002022, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.03658, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.48404e-06  2.48405e-06  8.95239e-07
      low eigenvalue method done, cpu time[sec] = 2.0377, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.48e-06  8.95e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.1e-07  8.95e-07         1
         *Z       ---       ---  4.47e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.95238e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.49883e-22  1.06672e-22  3.07523e-24  1.76962e-23  5.67084e-25   1.8753e-24  6.10138e-29  2.52358e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78724, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         1.86611e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.268258, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.9932, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4162.98      842.147      235.412      280.293      32.4414      3406.48       415.65       2.4173
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00695, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002013, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.03665, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.03335e-06  2.03335e-06  6.85316e-07
      low eigenvalue method done, cpu time[sec] = 2.03775, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.03e-06  6.85e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.71e-07  6.85e-07         1
         *Z       ---       ---  4.47e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.85316e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.49577e-22  7.73605e-23  2.27959e-24  1.24808e-23  4.10271e-25  1.71281e-24  6.14752e-29  2.52362e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78343, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         2.39928e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.273868, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.97972, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3237.87      655.003      183.098      218.006      25.2322      2649.49      323.283      1.88012
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.02017, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.002003, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.04994, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.74002e-06  1.74002e-06  5.55114e-07
      low eigenvalue method done, cpu time[sec] = 2.05104, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.74e-06  5.55e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.46e-07  5.55e-07         1
         *Z       ---       ---  4.47e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.55114e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.86062e-22  6.01856e-23  1.80801e-24   9.5487e-24  3.19869e-25  1.57625e-24  6.19312e-29  2.52368e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78761, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         2.66587e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.276616, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.98246, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2914.08      589.503      164.788      196.205       22.709      2384.54      290.955      1.69211
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.01524, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002009, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.04537, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.62738e-06  1.62738e-06  5.06714e-07
      low eigenvalue method done, cpu time[sec] = 2.04662, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.63e-06  5.07e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.36e-07  5.07e-07         1
         *Z       ---       ---  4.47e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.06714e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  2.62175e-22  5.40208e-23  1.63704e-24   8.5187e-24  2.87619e-25  1.51613e-24  6.21553e-29   2.5237e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.76875, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         3.99881e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.256592, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.98473, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1942.72      393.002      109.859      130.804      15.1393      1589.69       193.97      1.12807
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.99861, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002012, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.02826, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.24673e-06  1.24673e-06  3.50934e-07
      low eigenvalue method done, cpu time[sec] = 2.02934, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.25e-06  3.51e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.03e-07  3.51e-07         1
         *Z       ---       ---  4.47e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.50934e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   1.8418e-22  3.50917e-23  1.10303e-24  5.43087e-24  1.88942e-25  1.27569e-24  6.32165e-29  2.52382e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.75401, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         5.33174e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.273819, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.99821, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1457.04      294.751      82.3942      98.1027      11.3545      1192.27      145.477     0.846056
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00079, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002002, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.03044, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.02317e-06  1.02317e-06   2.6612e-07
      low eigenvalue method done, cpu time[sec] = 2.0315, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.02e-06  2.66e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.44e-08  2.66e-07         1
         *Z       ---       ---  4.47e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.6612e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.40922e-22  2.54542e-23  8.23086e-25  3.90267e-24  1.38646e-25  1.10327e-24  6.41529e-29  2.52394e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79143, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         6.66468e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.269951, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.00667, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1165.63      235.801      65.9154      78.4821      9.08359      953.815      116.382     0.676845
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00008, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002024, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.02993, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.73508e-07  8.73508e-07  2.12724e-07
      low eigenvalue method done, cpu time[sec] = 2.03099, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.74e-07  2.13e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.17e-08  2.13e-07         1
         *Z       ---       ---  4.47e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.12724e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.13359e-22  1.96725e-23  6.50942e-25  3.00028e-24  1.08306e-25  9.72779e-25  6.49495e-29  2.52406e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.79186, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         7.99762e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.270559, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.99736, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            971.361      196.501      54.9295      65.4018      7.56966      794.846      96.9849     0.564037
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 2.00398, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.00202, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.0338, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.65238e-07  7.65238e-07  1.76063e-07
      low eigenvalue method done, cpu time[sec] = 2.03486, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.65e-07  1.76e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.26e-08  1.76e-07         1
         *Z       ---       ---  4.47e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.76063e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  9.42699e-23  1.58488e-23  5.34664e-25  2.40943e-24  8.81064e-26  8.70097e-25  6.56062e-29  2.52418e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.78621, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         9.33055e+09
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.268177, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.00144, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            832.595      168.429      47.0824      56.0587      6.48828      681.296      83.1299      0.48346
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.99678, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002022, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.02684, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.82762e-07  6.82762e-07  1.49386e-07
      low eigenvalue method done, cpu time[sec] = 2.02793, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.83e-07  1.49e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.57e-08  1.49e-07         1
         *Z       ---       ---  4.47e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.49386e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  8.02875e-23    1.315e-23  4.51068e-25  1.99519e-24  7.37496e-26  7.86924e-25  6.61307e-29   2.5243e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.77714, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 700 K
            Well    Collision, 1/sec
              W1         1.06635e+10
      global relaxation matrix dimension = 365
      setting global matrices ... done, cpu time[sec] = 0.265938, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 4.01706, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            728.521      147.376      41.1971      49.0513      5.67724      596.134      72.7387     0.423028
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.98245, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.002012, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.01213, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.17564e-07  6.17564e-07  1.29144e-07
      low eigenvalue method done, cpu time[sec] = 2.01324, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.18e-07  1.29e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.03e-08  1.29e-07         1
         *Z       ---       ---  4.47e+26
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.29144e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  6.96217e-23  1.11539e-23  3.88227e-25  1.69027e-24  6.30586e-26  7.18031e-25  6.65334e-29  2.52442e-41

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.77618, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 800 K
      Energy reference = 39018 1/cm
      Energy step      = 133 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -84.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007632
         W1 Well: collisional kernel bandwidth = 52
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.323927
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.162005
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.184722
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.792397
         W1 Well: minimal relaxation eigenvalue = 0.0690413
         W1 Well: maximal relaxation eigenvalue = 0.989752
         W1 Well:       grid size = 347
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -7132 1/cm
         B1 Barrier:        grid size = 294
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -84 1/cm
         B2 Barrier:        grid size = 292
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 182 1/cm
         B3 Barrier:        grid size = 328
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4606 1/cm
         B4 Barrier:        grid size = 340
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6202 1/cm
         B5 Barrier: nonpositive number of states at -23359 1/cm => truncating
         B5 Barrier:        grid size = 469
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23359 1/cm
         B6 Barrier:        grid size = 283
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1379 1/cm
         B7 Barrier:        grid size = 258
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4703 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16674 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.81527, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 347
      MasterEquation::Barrier::truncate: real weight = 1.33608e+35
      MasterEquation::Barrier::truncate: effective weight = 8.09647e+31
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -7132  -7132 1.28e+09 3.28e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -84 1.04e+16
         B2    183 2.31e+15
         B3  -4606 6.66e+14
         B4  -6202  7.8e+14
         B5  -7132 9.23e+13
         B6   1380 9.21e+15
         B7   4704 1.22e+15
         B8  16674 9.38e+12
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.41e-11  1.12e-10   2.3e-13  1.32e-14  1.94e-28  1.75e-08  1.47e-05  2.67e+05
          R  1.56e+10         1      1.75   0.00358  0.000206  3.02e-18       273  2.29e+05  4.16e+15
         P1  8.92e+09     0.572         1   0.00205  0.000118  1.73e-18       156  1.31e+05  2.38e+15
         P2  4.35e+12       279       488         1    0.0574  8.42e-16  7.63e+04  6.38e+07  1.16e+18
         P3  7.58e+13  4.86e+03   8.5e+03      17.4         1  1.47e-14  1.33e+06  1.11e+09  2.02e+19
         P4  5.17e+27  3.31e+17  5.79e+17  1.19e+15  6.81e+13         1  9.06e+19  7.58e+22  1.38e+33
         P5   5.7e+07   0.00366    0.0064  1.31e-05  7.52e-07   1.1e-20         1       837  1.52e+13
         P6  6.82e+04  4.37e-06  7.64e-06  1.57e-08  8.99e-10  1.32e-23    0.0012         1  1.82e+10
         P7  3.75e-06   2.4e-16   4.2e-16  8.61e-19  4.94e-20  7.25e-34  6.57e-14  5.49e-11         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1    0.0498     0.087  0.000178  1.02e-05   1.5e-19      13.6  1.14e+04  2.07e+14
          R      20.1         1      1.75   0.00358  0.000206  3.02e-18       273  2.29e+05  4.16e+15
         P1      11.5     0.572         1   0.00205  0.000118  1.73e-18       156  1.31e+05  2.38e+15
         P2  5.61e+03       279       488         1    0.0574  8.42e-16  7.63e+04  6.38e+07  1.16e+18
         P3  9.77e+04  4.86e+03   8.5e+03      17.4         1  1.47e-14  1.33e+06  1.11e+09  2.02e+19
         P4  6.66e+18  3.31e+17  5.79e+17  1.19e+15  6.81e+13         1  9.06e+19  7.58e+22  1.38e+33
         P5    0.0735   0.00366    0.0064  1.31e-05  7.52e-07   1.1e-20         1       837  1.52e+13
         P6  8.79e-05  4.37e-06  7.64e-06  1.57e-08  8.99e-10  1.32e-23    0.0012         1  1.82e+10
         P7  4.83e-15   2.4e-16   4.2e-16  8.61e-19  4.94e-20  7.25e-34  6.57e-14  5.49e-11         1
   MasterEquation::set:  done, cpu time[sec] = 1.82953, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1          2.4442e+08
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.251715, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.49209, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            39108.9      8638.07      2493.04      2920.47      345.427      34472.9      4558.12      35.1275
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88643, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.168657, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.08334, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.33548e-05  1.33549e-05   6.7696e-06
      low eigenvalue method done, cpu time[sec] = 2.09845, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.34e-05  6.77e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.12e-06  6.77e-06         1
         *Z       ---       ---  3.74e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.76956e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   3.8144e-18  1.18057e-18   3.3664e-20  2.40672e-19  6.96031e-21  9.74307e-21  6.49138e-25  6.19313e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.31658, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         7.33259e+08
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.250733, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.47535, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13036.3      2879.36      831.014      973.489      115.142        11491      1519.37      11.7092
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88055, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.167257, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07575, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.25727e-06   8.2573e-06  3.71571e-06
      low eigenvalue method done, cpu time[sec] = 2.09064, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.26e-06  3.72e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.8e-07  3.72e-06         1
         *Z       ---       ---  3.74e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.7157e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   2.2318e-18  5.48239e-19  1.57499e-20  9.33525e-20  2.94788e-21  9.29937e-21  6.53712e-25   6.1932e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.28749, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1          1.2221e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.253444, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.50021, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7821.77      1727.61      498.608      584.094      69.0853      6894.57      911.625      7.02549
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88391, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.167224, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07904, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.40873e-06  6.40875e-06  2.67602e-06
      low eigenvalue method done, cpu time[sec] = 2.09426, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.41e-06  2.68e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.23e-07  2.68e-06         1
         *Z       ---       ---  3.74e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.67601e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.64646e-18  3.62967e-19  1.07507e-20  5.87926e-20  1.93399e-21  8.65171e-21  6.58347e-25  6.19331e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.32247, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         1.71094e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.250846, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.50278, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5586.98      1234.01      356.149       417.21      49.3467      4924.69      651.161      5.01821
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88063, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.16709, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07583, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.36159e-06   5.3616e-06  2.11608e-06
      low eigenvalue method done, cpu time[sec] = 2.0905, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.36e-06  2.12e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.35e-07  2.12e-06         1
         *Z       ---       ---  3.74e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.11607e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.32026e-18  2.71384e-19  8.25666e-21  4.29169e-20  1.45002e-21  8.06245e-21  6.62949e-25  6.19342e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.31445, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         2.19978e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.251648, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.50419, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4345.43      959.785      277.005      324.496      38.3807      3830.32      506.458      3.90305
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.87948, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.166765, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07445, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.66393e-06  4.66394e-06  1.75805e-06
      low eigenvalue method done, cpu time[sec] = 2.08952, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.66e-06  1.76e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.76e-07  1.76e-06         1
         *Z       ---       ---  3.74e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.75805e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.10734e-18  2.16252e-19  6.73145e-21  3.37248e-20  1.16229e-21  7.54928e-21  6.67456e-25  6.19353e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.31515, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1          2.4442e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.250387, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.49609, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3910.89      863.807      249.304      292.047      34.5427      3447.29      455.812      3.51275
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88111, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.16761, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07662, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.39219e-06   4.3922e-06  1.62237e-06
      low eigenvalue method done, cpu time[sec] = 2.09113, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.39e-06  1.62e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.54e-07  1.62e-06         1
         *Z       ---       ---  3.74e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.62236e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  1.02572e-18  1.96118e-19  6.16736e-21  3.04344e-20   1.0576e-21  7.31848e-21   6.6966e-25  6.19359e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.31132, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         3.66629e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.251469, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.50073, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2607.26      575.871      166.203      194.698      23.0284      2298.19      303.875      2.34183
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.86976, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.167775, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.06536, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.45541e-06  3.45541e-06  1.17355e-06
      low eigenvalue method done, cpu time[sec] = 2.08107, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.46e-06  1.17e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.76e-07  1.17e-06         1
         *Z       ---       ---  3.74e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.17355e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  7.51827e-19  1.32776e-19   4.3554e-21  2.03083e-20  7.28365e-22  6.36602e-21  6.80038e-25  6.19387e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.30947, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         4.88839e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.251877, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.50798, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1955.44      431.903      124.652      146.023      17.2713      1723.64      227.906      1.75637
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88331, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.168456, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07975, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.88965e-06  2.88965e-06  9.19136e-07
      low eigenvalue method done, cpu time[sec] = 2.09543, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.89e-06  9.19e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.3e-07  9.19e-07         1
         *Z       ---       ---  3.74e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.19135e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  5.93711e-19  9.93249e-20  3.36489e-21  1.50942e-20  5.53459e-22  5.65313e-21  6.89183e-25  6.19416e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.33148, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         6.11049e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.252031, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.51972, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1564.35      345.523      99.7217      116.819      13.8171      1378.91      182.325       1.4051
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88454, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.16763, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.08065, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.50304e-06  2.50304e-06  7.53942e-07
      low eigenvalue method done, cpu time[sec] = 2.09668, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   2.5e-06  7.54e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.98e-07  7.54e-07         1
         *Z       ---       ---  3.74e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.53942e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  4.89831e-19  7.86841e-20  2.73594e-21  1.19204e-20  4.44552e-22  5.09562e-21  6.97023e-25  6.19444e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.34129, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         7.33259e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.252436, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.51863, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1303.63      287.936      83.1014      97.3489      11.5142       1149.1      151.937      1.17092
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88582, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.167752, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.0816, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.21878e-06  2.21878e-06  6.37631e-07
      low eigenvalue method done, cpu time[sec] = 2.09735, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.22e-06  6.38e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.75e-07  6.38e-07         1
         *Z       ---       ---  3.74e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.3763e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0   4.1607e-19  6.47152e-20  2.29982e-21  9.79003e-21  3.70139e-22  4.64506e-21  7.03594e-25  6.19472e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.34128, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         8.55469e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.252479, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.52619, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1117.4      246.802      71.2298      83.4419      9.86933      984.939      130.232      1.00364
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88535, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.167346, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.08085, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.9993e-06   1.9993e-06  5.51168e-07
      low eigenvalue method done, cpu time[sec] = 2.09651, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     2e-06  5.51e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.57e-07  5.51e-07         1
         *Z       ---       ---  3.74e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.51167e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.60884e-19  5.46604e-20  1.97922e-21  8.26467e-21  3.16073e-22  4.27173e-21  7.08979e-25  6.19501e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.3496, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 800 K
            Well    Collision, 1/sec
              W1         9.77678e+09
      global relaxation matrix dimension = 347
      setting global matrices ... done, cpu time[sec] = 0.252864, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.52278, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            977.722      215.952       62.326      73.0117      8.63567      861.821      113.953     0.878186
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.88343, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.167755, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 2.07915, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.8238e-06   1.8238e-06  4.84331e-07
      low eigenvalue method done, cpu time[sec] = 2.09478, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.82e-06  4.84e-07         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.43e-07  4.84e-07         1
         *Z       ---       ---  3.74e+25
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.84331e-07
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1            0  3.18006e-19  4.70955e-20   1.7335e-21  7.12105e-21  2.75032e-22  3.95633e-21  7.13281e-25  6.19529e-36

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 6.34516, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 900 K
      Energy reference = 41798 1/cm
      Energy step      = 150 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -82.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.007586
         W1 Well: collisional kernel bandwidth = 51
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.304403
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.155828
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.159364
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.700716
         W1 Well: minimal relaxation eigenvalue = 0.0653879
         W1 Well: maximal relaxation eigenvalue = 0.99069
         W1 Well:       grid size = 331
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -7852 1/cm
         B1 Barrier:        grid size = 279
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -52 1/cm
         B2 Barrier:        grid size = 278
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 97 1/cm
         B3 Barrier:        grid size = 310
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4702 1/cm
         B4 Barrier:        grid size = 320
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6202 1/cm
         B5 Barrier: nonpositive number of states at -23602 1/cm => truncating
         B5 Barrier:        grid size = 436
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23602 1/cm
         B6 Barrier:        grid size = 269
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1447 1/cm
         B7 Barrier:        grid size = 248
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4597 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16747 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.6727, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 331
      MasterEquation::Barrier::truncate: real weight = 6.29584e+33
      MasterEquation::Barrier::truncate: effective weight = 4.30289e+30
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -7852  -7852 9.95e+08 4.91e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -52 1.88e+16
         B2     98 4.53e+15
         B3  -4702 1.35e+15
         B4  -6202 1.55e+15
         B5  -7852 1.87e+14
         B6   1448 1.78e+16
         B7   4598 2.53e+15
         B8  16748 2.47e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   2.1e-11  3.62e-11  1.88e-13   1.5e-14  8.59e-27  4.13e-09  1.91e-06  3.43e+03
          R  4.77e+10         1      1.73   0.00898  0.000718   4.1e-16       197  9.11e+04  1.64e+14
         P1  2.76e+10     0.579         1    0.0052  0.000416  2.37e-16       114  5.28e+04  9.48e+13
         P2  5.31e+12       111       192         1    0.0799  4.56e-14  2.19e+04  1.01e+07  1.82e+16
         P3  6.65e+13  1.39e+03  2.41e+03      12.5         1  5.71e-13  2.74e+05  1.27e+08  2.28e+17
         P4  1.16e+26  2.44e+15  4.21e+15  2.19e+13  1.75e+12         1  4.81e+17  2.22e+20  3.99e+29
         P5  2.42e+08   0.00508   0.00877  4.56e-05  3.64e-06  2.08e-18         1       463  8.31e+11
         P6  5.24e+05   1.1e-05  1.89e-05  9.86e-08  7.87e-09   4.5e-21   0.00216         1   1.8e+09
         P7  0.000292  6.11e-15  1.06e-14  5.49e-17  4.39e-18  2.51e-30   1.2e-12  5.57e-10         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.84e-05  0.000135  7.04e-07  5.62e-08  3.21e-20    0.0154      7.14  1.28e+10
          R  1.28e+04         1      1.73   0.00898  0.000718   4.1e-16       197  9.11e+04  1.64e+14
         P1  7.39e+03     0.579         1    0.0052  0.000416  2.37e-16       114  5.28e+04  9.48e+13
         P2  1.42e+06       111       192         1    0.0799  4.56e-14  2.19e+04  1.01e+07  1.82e+16
         P3  1.78e+07  1.39e+03  2.41e+03      12.5         1  5.71e-13  2.74e+05  1.27e+08  2.28e+17
         P4  3.11e+19  2.44e+15  4.21e+15  2.19e+13  1.75e+12         1  4.81e+17  2.22e+20  3.99e+29
         P5      64.8   0.00508   0.00877  4.56e-05  3.64e-06  2.08e-18         1       463  8.31e+11
         P6      0.14   1.1e-05  1.89e-05  9.86e-08  7.87e-09   4.5e-21   0.00216         1   1.8e+09
         P7   7.8e-11  6.11e-15  1.06e-14  5.49e-17  4.39e-18  2.51e-30   1.2e-12  5.57e-10         1
   MasterEquation::set:  done, cpu time[sec] = 1.68672, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         2.26425e+08
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.229298, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.12059, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            50769.3      12198.9       3628.2      4189.22      505.187      47936.5      6814.65      66.4975
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65406, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.152293, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83207, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.57665e-05  2.57668e-05  1.42087e-05
      low eigenvalue method done, cpu time[sec] = 1.84551, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.58e-05  1.42e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.09e-06  1.42e-05         1
         *Z       ---       ---  5.45e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.42085e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.55351e-15  1.90483e-15  5.55628e-16  1.59453e-17  1.09565e-16  3.22585e-18  6.29975e-18   8.5764e-22  9.38942e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.62282, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         6.79274e+08
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.229325, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.09183, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16923.1      4066.29       1209.4      1396.41      168.396      15978.8      2271.55      22.1658
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65041, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.151575, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82865, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.68375e-05  1.68376e-05  8.36025e-06
      low eigenvalue method done, cpu time[sec] = 1.84203, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.68e-05  8.36e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.34e-06  8.36e-06         1
         *Z       ---       ---  5.45e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.36018e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.55431e-15  1.19035e-15  2.75221e-16  8.07651e-18   4.5909e-17   1.4807e-18  6.12851e-18  8.63332e-22  9.38959e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.58991, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         1.13212e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.229011, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.21535, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10153.9      2439.77       725.64      837.843      101.037      9587.31      1362.93      13.2995
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65161, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.15082, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82876, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.3426e-05  1.34261e-05  6.25041e-06
      low eigenvalue method done, cpu time[sec] = 1.84256, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.34e-05  6.25e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.06e-06  6.25e-06         1
         *Z       ---       ---  5.45e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.25037e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.11022e-15  9.10288e-16  1.88794e-16   5.7473e-18  3.01139e-17  1.01326e-18  5.80633e-18  8.69008e-22  9.38975e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.71659, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         1.58497e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.22931, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.09221, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7252.76       1742.7      518.314       598.46      72.1696      6848.08      973.521      9.49965
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.64707, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.151564, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.8249, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.14399e-05  1.14399e-05  5.07522e-06
      low eigenvalue method done, cpu time[sec] = 1.83863, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.14e-05  5.08e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.94e-07  5.08e-06         1
         *Z       ---       ---  5.45e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.07519e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  8.88178e-16  7.48865e-16  1.44783e-16  4.54471e-18  2.26196e-17  7.82477e-19  5.49606e-18  8.74588e-22  9.38992e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.58683, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         2.03782e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.227786, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.10174, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5641.04      1355.43      403.133      465.469      56.1319      5326.28      757.183      7.38861
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.6505, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.151115, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.82764, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   1.0091e-05   1.0091e-05  4.30496e-06
      low eigenvalue method done, cpu time[sec] = 1.84123, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.01e-05   4.3e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.85e-07   4.3e-06         1
         *Z       ---       ---  5.45e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.30494e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  7.77156e-16  6.40865e-16  1.17698e-16   3.7904e-18  1.81755e-17    6.418e-19  5.21655e-18  8.80017e-22  9.39008e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.59572, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         2.26425e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.228254, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.10619, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5076.93      1219.89       362.82      418.922      50.5187      4793.65      681.465      6.64975
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65523, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.15047, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.8317, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.55929e-06  9.55933e-06  4.00843e-06
      low eigenvalue method done, cpu time[sec] = 1.84509, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.56e-06  4.01e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.42e-07  4.01e-06         1
         *Z       ---       ---  5.45e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.00842e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  7.77156e-16   5.9881e-16  1.07666e-16  3.50687e-18  1.65601e-17  5.89796e-19  5.08835e-18  8.82662e-22  9.39016e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.60492, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         3.39637e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.229165, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.11357, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3384.62      813.258       241.88      279.281      33.6792      3195.77       454.31      4.43317
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65695, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.150325, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83408, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.69557e-06   7.6956e-06  3.00526e-06
      low eigenvalue method done, cpu time[sec] = 1.84914, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   7.7e-06  3.01e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.92e-07  3.01e-06         1
         *Z       ---       ---  5.45e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.00525e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.55112e-16  4.54483e-16  7.54653e-17   2.5749e-18  1.14805e-17  4.22495e-19  4.54419e-18  8.95087e-22  9.39057e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.62294, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         4.52849e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.230178, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.10982, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2538.47      609.943       181.41      209.461      25.2594      2396.83      340.732      3.32488
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65374, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.150321, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83071, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.54307e-06  6.54309e-06  2.41748e-06
      low eigenvalue method done, cpu time[sec] = 1.84528, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.54e-06  2.42e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     5e-07  2.42e-06         1
         *Z       ---       ---  5.45e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.41747e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.44089e-16  3.68384e-16  5.79388e-17  2.04765e-18  8.77843e-18  3.30552e-19  4.12137e-18   9.0606e-22  9.39098e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.61452, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         5.66062e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.230162, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.10853, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2030.77      487.955      145.128      167.569      20.2075      1917.46      272.586       2.6599
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65714, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.150628, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83462, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.74151e-06  5.74152e-06  2.02601e-06
      low eigenvalue method done, cpu time[sec] = 1.84923, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.74e-06  2.03e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.37e-07  2.03e-06         1
         *Z       ---       ---  5.45e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.026e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.33067e-16  3.10373e-16   4.6869e-17   1.7039e-18  7.09185e-18  2.71786e-19  3.78129e-18   9.1556e-22  9.39139e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.61789, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         6.79274e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.229969, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.10496, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1692.31      406.629       120.94      139.641      16.8396      1597.88      227.155      2.21658
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.66069, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.151954, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83899, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.14375e-06  5.14376e-06  1.74458e-06
      low eigenvalue method done, cpu time[sec] = 1.85357, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.14e-06  1.74e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.9e-07  1.74e-06         1
         *Z       ---       ---  5.45e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.74458e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.33067e-16  2.68323e-16  3.92321e-17  1.46032e-18  5.93619e-18  2.30762e-19  3.50011e-18  9.23652e-22   9.3918e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.61885, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         7.92486e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.227028, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.12174, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1450.55      348.539      103.663      119.692      14.4339      1369.62      194.704      1.89993
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65685, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.150722, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83464, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.67675e-06  4.67676e-06  1.53164e-06
      low eigenvalue method done, cpu time[sec] = 1.84915, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.68e-06  1.53e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.53e-07  1.53e-06         1
         *Z       ---       ---  5.45e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.53164e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.33067e-16  2.36306e-16  3.36442e-17  1.27792e-18  5.09405e-18  2.00404e-19  3.26261e-18  9.30441e-22   9.3922e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.62693, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 900 K
            Well    Collision, 1/sec
              W1         9.05698e+09
      global relaxation matrix dimension = 331
      setting global matrices ... done, cpu time[sec] = 0.229961, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 3.10447, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1269.23      304.972       90.705       104.73      12.6297      1198.41      170.366      1.66244
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.65254, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.151746, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.83092, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.29954e-06  4.29954e-06  1.36448e-06
      low eigenvalue method done, cpu time[sec] = 1.84545, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.3e-06  1.36e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.24e-07  1.36e-06         1
         *Z       ---       ---  5.45e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.36448e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.22045e-16  2.11046e-16  2.93792e-17  1.13585e-18  4.45289e-18  1.76989e-19  3.05857e-18  9.36044e-22  9.39261e-32

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.61066, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 1000 K
      Energy reference = 44578 1/cm
      Energy step      = 167 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -81.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00723
         W1 Well: collisional kernel bandwidth = 50
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.287591
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.143024
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.142271
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.642322
         W1 Well: minimal relaxation eigenvalue = 0.0620532
         W1 Well: maximal relaxation eigenvalue = 0.992116
         W1 Well:       grid size = 318
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -8527 1/cm
         B1 Barrier:        grid size = 267
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -10 1/cm
         B2 Barrier:        grid size = 266
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 156 1/cm
         B3 Barrier:        grid size = 295
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4686 1/cm
         B4 Barrier:        grid size = 304
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6189 1/cm
         B5 Barrier: nonpositive number of states at -23391 1/cm => truncating
         B5 Barrier:        grid size = 407
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23390 1/cm
         B6 Barrier:        grid size = 258
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1492 1/cm
         B7 Barrier:        grid size = 239
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4664 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16688 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.55978, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 318
      MasterEquation::Barrier::truncate: real weight = 6.09148e+32
      MasterEquation::Barrier::truncate: effective weight = 4.63505e+29
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -8527  -8527 7.83e+08 7.27e+13
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -10 3.27e+16
         B2    157  8.5e+15
         B3  -4686 2.62e+15
         B4  -6189 2.98e+15
         B5  -8527 3.66e+14
         B6   1493  3.3e+16
         B7   4665 5.02e+15
         B8  16689 5.99e+13
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  7.23e-12  1.24e-11  1.35e-13   1.4e-14   1.5e-25  1.08e-09  3.11e-07      88.6
          R  1.38e+11         1      1.72    0.0186   0.00194  2.08e-14       149   4.3e+04  1.23e+13
         P1  8.05e+10     0.582         1    0.0108   0.00113  1.21e-14      86.9   2.5e+04  7.13e+12
         P2  7.42e+12      53.7      92.3         1     0.104  1.12e-12  8.01e+03  2.31e+06  6.58e+14
         P3  7.12e+13       515       885      9.59         1  1.07e-11  7.69e+04  2.22e+07  6.31e+15
         P4  6.65e+24  4.81e+13  8.27e+13  8.96e+11  9.34e+10         1  7.18e+15  2.07e+18   5.9e+26
         P5  9.26e+08    0.0067    0.0115  0.000125   1.3e-05  1.39e-16         1       288  8.21e+10
         P6  3.21e+06  2.32e-05  3.99e-05  4.33e-07  4.51e-08  4.83e-19   0.00347         1  2.85e+08
         P7    0.0113  8.15e-14   1.4e-13  1.52e-15  1.58e-16   1.7e-27  1.22e-11  3.51e-09         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.52e-07  7.78e-07  8.43e-09  8.79e-10  9.41e-21  6.76e-05    0.0195  5.55e+06
          R  2.21e+06         1      1.72    0.0186   0.00194  2.08e-14       149   4.3e+04  1.23e+13
         P1  1.29e+06     0.582         1    0.0108   0.00113  1.21e-14      86.9   2.5e+04  7.13e+12
         P2  1.19e+08      53.7      92.3         1     0.104  1.12e-12  8.01e+03  2.31e+06  6.58e+14
         P3  1.14e+09       515       885      9.59         1  1.07e-11  7.69e+04  2.22e+07  6.31e+15
         P4  1.06e+20  4.81e+13  8.27e+13  8.96e+11  9.34e+10         1  7.18e+15  2.07e+18   5.9e+26
         P5  1.48e+04    0.0067    0.0115  0.000125   1.3e-05  1.39e-16         1       288  8.21e+10
         P6      51.4  2.32e-05  3.99e-05  4.33e-07  4.51e-08  4.83e-19   0.00347         1  2.85e+08
         P7   1.8e-07  8.15e-14   1.4e-13  1.52e-15  1.58e-16   1.7e-27  1.22e-11  3.51e-09         1
   MasterEquation::set:  done, cpu time[sec] = 1.57395, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         2.11461e+08
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.212181, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.77513, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            63808.6      16592.7      5109.84      5824.03      714.681      64292.2      9797.45      116.853
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47781, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.138609, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64081, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.81776e-05   4.8179e-05   2.8491e-05
      low eigenvalue method done, cpu time[sec] = 1.65359, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.82e-05  2.85e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.78e-06  2.85e-05         1
         *Z       ---       ---  1.12e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.84902e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   3.4639e-13  2.57761e-13  7.13579e-14   2.0676e-15  1.37185e-14  4.10507e-16  1.06741e-15  2.60912e-19  2.02525e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.03578, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         6.34382e+08
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.210898, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.7718, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21269.5      5530.89      1703.28      1941.34      238.227      21430.7      3265.82      38.9511
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48063, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.137349, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64214, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.29614e-05   3.2962e-05  1.77522e-05
      low eigenvalue method done, cpu time[sec] = 1.65478, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.3e-05  1.78e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.54e-06  1.78e-05         1
         *Z       ---       ---  1.12e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.77519e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.15827e-13  1.70016e-13  3.73037e-14  1.11902e-15  6.13235e-15  2.01571e-16  1.05271e-15   2.6255e-19  2.02529e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.03057, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1          1.0573e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.211821, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.77137, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12761.7      3318.53      1021.97      1164.81      142.936      12858.4      1959.49      23.3706
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48403, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.137009, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64521, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.68942e-05  2.68946e-05  1.36896e-05
      low eigenvalue method done, cpu time[sec] = 1.65822, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.69e-05  1.37e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.05e-06  1.37e-05         1
         *Z       ---       ---  1.12e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.36894e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.66422e-13  1.33929e-13  2.63638e-14  8.24506e-16  4.16264e-15   1.4291e-16  1.01125e-15  2.64158e-19  2.02532e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.03516, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         1.48022e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.21028, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.77103, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9115.52      2370.38      729.977      832.004      102.097       9184.6      1399.64      16.6933
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47792, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.137122, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.63959, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.32801e-05  2.32803e-05  1.13629e-05
      low eigenvalue method done, cpu time[sec] = 1.65262, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.33e-05  1.14e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.76e-06  1.14e-05         1
         *Z       ---       ---  1.12e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.13628e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.38112e-13  1.12539e-13  2.06548e-14  6.68109e-16    3.203e-15  1.13137e-16   9.6888e-16  2.65723e-19  2.02535e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.02577, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         1.90315e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.211434, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.76774, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7089.85      1843.63       567.76      647.114       79.409      7143.58      1088.61      12.9837
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48248, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.137085, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64368, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.07852e-05  2.07854e-05  9.80631e-06
      low eigenvalue method done, cpu time[sec] = 1.65664, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.08e-05  9.81e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.56e-06  9.81e-06         1
         *Z       ---       ---  1.12e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.80621e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.19238e-13  9.79309e-14  1.70767e-14   5.6794e-16  2.62261e-15  9.46112e-17  9.29449e-16  2.67236e-19  2.02539e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.02862, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         2.11461e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.211607, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.76908, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6380.86      1659.27      510.984      582.403      71.4681      6429.22      979.745      11.6853
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47552, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.137093, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.637, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.97918e-05   1.9792e-05   9.1992e-06
      low eigenvalue method done, cpu time[sec] = 1.64981, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.98e-05   9.2e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.49e-06   9.2e-06         1
         *Z       ---       ---  1.12e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.19912e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.11799e-13   9.2168e-14  1.57357e-14  5.29782e-16  2.40897e-15  8.76721e-17  9.11033e-16  2.67971e-19   2.0254e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.02225, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         3.17191e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.210989, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.77785, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4253.91      1106.18      340.656      388.269      47.6454      4286.15      653.163      7.79021
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48348, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.138772, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64686, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.62592e-05  1.62593e-05  7.10636e-06
      low eigenvalue method done, cpu time[sec] = 1.66011, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.63e-05  7.11e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.21e-06  7.11e-06         1
         *Z       ---       ---  1.12e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.1063e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  8.63754e-14  7.20155e-14  1.13588e-14  4.01921e-16  1.72498e-15  6.49242e-17  8.30838e-16  2.71414e-19  2.02549e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.04499, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         4.22921e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.212688, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.77792, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3190.43      829.634      255.492      291.202      35.7341      3214.61      489.872      5.84266
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.47898, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.137702, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64064, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.40295e-05  1.40296e-05  5.84588e-06
      low eigenvalue method done, cpu time[sec] = 1.65391, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   1.4e-05  5.85e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.04e-06  5.85e-06         1
         *Z       ---       ---  1.12e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.84585e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  7.10543e-14  5.96595e-14  8.91579e-15  3.27497e-16  1.35114e-15  5.20656e-17  7.66427e-16  2.74459e-19  2.02557e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.04057, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         5.28652e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.212728, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.78402, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2552.34      663.707      204.394      232.961      28.5873      2571.69      391.898      4.67413
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48182, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.137693, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64342, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.24546e-05  1.24547e-05  4.98839e-06
      low eigenvalue method done, cpu time[sec] = 1.65673, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.25e-05  4.99e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.16e-07  4.99e-06         1
         *Z       ---       ---  1.12e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.98836e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.06182e-14  5.11572e-14  7.34231e-15  2.77893e-16  1.11286e-15  4.36657e-17  7.13332e-16  2.77114e-19  2.02565e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.04919, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         6.34382e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.212411, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.7871, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2126.95      553.089      170.328      194.134      23.8227      2143.07      326.582      3.89511
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48601, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.137429, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.6477, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.12655e-05  1.12656e-05  4.36111e-06
      low eigenvalue method done, cpu time[sec] = 1.66098, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.13e-05  4.36e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.25e-07  4.36e-06         1
         *Z       ---       ---  1.12e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.36109e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.30687e-14  4.48867e-14  6.23913e-15    2.421e-16  9.46739e-16  3.76954e-17  6.68561e-16  2.79405e-19  2.02574e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.05596, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         7.40112e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.212042, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.78584, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             1823.1      474.076      145.995      166.401      20.4195      1836.92      279.927      3.33866
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.477, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.137028, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.63864, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.03268e-05  1.03268e-05  3.87939e-06
      low eigenvalue method done, cpu time[sec] = 1.65193, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.03e-05  3.88e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.54e-07  3.88e-06         1
         *Z       ---       ---  1.12e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.87938e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.71845e-14  4.00416e-14   5.4207e-15  2.14879e-16  8.23885e-16  3.32092e-17  6.30112e-16  2.81362e-19  2.02582e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.04474, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1000 K
            Well    Collision, 1/sec
              W1         8.45843e+09
      global relaxation matrix dimension = 318
      setting global matrices ... done, cpu time[sec] = 0.212981, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.79759, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1595.22      414.817      127.746      145.601       17.867      1607.31      244.936      2.92133
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.48646, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.138212, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.64916, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.56161e-06  9.56165e-06   3.4963e-06
      low eigenvalue method done, cpu time[sec] = 1.66244, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  9.56e-06   3.5e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.96e-07   3.5e-06         1
         *Z       ---       ---  1.12e+24
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.49628e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.25215e-14  3.61695e-14  4.78841e-15  1.93387e-16  7.29133e-16   2.9702e-17  5.96603e-16  2.83015e-19  2.02591e-28

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 5.06888, elapsed time[sec] = 1
   MasterEquation::set:  starts
      Temperature      = 1100 K
      Energy reference = 47358 1/cm
      Energy step      = 183 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -79.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006874
         W1 Well: collisional kernel bandwidth = 50
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.276469
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.135394
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.140426
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.593055
         W1 Well: minimal relaxation eigenvalue = 0.0589801
         W1 Well: maximal relaxation eigenvalue = 0.995414
         W1 Well:       grid size = 309
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -9188 1/cm
         B1 Barrier:        grid size = 259
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -38 1/cm
         B2 Barrier:        grid size = 258
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 144 1/cm
         B3 Barrier:        grid size = 284
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4614 1/cm
         B4 Barrier:        grid size = 293
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6260 1/cm
         B5 Barrier: nonpositive number of states at -23463 1/cm => truncating
         B5 Barrier:        grid size = 387
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23463 1/cm
         B6 Barrier:        grid size = 251
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1425 1/cm
         B7 Barrier:        grid size = 234
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4535 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16614 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.49112, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 309
      MasterEquation::Barrier::truncate: real weight = 9.85019e+31
      MasterEquation::Barrier::truncate: effective weight = 8.21317e+28
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1  -9188  -9188 6.17e+08 1.06e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -38 5.49e+16
         B2    145 1.54e+16
         B3  -4614 4.92e+15
         B4  -6260 5.55e+15
         B5  -9188 6.92e+14
         B6   1426 5.87e+16
         B7   4536 9.56e+15
         B8  16614 1.36e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   2.7e-12  4.65e-12  9.11e-14  1.18e-14  1.39e-24  3.18e-10  6.22e-08      3.97
          R   3.7e+11         1      1.72    0.0337   0.00438  5.15e-13       118   2.3e+04  1.47e+12
         P1  2.15e+11     0.581         1    0.0196   0.00254  2.99e-13      68.3  1.34e+04  8.53e+11
         P2   1.1e+13      29.6        51         1      0.13  1.53e-11  3.49e+03  6.82e+05  4.35e+13
         P3  8.46e+13       229       393      7.71         1  1.18e-10  2.69e+04  5.26e+06  3.36e+14
         P4  7.18e+23  1.94e+12  3.34e+12  6.54e+10  8.49e+09         1  2.28e+14  4.46e+16  2.85e+24
         P5  3.15e+09    0.0085    0.0146  0.000287  3.72e-05  4.38e-15         1       196  1.25e+10
         P6  1.61e+07  4.35e-05  7.48e-05  1.47e-06   1.9e-07  2.24e-17   0.00511         1  6.38e+07
         P7     0.252  6.81e-13  1.17e-12   2.3e-14  2.98e-15  3.51e-25  8.01e-11  1.57e-08         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.72e-09  1.16e-08  2.27e-10  2.94e-11  3.46e-21  7.91e-07  0.000155  9.87e+03
          R  1.49e+08         1      1.72    0.0337   0.00438  5.15e-13       118   2.3e+04  1.47e+12
         P1  8.64e+07     0.581         1    0.0196   0.00254  2.99e-13      68.3  1.34e+04  8.53e+11
         P2  4.41e+09      29.6        51         1      0.13  1.53e-11  3.49e+03  6.82e+05  4.35e+13
         P3   3.4e+10       229       393      7.71         1  1.18e-10  2.69e+04  5.26e+06  3.36e+14
         P4  2.89e+20  1.94e+12  3.34e+12  6.54e+10  8.49e+09         1  2.28e+14  4.46e+16  2.85e+24
         P5  1.27e+06    0.0085    0.0146  0.000287  3.72e-05  4.38e-15         1       196  1.25e+10
         P6  6.47e+03  4.35e-05  7.48e-05  1.47e-06   1.9e-07  2.24e-17   0.00511         1  6.38e+07
         P7  0.000101  6.81e-13  1.17e-12   2.3e-14  2.98e-15  3.51e-25  8.01e-11  1.57e-08         1
   MasterEquation::set:  done, cpu time[sec] = 1.50571, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1          1.9878e+08
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200329, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.60068, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            78023.7      21848.8      6996.82      7882.22      982.613      83457.1      13583.5      193.143
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36747, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.130153, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52112, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   8.5197e-05  8.52016e-05  5.35287e-05
      low eigenvalue method done, cpu time[sec] = 1.53369, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.52e-05  5.35e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.5e-06  5.35e-05         1
         *Z       ---       ---  2.98e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.35259e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.79388e-11  1.35074e-11  3.56633e-12  1.04614e-13  6.72496e-13  2.04278e-14  6.81738e-14  2.72024e-17  1.05797e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.70452, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         5.96341e+08
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.197447, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.58657, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            26007.9      7282.95      2332.27      2627.41      327.538        27819      4527.83      64.3808
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36593, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.127949, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51692, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.06021e-05  6.06042e-05  3.49951e-05
      low eigenvalue method done, cpu time[sec] = 1.5292, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.06e-05   3.5e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.53e-06   3.5e-05         1
         *Z       ---       ---  2.98e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.49939e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.17278e-11  9.31986e-12  1.95225e-12  5.98961e-14  3.17661e-13  1.06244e-14  6.79473e-14  2.73634e-17  1.05798e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.68659, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         9.93901e+08
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.19963, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.59691, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15604.7      4369.77      1399.36      1576.44      196.523      16691.4       2716.7      38.6285
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36622, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.127873, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51726, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  5.04372e-05  5.04386e-05  2.76989e-05
      low eigenvalue method done, cpu time[sec] = 1.52966, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.04e-05  2.77e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.73e-06  2.77e-05         1
         *Z       ---       ---  2.98e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.76982e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   9.2828e-12  7.52645e-12  1.41536e-12  4.54552e-14  2.22029e-13  7.76341e-15  6.59877e-14  2.75191e-17    1.058e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.69745, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         1.39146e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199718, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.59409, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11146.2      3121.26      999.546      1126.03      140.373      11922.4       1940.5      27.5918
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36153, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.128348, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51288, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.42626e-05  4.42636e-05  2.34215e-05
      low eigenvalue method done, cpu time[sec] = 1.5264, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.43e-05  2.34e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.25e-06  2.34e-05         1
         *Z       ---       ---  2.98e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.34209e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  7.84928e-12  6.43804e-12  1.12935e-12   3.7605e-14  1.74401e-13  6.27765e-15  6.38377e-14  2.76694e-17  1.05802e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.69442, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         1.78902e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199497, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.6094, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             8669.3      2427.65      777.425      875.802      109.179      9273.01      1509.28      21.4603
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36176, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.127656, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51264, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    3.994e-05  3.99409e-05  2.05099e-05
      low eigenvalue method done, cpu time[sec] = 1.52508, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.99e-05  2.05e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.91e-06  2.05e-05         1
         *Z       ---       ---  2.98e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.05095e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.87361e-12   5.6817e-12  9.47311e-13  3.24886e-14  1.45119e-13  5.33721e-15  6.17661e-14  2.78139e-17  1.05803e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.70566, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1          1.9878e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199712, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.6068, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7802.37      2184.88      699.682      788.222      98.2613      8345.71      1358.35      19.3143
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36647, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.127911, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51736, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.82039e-05  3.82046e-05  1.93618e-05
      low eigenvalue method done, cpu time[sec] = 1.53023, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.82e-05  1.94e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.78e-06  1.94e-05         1
         *Z       ---       ---  2.98e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.93615e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.48881e-12  5.38003e-12  8.78415e-13  3.05177e-14  1.34225e-13  4.98105e-15  6.07808e-14   2.7884e-17  1.05804e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.70862, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1          2.9817e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200375, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.59628, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5201.58      1456.59      466.455      525.481      65.5075       5563.8      905.566      12.8762
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36905, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.128572, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52073, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.19515e-05   3.1952e-05  1.53405e-05
      low eigenvalue method done, cpu time[sec] = 1.5336, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.2e-05  1.53e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.3e-06  1.53e-05         1
         *Z       ---       ---  2.98e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.53402e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  5.14111e-12  4.30812e-12  6.50312e-13  2.38055e-14  9.88166e-14   3.7948e-15  5.63815e-14  2.82119e-17  1.05808e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.70179, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         3.97561e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199927, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.59337, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3901.19      1092.44      349.841      394.111      49.1306      4172.85      679.175      9.65713
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36844, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.129748, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52131, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   2.7934e-05  2.79344e-05  1.28615e-05
      low eigenvalue method done, cpu time[sec] = 1.53372, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.79e-05  1.29e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     2e-06  1.29e-05         1
         *Z       ---       ---  2.98e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.28613e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.31033e-12   3.6355e-12  5.20258e-13  1.98037e-14  7.90186e-14  3.10819e-15  5.27371e-14  2.85026e-17  1.05812e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.69678, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         4.96951e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199444, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.60759, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3120.95      873.954      279.873      315.289      39.3045      3338.28       543.34       7.7257
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.3685, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.12829, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51982, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.50577e-05  2.50579e-05  1.11445e-05
      low eigenvalue method done, cpu time[sec] = 1.53205, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.51e-05  1.11e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.78e-06  1.11e-05         1
         *Z       ---       ---  2.98e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.11444e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   3.7349e-12  3.16431e-12  4.35092e-13  1.70864e-14  6.61738e-14  2.65133e-15  4.96651e-14  2.87581e-17  1.05817e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.71066, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         5.96341e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.199627, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.60268, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2600.79      728.295      233.227      262.741      32.7538       2781.9      452.783      6.43808
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.35915, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.128072, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.51006, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.28618e-05   2.2862e-05  9.86976e-06
      low eigenvalue method done, cpu time[sec] = 1.5242, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.29e-05  9.87e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.62e-06  9.87e-06         1
         *Z       ---       ---  2.98e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.86967e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.30769e-12  2.81167e-12  3.74556e-13  1.50954e-14  5.70872e-14  2.32164e-15  4.70285e-14  2.89811e-17  1.05821e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.70036, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         6.95731e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200973, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.60681, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2229.25      624.253      199.909      225.206      28.0747      2384.49        388.1      5.51836
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.37011, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.129791, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.5233, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  2.11121e-05  2.11123e-05  8.87841e-06
      low eigenvalue method done, cpu time[sec] = 1.53646, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  2.11e-05  8.88e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.49e-06  8.88e-06         1
         *Z       ---       ---  2.98e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.87833e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.97551e-12  2.53575e-12  3.29114e-13  1.35611e-14  5.02824e-14  2.07065e-15  4.47305e-14  2.91745e-17  1.05825e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.7183, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1100 K
            Well    Collision, 1/sec
              W1         7.95121e+09
      global relaxation matrix dimension = 309
      setting global matrices ... done, cpu time[sec] = 0.200549, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.61872, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            1950.59      546.221      174.921      197.056      24.5653      2086.43      339.587      4.82856
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.36913, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.127958, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.52048, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  1.96745e-05  1.96747e-05  8.08126e-06
      low eigenvalue method done, cpu time[sec] = 1.53361, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  1.97e-05  8.08e-06         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.39e-06  8.08e-06         1
         *Z       ---       ---  2.98e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.0812e-06
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.70839e-12  2.31283e-12  2.93642e-13  1.23358e-14   4.4976e-14  1.87219e-15  4.27022e-14  2.93411e-17  1.05829e-25

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.72887, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1200 K
      Energy reference = 50138 1/cm
      Energy step      = 200 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -77.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006781
         W1 Well: collisional kernel bandwidth = 49
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.265233
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.128972
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.134107
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.556994
         W1 Well: minimal relaxation eigenvalue = 0.0559929
         W1 Well: maximal relaxation eigenvalue = 0.997961
         W1 Well:       grid size = 301
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -10062 1/cm
         B1 Barrier:        grid size = 251
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -62 1/cm
         B2 Barrier:        grid size = 250
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 137 1/cm
         B3 Barrier:        grid size = 274
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4662 1/cm
         B4 Barrier:        grid size = 282
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6261 1/cm
         B5 Barrier: nonpositive number of states at -23662 1/cm => truncating
         B5 Barrier:        grid size = 369
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23662 1/cm
         B6 Barrier:        grid size = 244
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1338 1/cm
         B7 Barrier:        grid size = 228
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4537 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16738 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.42761, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 301
      MasterEquation::Barrier::truncate: real weight = 2.32674e+31
      MasterEquation::Barrier::truncate: effective weight = 2.12028e+28
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -10062 -10062 4.46e+08 1.53e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -62 8.95e+16
         B2    138 2.69e+16
         B3  -4662 8.98e+15
         B4  -6261    1e+16
         B5 -10062 1.27e+15
         B6   1339 1.01e+17
         B7   4538 1.75e+16
         B8  16738 2.91e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.29e-12  2.22e-12  7.09e-14   1.1e-14   9.6e-24  1.23e-10  1.74e-08     0.321
          R  7.78e+11         1      1.73    0.0551   0.00858  7.47e-12      95.4  1.35e+04   2.5e+11
         P1   4.5e+11     0.578         1    0.0319   0.00496  4.32e-12      55.1  7.81e+03  1.44e+11
         P2  1.41e+13      18.1      31.4         1     0.156  1.35e-10  1.73e+03  2.45e+05  4.53e+12
         P3  9.06e+13       116       202      6.42         1   8.7e-10  1.11e+04  1.57e+06  2.91e+13
         P4  1.04e+23  1.34e+11  2.32e+11  7.38e+09  1.15e+09         1  1.28e+13  1.81e+15  3.34e+22
         P5  8.15e+09    0.0105    0.0181  0.000578     9e-05  7.83e-14         1       142  2.62e+09
         P6  5.76e+07   7.4e-05  0.000128  4.08e-06  6.35e-07  5.53e-16   0.00706         1  1.85e+07
         P7      3.12  4.01e-12  6.93e-12  2.21e-13  3.44e-14  2.99e-23  3.82e-10  5.41e-08         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.03e-10  3.51e-10  1.12e-11  1.74e-12  1.52e-21  1.94e-08  2.74e-06      50.7
          R  4.92e+09         1      1.73    0.0551   0.00858  7.47e-12      95.4  1.35e+04   2.5e+11
         P1  2.85e+09     0.578         1    0.0319   0.00496  4.32e-12      55.1  7.81e+03  1.44e+11
         P2  8.93e+10      18.1      31.4         1     0.156  1.35e-10  1.73e+03  2.45e+05  4.53e+12
         P3  5.73e+11       116       202      6.42         1   8.7e-10  1.11e+04  1.57e+06  2.91e+13
         P4  6.59e+20  1.34e+11  2.32e+11  7.38e+09  1.15e+09         1  1.28e+13  1.81e+15  3.34e+22
         P5  5.16e+07    0.0105    0.0181  0.000578     9e-05  7.83e-14         1       142  2.62e+09
         P6  3.64e+05   7.4e-05  0.000128  4.08e-06  6.35e-07  5.53e-16   0.00706         1  1.85e+07
         P7    0.0197  4.01e-12  6.93e-12  2.21e-13  3.44e-14  2.99e-23  3.82e-10  5.41e-08         1
   MasterEquation::set:  done, cpu time[sec] = 1.44145, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          1.8787e+08
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.190417, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.41875, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            93209.6      27985.2      9349.53      10421.9      1317.96       105370      18195.9      303.307
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26954, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.122099, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41363, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000121374  0.000121383  7.93681e-05
      low eigenvalue method done, cpu time[sec] = 1.42569, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000121  7.94e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.88e-06  7.94e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.93618e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.57714e-10  3.48107e-10  8.80531e-11  2.61924e-12  1.63597e-11  5.03935e-13  2.09549e-12  1.27161e-15  1.90818e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.39093, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          5.6361e+08
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.190472, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.41801, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31069.9      9328.38      3116.51      3473.96      439.319      35123.3      6065.31      101.102
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27121, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.12165, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41504, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.91898e-05  8.91946e-05  5.40521e-05
      low eigenvalue method done, cpu time[sec] = 1.42711, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.92e-05   5.4e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.39e-06   5.4e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.40491e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.11725e-10   2.4952e-10  5.01578e-11  1.57388e-12  8.10371e-12  2.75412e-13  2.10635e-12  1.27872e-15  1.90821e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.38722, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          9.3935e+08
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.190093, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.41769, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18641.9      5597.03      1869.91      2084.38      263.591        21074      3639.19      60.6614
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26892, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.121047, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41189, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.54866e-05  7.54899e-05  4.37431e-05
      low eigenvalue method done, cpu time[sec] = 1.4236, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.55e-05  4.37e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.35e-06  4.37e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.37412e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.52274e-10  2.05805e-10  3.71742e-11   1.2251e-12  5.80884e-12  2.06555e-13   2.0637e-12   1.2855e-15  1.90824e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.3849, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         1.31509e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.189674, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.4275, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13315.7      3997.88      1335.65      1488.84       188.28      15052.9      2599.42      43.3296
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26776, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.121336, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41152, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.70248e-05  6.70273e-05  3.75778e-05
      low eigenvalue method done, cpu time[sec] = 1.42352, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.7e-05  3.76e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.72e-06  3.76e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.75764e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.16719e-10  1.78732e-10  3.01354e-11  1.03173e-12  4.64469e-12  1.70103e-13  2.01219e-12  1.29199e-15  1.90826e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.39187, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         1.69083e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.19013, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.42599, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10356.6      3109.46      1038.84      1157.99       146.44      11707.8      2021.77      33.7008
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26738, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.120281, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.40993, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.10305e-05  6.10325e-05  3.33189e-05
      low eigenvalue method done, cpu time[sec] = 1.42159, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.1e-05  3.33e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.27e-06  3.33e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.33178e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.92158e-10  1.59637e-10  2.55965e-11  9.03835e-13  3.91899e-12  1.46695e-13  1.96052e-12   1.2982e-15  1.90829e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.38979, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          1.8787e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.190148, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.43208, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9320.96      2798.52      934.953      1042.19      131.796        10537      1819.59      30.3307
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27071, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.120792, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41381, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   5.8605e-05  5.86069e-05  3.16237e-05
      low eigenvalue method done, cpu time[sec] = 1.42652, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  5.86e-05  3.16e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.09e-06  3.16e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.16227e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.82382e-10  1.51949e-10  2.38641e-11  8.54098e-13  3.64659e-12  1.37748e-13  1.93546e-12  1.30121e-15  1.90831e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.40591, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         2.81805e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.190489, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.43051, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6213.98      1865.68      623.302      694.793      87.8638      7024.66      1213.06      20.2205
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26655, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.121016, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41034, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.97761e-05  4.97774e-05  2.56044e-05
      low eigenvalue method done, cpu time[sec] = 1.4224, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  4.98e-05  2.56e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.44e-06  2.56e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.56037e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.47668e-10  1.24252e-10  1.80585e-11  6.82364e-13  2.74978e-12  1.07542e-13  1.82066e-12  1.31527e-15  1.90838e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.48565, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          3.7574e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.190014, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.43014, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4660.48      1399.26      467.476      521.094      65.8978       5268.5      909.797      15.1654
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.2727, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.120314, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41507, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  4.40156e-05  4.40166e-05  2.18193e-05
      low eigenvalue method done, cpu time[sec] = 1.42771, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   4.4e-05  2.18e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.02e-06  2.18e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.18188e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.25839e-10  1.06524e-10  1.46877e-11  5.77869e-13  2.23857e-12  8.97049e-14  1.72262e-12  1.32776e-15  1.90845e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.40367, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         4.69675e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.19131, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.43495, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3728.39      1119.41      373.981      416.876      52.7183       4214.8      727.838      12.1323
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.2722, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.121906, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41632, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.98431e-05  3.98438e-05   1.9157e-05
      low eigenvalue method done, cpu time[sec] = 1.42898, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.98e-05  1.92e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.72e-06  1.92e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.91566e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.10484e-10  9.39135e-11  1.24489e-11  5.05781e-13  1.90188e-12  7.76489e-14  1.63822e-12  1.33881e-15  1.90852e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.41114, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          5.6361e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.190952, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.44041, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3106.99      932.838      311.651      347.396      43.9319      3512.33      606.531      10.1102
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26941, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.120918, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.4128, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.66274e-05   3.6628e-05  1.71552e-05
      low eigenvalue method done, cpu time[sec] = 1.42545, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.66e-05  1.72e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.49e-06  1.72e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.71549e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  9.89399e-11  8.43558e-11  1.08387e-11  4.52261e-13   1.6607e-12  6.88354e-14  1.56459e-12  1.34855e-15  1.90859e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.41231, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1         6.57545e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.191544, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.4299, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2663.13      799.576      267.129      297.768      37.6559      3010.57      519.884      8.66592
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.27005, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.121685, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41412, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.40445e-05   3.4045e-05  1.55815e-05
      low eigenvalue method done, cpu time[sec] = 1.42669, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   3.4e-05  1.56e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.31e-06  1.56e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.55813e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  8.98639e-11  7.67966e-11  9.61774e-12  4.10556e-13  1.47815e-12  6.20509e-14  1.49955e-12   1.3571e-15  1.90866e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.40278, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1200 K
            Well    Collision, 1/sec
              W1          7.5148e+09
      global relaxation matrix dimension = 301
      setting global matrices ... done, cpu time[sec] = 0.191309, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.44382, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2330.24      699.629      233.738      260.547      32.9489      2634.25      454.898      7.58268
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.26741, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.12137, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.41074, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  3.19074e-05  3.19079e-05  1.43041e-05
      low eigenvalue method done, cpu time[sec] = 1.42362, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  3.19e-05  1.43e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.15e-06  1.43e-05         1
         *Z       ---       ---  1.06e+23
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 1.43039e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  8.24965e-11  7.06314e-11  8.65613e-12  3.76917e-13  1.33445e-12  5.66333e-14  1.44148e-12  1.36459e-15  1.90873e-23

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.41328, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1300 K
      Energy reference = 52918 1/cm
      Energy step      = 217 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -75.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00668
         W1 Well: collisional kernel bandwidth = 49
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.254943
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.12208
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.127909
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.519461
         W1 Well: minimal relaxation eigenvalue = 0.0533241
         W1 Well: maximal relaxation eigenvalue = 1.00056
         W1 Well:       grid size = 293
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -10663 1/cm
         B1 Barrier:        grid size = 244
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -29 1/cm
         B2 Barrier:        grid size = 243
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 187 1/cm
         B3 Barrier:        grid size = 266
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4803 1/cm
         B4 Barrier:        grid size = 273
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6323 1/cm
         B5 Barrier: nonpositive number of states at -23249 1/cm => truncating
         B5 Barrier:        grid size = 351
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23249 1/cm
         B6 Barrier:        grid size = 237
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1489 1/cm
         B7 Barrier:        grid size = 223
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4527 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16679 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.3602, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 293
      MasterEquation::Barrier::truncate: real weight = 7.32288e+30
      MasterEquation::Barrier::truncate: effective weight = 7.24031e+27
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -10663 -10663 3.55e+08 2.19e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -29 1.42e+17
         B2    188 4.56e+16
         B3  -4803 1.59e+16
         B4  -6323 1.76e+16
         B5 -10663 2.25e+15
         B6   1490 1.69e+17
         B7   4528 3.08e+16
         B8  16679 5.94e+14
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   5.1e-13  8.89e-13  4.25e-14  7.73e-15  3.65e-23  4.04e-11  4.35e-09    0.0283
          R  1.96e+12         1      1.74    0.0833    0.0152  7.16e-11      79.2  8.53e+03  5.55e+10
         P1  1.13e+12     0.574         1    0.0478   0.00869  4.11e-11      45.4  4.89e+03  3.18e+10
         P2  2.35e+13        12      20.9         1     0.182  8.59e-10       951  1.02e+05  6.66e+11
         P3  1.29e+14        66       115       5.5         1  4.72e-09  5.23e+03  5.63e+05  3.66e+12
         P4  2.74e+22   1.4e+10  2.44e+10  1.16e+09  2.12e+08         1  1.11e+12  1.19e+14  7.75e+20
         P5  2.48e+10    0.0126     0.022   0.00105  0.000191  9.04e-13         1       108  7.01e+08
         P6   2.3e+08  0.000117  0.000204  9.77e-06  1.78e-06  8.39e-15   0.00929         1  6.51e+06
         P7      35.3   1.8e-11  3.14e-11   1.5e-12  2.73e-13  1.29e-21  1.43e-09  1.54e-07         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.06e-11  1.85e-11  8.83e-13  1.61e-13  7.59e-22   8.4e-10  9.04e-08     0.588
          R  9.43e+10         1      1.74    0.0833    0.0152  7.16e-11      79.2  8.53e+03  5.55e+10
         P1  5.41e+10     0.574         1    0.0478   0.00869  4.11e-11      45.4  4.89e+03  3.18e+10
         P2  1.13e+12        12      20.9         1     0.182  8.59e-10       951  1.02e+05  6.66e+11
         P3  6.22e+12        66       115       5.5         1  4.72e-09  5.23e+03  5.63e+05  3.66e+12
         P4  1.32e+21   1.4e+10  2.44e+10  1.16e+09  2.12e+08         1  1.11e+12  1.19e+14  7.75e+20
         P5  1.19e+09    0.0126     0.022   0.00105  0.000191  9.04e-13         1       108  7.01e+08
         P6  1.11e+07  0.000117  0.000204  9.77e-06  1.78e-06  8.39e-15   0.00929         1  6.51e+06
         P7       1.7   1.8e-11  3.14e-11   1.5e-12  2.73e-13  1.29e-21  1.43e-09  1.54e-07         1
   MasterEquation::set:  done, cpu time[sec] = 1.37456, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.78363e+08
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.180995, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.27467, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             109154      35001.3      12229.1      13501.2      1729.84       129908      23668.5      456.107
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17838, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.115674, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31552, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000206637  0.000206666  0.000142576
      low eigenvalue method done, cpu time[sec] = 1.3271, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000207  0.000143         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.48e-05  0.000143         1
         *Z       ---       ---   3.9e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000142556
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.77714e-09  5.19967e-09  1.26371e-09  3.81857e-11  2.32117e-10  7.24674e-12  3.68205e-11  3.20806e-14  1.51908e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.11537, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1          5.3509e+08
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.180358, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.25989, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            36384.7      11667.1      4076.36       4500.4      576.614      43302.6      7889.51      152.036
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17881, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114615, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31469, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000156403  0.000156419  0.000100595
      low eigenvalue method done, cpu time[sec] = 1.32589, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000156  0.000101         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.09e-05  0.000101         1
         *Z       ---       ---   3.9e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000100585
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.78182e-09  3.85133e-09  7.45657e-10   2.3936e-11  1.19887e-10  4.13704e-12  3.72217e-11  3.22504e-14   1.5191e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.09965, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         8.91816e+08
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.180227, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.27988, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21830.8      7000.26      2445.82      2700.24      345.968      25981.6      4733.71      91.2213
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17556, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.113897, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31074, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000134429   0.00013444  8.29894e-05
      low eigenvalue method done, cpu time[sec] = 1.3225, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000134   8.3e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   9.3e-06   8.3e-05         1
         *Z       ---       ---   3.9e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.29825e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1    3.945e-09  3.23497e-09  5.63479e-10  1.90484e-11  8.78647e-11  3.17439e-12  3.67124e-11  3.24098e-14  1.51912e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.11753, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.24854e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.180544, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.26856, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15593.4      5000.18      1747.01      1928.74       247.12      18558.3      3381.22      65.1581
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17951, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114692, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31556, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000120654  0.000120663  7.22763e-05
      low eigenvalue method done, cpu time[sec] = 1.32778, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000121  7.23e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.29e-06  7.23e-05         1
         *Z       ---       ---   3.9e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.2271e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.43578e-09  2.84645e-09  4.63195e-10  1.62929e-11  7.13627e-11  2.65637e-12  3.60178e-11  3.25615e-14  1.51914e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.11437, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.60527e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.181017, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.28498, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12128.2      3889.03      1358.79      1500.13      192.205      14434.2      2629.84      50.6785
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.18145, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114429, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31685, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000110788  0.000110796  6.47803e-05
      low eigenvalue method done, cpu time[sec] = 1.32924, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000111  6.48e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.56e-06  6.48e-05         1
         *Z       ---       ---   3.9e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.47761e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.07947e-09  2.56883e-09  3.97789e-10  1.44471e-11  6.09531e-11  2.31958e-12  3.52898e-11  3.27063e-14  1.51916e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.13229, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         1.78363e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.181083, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.27624, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10915.4      3500.13      1222.91      1350.12      172.984      12990.8      2366.85      45.6107
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.19446, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.115086, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.3304, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000106769  0.000106776  6.17723e-05
      low eigenvalue method done, cpu time[sec] = 1.34257, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000107  6.18e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.27e-06  6.18e-05         1
         *Z       ---       ---   3.9e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.17685e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.93649e-09  2.45613e-09  3.72643e-10  1.37234e-11  5.70159e-11  2.18981e-12  3.49294e-11  3.27762e-14  1.51917e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.13641, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         2.67545e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.18082, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.27125, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7276.94      2333.42      815.273       900.08      115.323      8660.52       1577.9      30.4071
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1961, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.113491, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.33007, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  9.19923e-05   9.1997e-05  5.09636e-05
      low eigenvalue method done, cpu time[sec] = 1.34252, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   9.2e-05   5.1e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.2e-06   5.1e-05         1
         *Z       ---       ---   3.9e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.0961e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.42269e-09  2.04524e-09  2.87473e-10  1.11947e-11  4.39085e-11  1.74663e-12  3.32353e-11  3.31027e-14  1.51923e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.1299, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         3.56726e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.180744, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.27591, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             5457.7      1750.06      611.455       675.06      86.4921      6495.39      1183.43      22.8053
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1926, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114748, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.32867, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  8.22135e-05  8.22171e-05  4.40483e-05
      low eigenvalue method done, cpu time[sec] = 1.3408, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  8.22e-05   4.4e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   5.5e-06   4.4e-05         1
         *Z       ---       ---   3.9e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 4.40464e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.09397e-09  1.77764e-09  2.37238e-10  9.62885e-12  3.63116e-11  1.48035e-12  3.17457e-11  3.33935e-14  1.51928e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.13407, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         4.45908e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.180665, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.27679, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4366.16      1400.05      489.164      540.048      69.1937      5196.31      946.741      18.2443
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.18222, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.113856, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31755, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  7.50532e-05  7.50562e-05  3.91188e-05
      low eigenvalue method done, cpu time[sec] = 1.33, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  7.51e-05  3.91e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.99e-06  3.91e-05         1
         *Z       ---       ---   3.9e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.91173e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.85964e-09  1.58473e-09   2.0346e-10  8.53366e-12  3.12427e-11  1.29793e-12  3.04377e-11  3.36521e-14  1.51933e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.12537, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1          5.3509e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.180791, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.28392, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3638.47      1166.71      407.636       450.04      57.6614      4330.26      788.951      15.2036
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.18081, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114123, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31648, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   6.9486e-05  6.94885e-05  3.53714e-05
      low eigenvalue method done, cpu time[sec] = 1.3286, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.95e-05  3.54e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.6e-06  3.54e-05         1
         *Z       ---       ---   3.9e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.53701e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   1.6815e-09   1.4369e-09  1.78916e-10   7.7113e-12  2.75724e-11  1.16307e-12   2.9279e-11  3.38819e-14  1.51938e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.12953, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         6.24271e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.182934, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.28103, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3118.69      1000.04      349.403      385.749       49.424      3711.65      676.244      13.0316
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1785, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.113402, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31318, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.49807e-05  6.49828e-05  3.23974e-05
      low eigenvalue method done, cpu time[sec] = 1.32444, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   6.5e-05  3.24e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.28e-06  3.24e-05         1
         *Z       ---       ---   3.9e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 3.23963e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.54013e-09  1.31889e-09  1.60141e-10   7.0642e-12  2.47683e-11  1.05825e-12  2.82427e-11  3.40858e-14  1.51944e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.1245, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1300 K
            Well    Collision, 1/sec
              W1         7.13453e+09
      global relaxation matrix dimension = 293
      setting global matrices ... done, cpu time[sec] = 0.179741, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.27913, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            2728.85      875.032      305.727       337.53       43.246       3247.7      591.713      11.4027
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.17733, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.114845, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.31306, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  6.12286e-05  6.12305e-05  2.99632e-05
      low eigenvalue method done, cpu time[sec] = 1.32458, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  6.12e-05     3e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.02e-06     3e-05         1
         *Z       ---       ---   3.9e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 2.99623e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.42441e-09  1.22184e-09  1.45239e-10  6.53777e-12   2.2543e-11  9.73837e-13  2.73076e-11  3.42664e-14  1.51949e-21

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 4.11647, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1400 K
      Energy reference = 55699 1/cm
      Energy step      = 233 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -73.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006748
         W1 Well: collisional kernel bandwidth = 48
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.246624
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.119244
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.123503
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.502298
         W1 Well: minimal relaxation eigenvalue = 0.0507375
         W1 Well: maximal relaxation eigenvalue = 1.00507
         W1 Well:       grid size = 288
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -11404 1/cm
         B1 Barrier:        grid size = 240
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -220 1/cm
         B2 Barrier:        grid size = 239
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 12 1/cm
         B3 Barrier:        grid size = 259
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4648 1/cm
         B4 Barrier:        grid size = 266
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6279 1/cm
         B5 Barrier: nonpositive number of states at -23521 1/cm => truncating
         B5 Barrier:        grid size = 340
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23521 1/cm
         B6 Barrier:        grid size = 233
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1410 1/cm
         B7 Barrier:        grid size = 219
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4672 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16555 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.32695, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 288
      MasterEquation::Barrier::truncate: real weight = 2.88039e+30
      MasterEquation::Barrier::truncate: effective weight = 3.05789e+27
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -11404 -11404 2.66e+08 3.09e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -220  2.2e+17
         B2     13 7.52e+16
         B3  -4648 2.75e+16
         B4  -6279 3.01e+16
         B5 -11404 3.91e+15
         B6   1411 2.75e+17
         B7   4672 5.27e+16
         B8  16556 1.16e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.36e-13  4.16e-13   2.8e-14  5.82e-15  1.17e-22  1.58e-11  1.35e-09    0.0036
          R  4.24e+12         1      1.76     0.119    0.0246  4.96e-10      67.1   5.7e+03  1.53e+10
         P1  2.41e+12     0.568         1    0.0673     0.014  2.82e-10      38.1  3.24e+03  8.66e+09
         P2  3.57e+13      8.44      14.8         1     0.208  4.19e-09       566  4.81e+04  1.29e+11
         P3  1.72e+14      40.6      71.4      4.81         1  2.01e-08  2.72e+03  2.31e+05  6.19e+11
         P4  8.54e+21  2.02e+09  3.55e+09  2.39e+08  4.97e+07         1  1.35e+11  1.15e+13  3.07e+19
         P5  6.31e+10    0.0149    0.0262   0.00177  0.000367   7.4e-12         1        85  2.27e+08
         P6  7.43e+08  0.000175  0.000309  2.08e-05  4.32e-06   8.7e-14    0.0118         1  2.67e+06
         P7       278  6.56e-11  1.15e-10  7.77e-12  1.62e-12  3.25e-20   4.4e-09  3.74e-07         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   8.5e-13   1.5e-12  1.01e-13  2.09e-14  4.22e-22   5.7e-11  4.85e-09     0.013
          R  1.18e+12         1      1.76     0.119    0.0246  4.96e-10      67.1   5.7e+03  1.53e+10
         P1  6.69e+11     0.568         1    0.0673     0.014  2.82e-10      38.1  3.24e+03  8.66e+09
         P2  9.93e+12      8.44      14.8         1     0.208  4.19e-09       566  4.81e+04  1.29e+11
         P3  4.78e+13      40.6      71.4      4.81         1  2.01e-08  2.72e+03  2.31e+05  6.19e+11
         P4  2.37e+21  2.02e+09  3.55e+09  2.39e+08  4.97e+07         1  1.35e+11  1.15e+13  3.07e+19
         P5  1.75e+10    0.0149    0.0262   0.00177  0.000367   7.4e-12         1        85  2.27e+08
         P6  2.06e+08  0.000175  0.000309  2.08e-05  4.32e-06   8.7e-14    0.0118         1  2.67e+06
         P7      77.2  6.56e-11  1.15e-10  7.77e-12  1.62e-12  3.25e-20   4.4e-09  3.74e-07         1
   MasterEquation::set:  done, cpu time[sec] = 1.34094, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.69991e+08
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.174095, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.1499, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             125651      42883.1      15697.8      17178.9       2227.6       156905      30018.6      660.989
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.1239, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.111767, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.25646, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000309376  0.000309445  0.000222542
      low eigenvalue method done, cpu time[sec] = 1.2674, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000309  0.000222         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.15e-05  0.000222         1
         *Z       ---       ---  1.71e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000222493
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  6.56157e-08   5.0713e-08  1.18984e-08  3.65009e-10  2.16306e-09  6.84042e-11  4.16578e-10   4.9875e-13  6.36346e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.91497, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         5.09973e+08
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.173384, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.14445, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            41883.6      14294.4       5232.6      5726.31      742.533      52301.7      10006.2       220.33
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.12319, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110594, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.25428, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000240173  0.000240212  0.000161884
      low eigenvalue method done, cpu time[sec] = 1.26513, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00024  0.000162         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.63e-05  0.000162         1
         *Z       ---       ---  1.71e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000161858
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.77338e-08  3.86418e-08  7.23701e-09  2.37444e-10  1.15911e-09   4.0581e-11  4.23029e-10  5.01257e-13  6.36354e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.90547, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         8.49955e+08
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.173509, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.15901, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25130.2      8576.61      3139.56      3435.78       445.52        31381      6003.72      132.198
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.12416, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110274, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.25478, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000209201  0.000209229  0.000135797
      low eigenvalue method done, cpu time[sec] = 1.26598, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000209  0.000136         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.4e-05  0.000136         1
         *Z       ---       ---  1.71e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000135779
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.00428e-08  3.29742e-08  5.56217e-09  1.92655e-10  8.66261e-10  3.17696e-11  4.19517e-10  5.03579e-13  6.36363e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.92113, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.18994e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.173498, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.15915, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17950.1      6126.15      2242.54      2454.13      318.229        22415      4288.37       94.427
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13114, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110511, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26215, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000189532  0.000189555  0.000119684
      low eigenvalue method done, cpu time[sec] = 1.27303, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00019   0.00012         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.26e-05   0.00012         1
         *Z       ---       ---  1.71e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00011967
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   3.5292e-08  2.93458e-08  4.62829e-09  1.67039e-10  7.13312e-10  2.69616e-11  4.13673e-10  5.05774e-13  6.36371e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.92753, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.52992e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.173705, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.15771, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13961.2      4764.79       1744.2      1908.77      247.511      17433.9       3335.4      73.4432
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13046, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10975, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26066, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000175313  0.000175331  0.000108284
      low eigenvalue method done, cpu time[sec] = 1.27167, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000175  0.000108         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.16e-05  0.000108         1
         *Z       ---       ---  1.71e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000108272
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.19307e-08  2.67235e-08  4.01329e-09  1.49693e-10  6.15849e-10  2.38026e-11  4.07191e-10  5.07861e-13  6.36379e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.92824, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         1.69991e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.174845, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.16332, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12565.1      4288.31      1569.78      1717.89       222.76      15690.5      3001.86      66.0989
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.14076, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110331, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.27162, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000169485  0.000169503  0.000103677
      low eigenvalue method done, cpu time[sec] = 1.2826, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00017  0.000104         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.12e-05  0.000104         1
         *Z       ---       ---  1.71e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000103666
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.05723e-08  2.56513e-08  3.77537e-09  1.42845e-10  5.78744e-10  2.25772e-11  4.03902e-10  5.08867e-13  6.36383e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.94636, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         2.54986e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.174407, elapsed time[sec] = 1
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.15971, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8376.72      2858.87      1046.52      1145.26      148.507      10460.3      2001.24      44.0659
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13168, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.110033, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26244, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000147875  0.000147888  8.69493e-05
      low eigenvalue method done, cpu time[sec] = 1.27351, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000148  8.69e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.65e-06  8.69e-05         1
         *Z       ---       ---  1.71e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 8.69417e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.56401e-08  2.17005e-08   2.9622e-09  1.18668e-10  4.54033e-10  1.83498e-11  3.87994e-10  5.13558e-13  6.36404e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.93162, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         3.39982e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.174919, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.16959, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6282.54      2144.15       784.89      858.946       111.38      7845.26      1500.93      33.0494
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13055, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10974, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26087, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000133396  0.000133406  7.60852e-05
      low eigenvalue method done, cpu time[sec] = 1.27189, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000133  7.61e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.64e-06  7.61e-05         1
         *Z       ---       ---  1.71e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 7.60794e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.24367e-08  1.90884e-08  2.47604e-09  1.03467e-10  3.80712e-10  1.57718e-11   3.7357e-10  5.17743e-13  6.36425e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.94099, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         4.24977e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.174916, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.1653, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5026.03      1715.32      627.912      687.157       89.104      6276.21      1200.74      26.4395
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13076, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.11036, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26165, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000122694  0.000122702  6.82499e-05
      low eigenvalue method done, cpu time[sec] = 1.27274, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000123  6.82e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.89e-06  6.82e-05         1
         *Z       ---       ---  1.71e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.82452e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.01263e-08   1.7183e-08  2.14565e-09  9.27083e-11  3.31237e-10  1.39849e-11  3.60649e-10  5.21482e-13  6.36445e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.93659, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         5.09973e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.17427, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.1607, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4188.36      1429.44       523.26      572.631      74.2533      5230.17      1000.62       22.033
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13015, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10933, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.2597, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000114308  0.000114315  6.22358e-05
      low eigenvalue method done, cpu time[sec] = 1.27078, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000114  6.22e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.32e-06  6.22e-05         1
         *Z       ---       ---  1.71e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 6.22319e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.83529e-08  1.57089e-08  1.90346e-09  8.45498e-11  2.95077e-10   1.2651e-11  3.49033e-10  5.24827e-13  6.36466e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.93039, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         5.94968e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.174466, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.16179, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3590.02      1225.23      448.509      490.826      63.6457      4483.01      857.675      18.8854
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.13117, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.109923, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.26189, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000107477  0.000107483  5.74235e-05
      low eigenvalue method done, cpu time[sec] = 1.2729, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000107  5.74e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.85e-06  5.74e-05         1
         *Z       ---       ---  1.71e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.74202e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.69339e-08  1.45223e-08  1.71678e-09  7.80754e-11  2.67229e-10  1.16056e-11  3.38519e-10  5.27819e-13  6.36487e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.93512, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1400 K
            Well    Collision, 1/sec
              W1         6.79964e+09
      global relaxation matrix dimension = 288
      setting global matrices ... done, cpu time[sec] = 0.17426, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.17317, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3141.27      1072.08      392.445      429.473        55.69      3922.63      750.465      16.5247
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.12758, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.109326, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.25727, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000101755   0.00010176  5.34562e-05
      low eigenvalue method done, cpu time[sec] = 1.26818, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000102  5.35e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.46e-06  5.35e-05         1
         *Z       ---       ---  1.71e+22
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 5.34534e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   1.5764e-08  1.35395e-08  1.56761e-09  7.27689e-11   2.4497e-10  1.07575e-11  3.28936e-10  5.30497e-13  6.36507e-20

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.93905, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1500 K
      Energy reference = 58479 1/cm
      Energy step      = 250 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -72 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006286
         W1 Well: collisional kernel bandwidth = 48
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.213572
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.11292
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.126894
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.479985
         W1 Well: minimal relaxation eigenvalue = 0.0483596
         W1 Well: maximal relaxation eigenvalue = 1.00856
         W1 Well:       grid size = 282
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -12020 1/cm
         B1 Barrier:        grid size = 234
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -21 1/cm
         B2 Barrier:        grid size = 234
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -21 1/cm
         B3 Barrier:        grid size = 253
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4770 1/cm
         B4 Barrier:        grid size = 259
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6270 1/cm
         B5 Barrier: nonpositive number of states at -23271 1/cm => truncating
         B5 Barrier:        grid size = 327
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23271 1/cm
         B6 Barrier:        grid size = 228
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1478 1/cm
         B7 Barrier:        grid size = 216
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4479 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16729 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.26393, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 282
      MasterEquation::Barrier::truncate: real weight = 1.34773e+30
      MasterEquation::Barrier::truncate: effective weight = 1.53518e+27
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -12020 -12020 2.09e+08 4.33e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -21 3.35e+17
         B2    -21 1.21e+17
         B3  -4770 4.65e+16
         B4  -6270 5.05e+16
         B5 -12020 6.62e+15
         B6   1479 4.37e+17
         B7   4480 8.75e+16
         B8  16729 2.18e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.04e-13  1.85e-13  1.67e-14  3.91e-15  2.77e-22  6.01e-12  4.17e-10  0.000517
          R  9.59e+12         1      1.78     0.161    0.0375  2.65e-09      57.7     4e+03  4.96e+09
         P1  5.39e+12     0.562         1    0.0903    0.0211  1.49e-09      32.4  2.25e+03  2.79e+09
         P2  5.97e+13      6.23      11.1         1     0.233  1.65e-08       359  2.49e+04  3.09e+10
         P3  2.56e+14      26.7      47.5      4.28         1  7.08e-08  1.54e+03  1.07e+05  1.32e+11
         P4  3.62e+21  3.77e+08  6.71e+08  6.05e+07  1.41e+07         1  2.17e+10  1.51e+12  1.87e+18
         P5  1.66e+11    0.0173    0.0308   0.00278   0.00065   4.6e-11         1      69.3   8.6e+07
         P6   2.4e+09   0.00025  0.000445  4.02e-05  9.38e-06  6.64e-13    0.0144         1  1.24e+06
         P7  1.93e+03  2.02e-10  3.59e-10  3.24e-11  7.56e-12  5.35e-19  1.16e-08  8.06e-07         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.61e-14  1.71e-13  1.54e-14   3.6e-15  2.55e-22  5.54e-12  3.84e-10  0.000476
          R  1.04e+13         1      1.78     0.161    0.0375  2.65e-09      57.7     4e+03  4.96e+09
         P1  5.85e+12     0.562         1    0.0903    0.0211  1.49e-09      32.4  2.25e+03  2.79e+09
         P2  6.48e+13      6.23      11.1         1     0.233  1.65e-08       359  2.49e+04  3.09e+10
         P3  2.78e+14      26.7      47.5      4.28         1  7.08e-08  1.54e+03  1.07e+05  1.32e+11
         P4  3.92e+21  3.77e+08  6.71e+08  6.05e+07  1.41e+07         1  2.17e+10  1.51e+12  1.87e+18
         P5   1.8e+11    0.0173    0.0308   0.00278   0.00065   4.6e-11         1      69.3   8.6e+07
         P6  2.61e+09   0.00025  0.000445  4.02e-05  9.38e-06  6.64e-13    0.0144         1  1.24e+06
         P7   2.1e+03  2.02e-10  3.59e-10  3.24e-11  7.56e-12  5.35e-19  1.16e-08  8.06e-07         1
   MasterEquation::set:  done, cpu time[sec] = 1.27751, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          1.6255e+08
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.168119, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.07497, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             142491        51596      19814.3      21509.4      2820.07       186137      37240.8      927.601
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.06938, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105767, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19515, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000484683  0.000484861  0.000366065
      low eigenvalue method done, cpu time[sec] = 1.20603, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000485  0.000366         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   3.3e-05  0.000366         1
         *Z       ---       ---  7.95e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000365931
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  4.52366e-07  3.51913e-07  7.98801e-08  2.49015e-09  1.44004e-08  4.61161e-10  3.31587e-09  5.26446e-12  1.59556e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.75804, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          4.8765e+08
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.166884, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.04542, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            47496.9      17198.7      6604.75      7169.82      940.023      62045.6      12413.6        309.2
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.06921, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105858, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19464, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000385049  0.000385154  0.000273569
      low eigenvalue method done, cpu time[sec] = 1.20558, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000385  0.000273         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.56e-05  0.000273         1
         *Z       ---       ---  7.95e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000273494
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  3.38095e-07  2.74908e-07  4.99323e-08  1.67439e-09  7.97628e-09  2.83194e-10  3.37991e-09  5.28959e-12  1.59558e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.7296, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         8.12751e+08
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.166504, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.04969, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            28498.2      10319.2      3962.85      4301.89      564.014      37227.4      7448.16       185.52
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07016, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10575, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19544, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000339515  0.000339594  0.000232888
      low eigenvalue method done, cpu time[sec] = 1.20622, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00034  0.000233         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.23e-05  0.000233         1
         *Z       ---       ---  7.95e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000232834
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.87831e-07  2.37871e-07  3.89631e-08  1.38217e-09  6.06636e-09  2.25724e-10  3.36701e-09  5.31256e-12   1.5956e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.73241, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         1.13785e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.167143, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.05101, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20355.8      7370.85      2830.61      3072.78      402.867        26591      5320.11      132.514
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07201, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.10631, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19811, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000310254  0.000310318  0.000207424
      low eigenvalue method done, cpu time[sec] = 1.20948, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00031  0.000207         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.02e-05  0.000207         1
         *Z       ---       ---  7.95e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000207381
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.56366e-07  2.13827e-07  3.27768e-08  1.21295e-09   5.0572e-09  1.93984e-10  3.33416e-09  5.33414e-12  1.59562e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.73992, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         1.46295e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.167482, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.05603, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15832.3      5732.89      2201.58      2389.94      313.341      20681.9      4137.87      103.067
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07185, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105343, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19677, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000288915   0.00028897   0.00018923
      low eigenvalue method done, cpu time[sec] = 1.20757, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000289  0.000189         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.87e-05  0.000189         1
         *Z       ---       ---  7.95e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000189194
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  2.33883e-07  1.96273e-07   2.8668e-08  1.09727e-09  4.40844e-09  1.72938e-10  3.29463e-09  5.35459e-12  1.59564e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.74116, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          1.6255e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.166365, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.05096, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14249.1       5159.6      1981.43      2150.94      282.007      18613.7      3724.08      92.7601
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07208, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105207, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19714, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000280123  0.000280174  0.000181831
      low eigenvalue method done, cpu time[sec] = 1.20833, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00028  0.000182         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.8e-05  0.000182         1
         *Z       ---       ---  7.95e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000181798
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   2.2474e-07  1.89049e-07  2.70697e-08  1.05132e-09  4.16003e-09  1.64725e-10  3.27393e-09  5.36444e-12  1.59565e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.7373, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         2.43825e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.167778, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.04816, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9499.39      3439.73      1320.95      1433.96      188.005      12409.1      2482.72      61.8401
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07275, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.106847, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19948, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000247253  0.000247291  0.000154718
      low eigenvalue method done, cpu time[sec] = 1.21071, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000247  0.000155         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.58e-05  0.000155         1
         *Z       ---       ---  7.95e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000154694
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.91234e-07   1.6218e-07  2.15631e-08  8.87616e-10  3.31813e-09  1.36144e-10  3.17033e-09  5.41034e-12   1.5957e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.73904, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1           3.251e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.167315, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.06124, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7124.54       2579.8      990.713      1075.47      141.003      9306.84      1862.04      46.3801
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07494, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105361, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19982, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000224979   0.00022501  0.000136873
      low eigenvalue method done, cpu time[sec] = 1.21138, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000225  0.000137         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.42e-05  0.000137         1
         *Z       ---       ---  7.95e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000136854
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1   1.6918e-07  1.44173e-07  1.82315e-08   7.8331e-10   2.8169e-09  1.18486e-10  3.07314e-09  5.45135e-12  1.59575e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.75197, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         4.06375e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.167971, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.05871, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5699.63      2063.84       792.57      860.378      112.803      7445.47      1489.63      37.1041
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07256, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105461, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.1983, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000208369  0.000208395  0.000123869
      low eigenvalue method done, cpu time[sec] = 1.20957, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000208  0.000124         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.31e-05  0.000124         1
         *Z       ---       ---  7.95e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000123853
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.53108e-07  1.30901e-07  1.59461e-08   7.0871e-10  2.47534e-09  1.06121e-10  2.98425e-09  5.48816e-12   1.5958e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.74818, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1          4.8765e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.168011, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.06762, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4749.69      1719.87      660.475      716.982      94.0023      6204.56      1241.36        30.92
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07397, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105774, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19991, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00019526  0.000195283  0.000113802
      low eigenvalue method done, cpu time[sec] = 1.21109, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000195  0.000114         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.22e-05  0.000114         1
         *Z       ---       ---  7.95e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000113789
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.40666e-07  1.20544e-07  1.42577e-08  6.51645e-10  2.22365e-09  9.68109e-11  2.90312e-09  5.52129e-12  1.59585e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.75891, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         5.68926e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.16799, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.0623, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4071.17      1474.17      566.121      614.556      80.5734       5318.2      1064.02      26.5029
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.10352, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105001, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.22807, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000184517  0.000184536  0.000105687
      low eigenvalue method done, cpu time[sec] = 1.23928, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000185  0.000106         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.15e-05  0.000106         1
         *Z       ---       ---  7.95e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000105676
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.30638e-07  1.12147e-07  1.29474e-08  6.06019e-10  2.02843e-09  8.94605e-11  2.82883e-09  5.55114e-12  1.59589e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.78174, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1500 K
            Well    Collision, 1/sec
              W1         6.50201e+09
      global relaxation matrix dimension = 282
      setting global matrices ... done, cpu time[sec] = 0.167714, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 2.06189, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3562.27       1289.9      495.356      537.736      70.5017      4653.42       931.02        23.19
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.07179, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.105372, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.19704, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000175469  0.000175487  9.89548e-05
      low eigenvalue method done, cpu time[sec] = 1.20824, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000175  9.89e-05         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.09e-05  9.89e-05         1
         *Z       ---       ---  7.95e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 9.8945e-05
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1            1  1.22316e-07  1.05146e-07  1.18943e-08  5.68377e-10  1.87142e-09  8.34587e-11  2.76046e-09  5.57809e-12  1.59594e-18

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.75087, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1600 K
      Energy reference = 61260 1/cm
      Energy step      = 267 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -70 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006298
         W1 Well: collisional kernel bandwidth = 47
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.231905
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.109556
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.1102
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.455488
         W1 Well: minimal relaxation eigenvalue = 0.0460732
         W1 Well: maximal relaxation eigenvalue = 1.01269
         W1 Well:       grid size = 277
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -12699 1/cm
         B1 Barrier:        grid size = 230
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -151 1/cm
         B2 Barrier:        grid size = 229
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 115 1/cm
         B3 Barrier:        grid size = 247
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4690 1/cm
         B4 Barrier:        grid size = 253
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6291 1/cm
         B5 Barrier: nonpositive number of states at -23113 1/cm => truncating
         B5 Barrier:        grid size = 316
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23112 1/cm
         B6 Barrier:        grid size = 224
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1451 1/cm
         B7 Barrier:        grid size = 212
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4655 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16670 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.23527, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 277
      MasterEquation::Barrier::truncate: real weight = 7.25027e+29
      MasterEquation::Barrier::truncate: effective weight = 8.82024e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -12699 -12699 1.58e+08 6.01e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -151 4.98e+17
         B2    116 1.91e+17
         B3  -4690 7.69e+16
         B4  -6291 8.29e+16
         B5 -12699  1.1e+16
         B6   1452 6.79e+17
         B7   4655 1.42e+17
         B8  16671 3.95e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  4.95e-14  8.91e-14  1.04e-14  2.68e-15  5.69e-22  2.49e-12  1.44e-10  9.16e-05
          R  2.02e+13         1       1.8     0.209    0.0541  1.15e-08      50.3  2.91e+03  1.85e+09
         P1  1.12e+13     0.555         1     0.116      0.03  6.38e-09      27.9  1.62e+03  1.03e+09
         P2  9.65e+13      4.78       8.6         1     0.259  5.49e-08       240  1.39e+04  8.84e+09
         P3  3.73e+14      18.5      33.3      3.87         1  2.12e-07       930  5.38e+04  3.42e+10
         P4  1.76e+21   8.7e+07  1.57e+08  1.82e+07  4.71e+06         1  4.38e+09  2.53e+11  1.61e+17
         P5  4.02e+11    0.0199    0.0358   0.00416   0.00108  2.29e-10         1      57.8  3.68e+07
         P6  6.94e+09  0.000344  0.000619  7.19e-05  1.86e-05  3.95e-12    0.0173         1  6.36e+05
         P7  1.09e+04   5.4e-10  9.73e-10  1.13e-10  2.92e-11  6.21e-18  2.72e-08  1.57e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.43e-14  2.58e-14     3e-15  7.76e-16  1.65e-22  7.22e-13  4.17e-11  2.66e-05
          R  6.97e+13         1       1.8     0.209    0.0541  1.15e-08      50.3  2.91e+03  1.85e+09
         P1  3.87e+13     0.555         1     0.116      0.03  6.38e-09      27.9  1.62e+03  1.03e+09
         P2  3.33e+14      4.78       8.6         1     0.259  5.49e-08       240  1.39e+04  8.84e+09
         P3  1.29e+15      18.5      33.3      3.87         1  2.12e-07       930  5.38e+04  3.42e+10
         P4  6.06e+21   8.7e+07  1.57e+08  1.82e+07  4.71e+06         1  4.38e+09  2.53e+11  1.61e+17
         P5  1.39e+12    0.0199    0.0358   0.00416   0.00108  2.29e-10         1      57.8  3.68e+07
         P6   2.4e+10  0.000344  0.000619  7.19e-05  1.86e-05  3.95e-12    0.0173         1  6.36e+05
         P7  3.77e+04   5.4e-10  9.73e-10  1.13e-10  2.92e-11  6.21e-18  2.72e-08  1.57e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.24915, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.55885e+08
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.162325, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.96016, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             159491      61100.5      24618.7      26548.7      3516.37       217373      45319.7      1265.95
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01938, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.103389, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14196, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000715645   0.00071605  0.000564848
      low eigenvalue method done, cpu time[sec] = 1.15299, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000716  0.000565         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.75e-05  0.000565         1
         *Z       ---       ---  4.07e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000564529
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999998  2.36984e-06  1.85512e-06   4.0715e-07  1.29444e-08   7.3121e-08  2.37064e-09  1.98671e-08  4.06166e-11  2.63752e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.57472, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         4.67655e+08
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.161243, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.96976, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            53163.6      20366.8      8206.23      8849.56      1172.12      72457.5      15106.6      421.984
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02274, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.100817, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14314, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000580443  0.000580694  0.000432442
      low eigenvalue method done, cpu time[sec] = 1.15399, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000581  0.000432         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.76e-05  0.000432         1
         *Z       ---       ---  4.07e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000432255
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999998  1.81457e-06  1.48136e-06  2.61183e-07  8.96527e-09  4.17235e-08  1.50167e-09   2.0305e-08  4.08016e-11  2.63755e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.58362, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         7.79424e+08
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.162093, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.96374, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31898.2      12220.1      4923.74      5309.74      703.274      43474.5      9063.93      253.191
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01902, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101512, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.13959, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00051745  0.000517643  0.000372997
      low eigenvalue method done, cpu time[sec] = 1.15044, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000518  0.000373         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.31e-05  0.000373         1
         *Z       ---       ---  4.07e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000372858
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999998  1.56523e-06  1.29765e-06  2.06682e-07  7.51533e-09   3.2236e-08  1.21637e-09  2.03003e-08  4.09685e-11  2.63758e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.57392, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.09119e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.161789, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.97021, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22784.4      8728.64      3516.96      3792.67      502.339      31053.2      6474.24       180.85
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.01815, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101375, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.1389, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000476526  0.000476686  0.000335339
      low eigenvalue method done, cpu time[sec] = 1.14978, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000477  0.000335         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.02e-05  0.000335         1
         *Z       ---       ---  4.07e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000335226
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  1.40725e-06  1.17688e-06  1.75613e-07  6.66655e-09  2.71723e-08  1.05716e-09  2.01719e-08  4.11243e-11  2.63761e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.58121, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.40296e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.162187, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.97236, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17721.2      6788.94      2735.41      2949.85      390.708      24152.5      5035.52      140.661
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02004, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.100901, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14015, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000446447  0.000446584  0.000308191
      low eigenvalue method done, cpu time[sec] = 1.15149, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000447  0.000308         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.81e-05  0.000308         1
         *Z       ---       ---  4.07e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000308096
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  1.29336e-06  1.08789e-06  1.54814e-07  6.08151e-09  2.38919e-08  9.50742e-10  1.99968e-08  4.12715e-11  2.63764e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.58792, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         1.55885e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.162306, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.97382, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15949.1      6110.05      2461.87      2654.87      351.637      21737.3      4531.97      126.595
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02405, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101162, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14407, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000433991   0.00043412   0.00029709
      low eigenvalue method done, cpu time[sec] = 1.15492, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000434  0.000297         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.73e-05  0.000297         1
         *Z       ---       ---  4.07e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000297001
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  1.24678e-06  1.05106e-06  1.46683e-07  5.84788e-09  2.26296e-08     9.09e-10  1.99012e-08  4.13423e-11  2.63765e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.59127, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         2.33827e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.161288, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.9841, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10632.7      4073.37      1641.25      1769.91      234.425      14491.5      3021.31      84.3969
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02124, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101162, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14177, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000387088  0.000387187  0.000256068
      low eigenvalue method done, cpu time[sec] = 1.15268, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000387  0.000256         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   2.4e-05  0.000256         1
         *Z       ---       ---  4.07e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000256002
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  1.07467e-06  9.12908e-07  1.18462e-07  5.00892e-09    1.832e-08  7.62623e-10  1.94024e-08  4.16719e-11  2.63773e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.59722, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1          3.1177e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.161273, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.97365, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7974.54      3055.02      1230.94      1327.43      175.819      10868.6      2265.98      63.2977
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.0142, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101315, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.13478, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000354974  0.000355055  0.000228745
      low eigenvalue method done, cpu time[sec] = 1.146, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000355  0.000229         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.19e-05  0.000229         1
         *Z       ---       ---  4.07e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000228692
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  9.60029e-07  8.19197e-07  1.01203e-07  4.46805e-09   1.5726e-08  6.71148e-10   1.8916e-08  4.19666e-11  2.63781e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.58152, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         3.89712e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.162131, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.98566, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6379.63      2444.02      984.748      1061.95      140.655       8694.9      1812.79      50.6381
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02448, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101381, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14507, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000330836  0.000330905  0.000208649
      low eigenvalue method done, cpu time[sec] = 1.15637, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000331  0.000209         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.02e-05  0.000209         1
         *Z       ---       ---  4.07e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000208606
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  8.75707e-07  7.49481e-07  8.92632e-08  4.07764e-09  1.39429e-08  6.06514e-10  1.84611e-08   4.2232e-11  2.63788e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.60835, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         4.67655e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.161843, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.98601, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5316.36      2036.68      820.623      884.956      117.212      7245.75      1510.66      42.1984
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02084, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101301, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14125, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000311661  0.000311721  0.000192973
      low eigenvalue method done, cpu time[sec] = 1.15316, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000312  0.000193         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.9e-05  0.000193         1
         *Z       ---       ---  4.07e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000192936
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  8.09928e-07  6.94661e-07  8.03804e-08  3.77668e-09  1.26195e-08  5.57484e-10  1.80395e-08  4.24721e-11  2.63796e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.60202, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1         5.45597e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.162169, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.99414, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4556.88      1745.73      703.391      758.534      100.468      6210.65      1294.85      36.1701
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02152, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101264, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14207, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000295858  0.000295911  0.000180255
      low eigenvalue method done, cpu time[sec] = 1.15341, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000296   0.00018         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  1.79e-05   0.00018         1
         *Z       ---       ---  4.07e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000180223
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  7.56559e-07  6.49917e-07  7.34454e-08  3.53446e-09  1.15865e-08  5.18521e-10  1.76487e-08  4.26897e-11  2.63803e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.61106, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1600 K
            Well    Collision, 1/sec
              W1          6.2354e+09
      global relaxation matrix dimension = 277
      setting global matrices ... done, cpu time[sec] = 0.161716, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.98405, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            3987.27      1527.51      615.468      663.717      87.9093      5434.32      1132.99      31.6488
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.02348, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.101837, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.14462, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000282486  0.000282534  0.000169642
      low eigenvalue method done, cpu time[sec] = 1.15592, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000283   0.00017         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   1.7e-05   0.00017         1
         *Z       ---       ---  4.07e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000169614
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999999  7.12023e-07  6.12404e-07  6.78414e-08  3.33346e-09  1.07512e-08  4.86525e-10  1.72855e-08  4.28875e-11  2.63811e-17

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.60318, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1700 K
      Energy reference = 64039 1/cm
      Energy step      = 283 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -67.9 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006256
         W1 Well: collisional kernel bandwidth = 47
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.228693
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.106553
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.115699
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.443209
         W1 Well: minimal relaxation eigenvalue = 0.0438296
         W1 Well: maximal relaxation eigenvalue = 1.01883
         W1 Well:       grid size = 274
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -13503 1/cm
         B1 Barrier:        grid size = 227
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -201 1/cm
         B2 Barrier:        grid size = 226
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 80 1/cm
         B3 Barrier:        grid size = 243
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4729 1/cm
         B4 Barrier:        grid size = 249
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6427 1/cm
         B5 Barrier: nonpositive number of states at -23125 1/cm => truncating
         B5 Barrier:        grid size = 308
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23125 1/cm
         B6 Barrier:        grid size = 221
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1495 1/cm
         B7 Barrier:        grid size = 210
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4608 1/cm
         B8 Barrier:        grid size = 168
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16495 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.2201, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 274
      MasterEquation::Barrier::truncate: real weight = 4.36639e+29
      MasterEquation::Barrier::truncate: effective weight = 5.6302e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -13503 -13503 1.13e+08 8.26e+14
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -201 7.29e+17
         B2     81 2.95e+17
         B3  -4729 1.24e+17
         B4  -6427 1.34e+17
         B5 -13503 1.79e+16
         B6   1496 1.03e+18
         B7   4609 2.24e+17
         B8  16496 6.96e+15
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.56e-14  4.67e-14  6.77e-15  1.91e-15  1.07e-21  1.14e-12  5.61e-11  1.98e-05
          R   3.9e+13         1      1.82     0.264    0.0747  4.19e-08      44.4  2.19e+03  7.73e+08
         P1  2.14e+13     0.549         1     0.145     0.041   2.3e-08      24.3   1.2e+03  4.24e+08
         P2  1.48e+14      3.79      6.91         1     0.283  1.59e-07       168  8.28e+03  2.93e+09
         P3  5.22e+14      13.4      24.4      3.53         1  5.61e-07       594  2.93e+04  1.03e+10
         P4  9.32e+20  2.39e+07  4.35e+07   6.3e+06  1.78e+06         1  1.06e+09  5.22e+10  1.85e+16
         P5   8.8e+11    0.0225    0.0411   0.00595   0.00168  9.44e-10         1      49.3  1.74e+07
         P6  1.78e+10  0.000457  0.000834  0.000121  3.42e-05  1.91e-11    0.0203         1  3.54e+05
         P7  5.05e+04  1.29e-09  2.36e-09  3.41e-10  9.66e-11  5.42e-17  5.74e-08  2.83e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   2.7e-15  4.91e-15  7.12e-16  2.01e-16  1.13e-22   1.2e-13   5.9e-12  2.08e-06
          R  3.71e+14         1      1.82     0.264    0.0747  4.19e-08      44.4  2.19e+03  7.73e+08
         P1  2.03e+14     0.549         1     0.145     0.041   2.3e-08      24.3   1.2e+03  4.24e+08
         P2  1.41e+15      3.79      6.91         1     0.283  1.59e-07       168  8.28e+03  2.93e+09
         P3  4.97e+15      13.4      24.4      3.53         1  5.61e-07       594  2.93e+04  1.03e+10
         P4  8.86e+21  2.39e+07  4.35e+07   6.3e+06  1.78e+06         1  1.06e+09  5.22e+10  1.85e+16
         P5  8.36e+12    0.0225    0.0411   0.00595   0.00168  9.44e-10         1      49.3  1.74e+07
         P6   1.7e+11  0.000457  0.000834  0.000121  3.42e-05  1.91e-11    0.0203         1  3.54e+05
         P7   4.8e+05  1.29e-09  2.36e-09  3.41e-10  9.66e-11  5.42e-17  5.74e-08  2.83e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.23362, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.49873e+08
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158998, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.90102, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             176481        71346      30149.2      32349.6      4325.29       250359      54224.9      1685.98
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.989598, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099977, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.10849, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000990691  0.000991494  0.000810418
      low eigenvalue method done, cpu time[sec] = 1.11891, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000991   0.00081         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.38e-05   0.00081         1
         *Z       ---       ---  2.29e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000809761
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99999  9.92928e-06  7.81202e-06  1.66588e-06  5.38981e-08  2.97709e-07  9.76843e-09   9.4283e-08  2.42114e-10  3.09469e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.47143, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         4.49619e+08
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158152, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.91587, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            58826.9        23782      10049.7      10783.2      1441.76        83453        18075      561.992
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.992172, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099627, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11139, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000818203  0.000818722  0.000633778
      low eigenvalue method done, cpu time[sec] = 1.122, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000819  0.000633         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.14e-05  0.000633         1
         *Z       ---       ---  2.29e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000633376
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999992  7.76644e-06  6.36075e-06  1.09279e-06  3.83347e-08  1.74492e-07  6.36344e-09  9.65799e-08  2.43168e-10  3.09472e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.48833, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         7.49365e+08
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158103, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.91065, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            35296.2      14269.2      6029.83      6469.93      865.059      50071.8        10845      337.195
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.994709, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099547, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11297, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00073649  0.000736898  0.000553042
      low eigenvalue method done, cpu time[sec] = 1.12401, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000737  0.000553         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.57e-05  0.000553         1
         *Z       ---       ---  2.29e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000552737
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999993  6.77764e-06  5.63306e-06  8.75464e-07  3.25801e-08  1.36735e-07  5.22963e-09  9.68487e-08  2.44107e-10  3.09476e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.48857, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.04911e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158557, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.92125, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25211.5      10192.3      4307.02      4621.38      617.899      35765.6      7746.41      240.854
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.991091, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099399, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.10932, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000682902  0.000683244  0.000501353
      low eigenvalue method done, cpu time[sec] = 1.12014, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000683  0.000501         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.2e-05  0.000501         1
         *Z       ---       ---  2.29e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000501101
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999994  6.14449e-06  5.14926e-06  7.50462e-07  2.91798e-08  1.16408e-07  4.59124e-09  9.65167e-08  2.44978e-10  3.09479e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.49499, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.34886e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.15893, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.91972, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              19609      7927.33      3349.91       3594.4      480.588      27817.7      6024.98      187.331
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.992552, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099505, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11122, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000643241  0.000643539  0.000463798
      low eigenvalue method done, cpu time[sec] = 1.12224, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000644  0.000464         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.92e-05  0.000464         1
         *Z       ---       ---  2.29e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000463583
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999994  5.68444e-06  4.78982e-06  6.66221e-07  2.68191e-08  1.03152e-07   4.1616e-09  9.59385e-08  2.45799e-10  3.09482e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.49675, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         1.49873e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158924, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.92589, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17648.1       7134.6      3014.92      3234.96      432.529      25035.9      5422.49      168.598
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.989614, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09907, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.10781, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000626746  0.000627027  0.000448363
      low eigenvalue method done, cpu time[sec] = 1.11864, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000627  0.000448         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.81e-05  0.000448         1
         *Z       ---       ---  2.29e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000448162
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999995  5.49535e-06  4.64029e-06  6.33147e-07   2.5872e-08  9.80289e-08  3.99232e-09  9.56024e-08  2.46193e-10  3.09484e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.49826, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         2.24809e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158713, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.91983, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11765.4       4756.4      2009.94      2156.64      288.353      16690.6      3614.99      112.398
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.00318, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099463, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.12132, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000564232  0.000564452  0.000390911
      low eigenvalue method done, cpu time[sec] = 1.13214, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000564  0.000391         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.39e-05  0.000391         1
         *Z       ---       ---  2.29e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000390758
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999995  4.79147e-06  4.07505e-06  5.17633e-07  2.24472e-08  8.04263e-08  3.39471e-09  9.37442e-08  2.48027e-10  3.09492e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.50576, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         2.99746e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.159015, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.92344, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8824.04       3567.3      1507.46      1617.48      216.265        12518      2711.24      84.2988
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.00292, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099105, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.12088, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000521036   0.00052122  0.000352236
      low eigenvalue method done, cpu time[sec] = 1.1318, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000521  0.000352         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.11e-05  0.000352         1
         *Z       ---       ---  2.29e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000352112
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999996  4.31759e-06  3.68747e-06  4.46327e-07  2.02164e-08  6.97292e-08  3.01751e-09  9.18439e-08   2.4967e-10  3.09501e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.50863, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         3.74682e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158696, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.91893, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7059.23      2853.84      1205.97      1293.99      173.012      10014.4      2168.99       67.439
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.00284, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099704, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.12166, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000488338  0.000488496  0.000323557
      low eigenvalue method done, cpu time[sec] = 1.13252, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000488  0.000323         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.89e-05  0.000323         1
         *Z       ---       ---  2.29e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000323452
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999996  3.96616e-06   3.3967e-06  3.96636e-07   1.8593e-08  6.23203e-08  2.74888e-09  9.00211e-08  2.51153e-10  3.09509e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.5036, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         4.49619e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.159082, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.92784, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5882.69       2378.2      1004.97      1078.32      144.176       8345.3       1807.5      56.1992
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.00203, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099081, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11978, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000462213  0.000462352  0.000301033
      low eigenvalue method done, cpu time[sec] = 1.13096, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000462  0.000301         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.72e-05  0.000301         1
         *Z       ---       ---  2.29e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000300942
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999996  3.69015e-06  3.16647e-06  3.59441e-07  1.73331e-08  5.67863e-08  2.54376e-09  8.83028e-08    2.525e-10  3.09517e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.51346, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         5.24555e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158425, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.92068, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5042.31      2038.46      861.405      924.275       123.58      7153.12      1549.28      48.1707
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 1.00186, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.099405, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11988, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000440575    0.0004407  0.000282652
      low eigenvalue method done, cpu time[sec] = 1.1304, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000441  0.000283         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.58e-05  0.000283         1
         *Z       ---       ---  2.29e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000282572
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999997  3.46489e-06  2.97746e-06   3.3025e-07  1.63131e-08  5.24435e-08  2.37982e-09    8.669e-08  2.53728e-10  3.09526e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.50258, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1700 K
            Well    Collision, 1/sec
              W1         5.99492e+09
      global relaxation matrix dimension = 274
      setting global matrices ... done, cpu time[sec] = 0.158255, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.92233, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4412.02      1783.65      753.729      808.741      108.132      6258.98      1355.62      42.1494
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.993692, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.100112, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.11277, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000422186  0.000422299  0.000267235
      low eigenvalue method done, cpu time[sec] = 1.12385, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000422  0.000267         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  2.46e-05  0.000267         1
         *Z       ---       ---  2.29e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000267164
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999997  3.27595e-06  2.81817e-06  3.06551e-07  1.54623e-08  4.89142e-08   2.2445e-09  8.51762e-08  2.54851e-10  3.09534e-16

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.49876, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1800 K
      Energy reference = 66819 1/cm
      Energy step      = 300 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -65.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006385
         W1 Well: collisional kernel bandwidth = 46
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.221125
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.104226
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.113186
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.42932
         W1 Well: minimal relaxation eigenvalue = 0.0417774
         W1 Well: maximal relaxation eigenvalue = 1.02413
         W1 Well:       grid size = 270
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -14181 1/cm
         B1 Barrier:        grid size = 223
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -81 1/cm
         B2 Barrier:        grid size = 223
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -81 1/cm
         B3 Barrier:        grid size = 239
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4881 1/cm
         B4 Barrier:        grid size = 244
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6381 1/cm
         B5 Barrier: nonpositive number of states at -23181 1/cm => truncating
         B5 Barrier:        grid size = 300
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23181 1/cm
         B6 Barrier:        grid size = 218
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1418 1/cm
         B7 Barrier:        grid size = 208
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4418 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16718 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.19495, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 270
      MasterEquation::Barrier::truncate: real weight = 2.88388e+29
      MasterEquation::Barrier::truncate: effective weight = 3.94197e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -14181 -14181 8.45e+07 1.13e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -81 1.05e+18
         B2    -81 4.46e+17
         B3  -4881 1.98e+17
         B4  -6381 2.11e+17
         B5 -14181 2.85e+16
         B6   1419 1.55e+18
         B7   4419 3.47e+17
         B8  16719 1.19e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.27e-14  2.35e-14  4.13e-15  1.27e-15  1.68e-21  5.03e-13  2.15e-11  4.52e-06
          R  7.85e+13         1      1.85     0.324    0.0995  1.32e-07      39.5  1.69e+03  3.55e+08
         P1  4.25e+13     0.542         1     0.176    0.0539  7.15e-08      21.4       915  1.92e+08
         P2  2.42e+14      3.08      5.69         1     0.307  4.07e-07       122  5.21e+03  1.09e+09
         P3  7.89e+14      10.1      18.6      3.26         1  1.33e-06       397   1.7e+04  3.57e+09
         P4  5.95e+20  7.57e+06   1.4e+07  2.46e+06  7.53e+05         1  2.99e+08  1.28e+10  2.69e+15
         P5  1.99e+12    0.0253    0.0468   0.00821   0.00252  3.34e-09         1      42.8  8.98e+06
         P6  4.65e+10  0.000592   0.00109  0.000192  5.89e-05  7.82e-11    0.0234         1   2.1e+05
         P7  2.21e+05  2.82e-09   5.2e-09  9.14e-10   2.8e-10  3.72e-16  1.11e-07  4.76e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.13e-16  1.13e-15  1.99e-16   6.1e-17   8.1e-23  2.42e-14  1.04e-12  2.18e-07
          R  1.63e+15         1      1.85     0.324    0.0995  1.32e-07      39.5  1.69e+03  3.55e+08
         P1  8.83e+14     0.542         1     0.176    0.0539  7.15e-08      21.4       915  1.92e+08
         P2  5.03e+15      3.08      5.69         1     0.307  4.07e-07       122  5.21e+03  1.09e+09
         P3  1.64e+16      10.1      18.6      3.26         1  1.33e-06       397   1.7e+04  3.57e+09
         P4  1.23e+22  7.57e+06   1.4e+07  2.46e+06  7.53e+05         1  2.99e+08  1.28e+10  2.69e+15
         P5  4.13e+13    0.0253    0.0468   0.00821   0.00252  3.34e-09         1      42.8  8.98e+06
         P6  9.66e+11  0.000592   0.00109  0.000192  5.89e-05  7.82e-11    0.0234         1   2.1e+05
         P7   4.6e+06  2.82e-09   5.2e-09  9.14e-10   2.8e-10  3.72e-16  1.11e-07  4.76e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.2087, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.44417e+08
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.154409, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.83862, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             193309      82275.2      36482.5      38963.1      5255.36       284835        63915      2197.39
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.950576, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.097153, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06658, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00142351   0.00142525    0.0012178
      low eigenvalue method done, cpu time[sec] = 1.07696, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00143   0.00122         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.98e-05   0.00122     0.999
         *Z       ---       ---  1.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00121632
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999965  3.45372e-05  2.72837e-05  5.67897e-06  1.86477e-07  1.00737e-06  3.34558e-08  3.68952e-07  1.16501e-09  2.73048e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.35512, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         4.33252e+08
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.153006, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.84719, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            64436.4      27425.1      12160.8      12987.7      1751.79        94945        21305      732.463
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.946404, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095995, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06089, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00119509   0.00119625  0.000970393
      low eigenvalue method done, cpu time[sec] = 1.07126, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0012  0.000969         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.35e-05  0.000969         1
         *Z       ---       ---  1.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000969452
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999972  2.75275e-05  2.26051e-05  3.79539e-06  1.35887e-07   6.0521e-07  2.23631e-08  3.78476e-07  1.16987e-09   2.7305e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.35516, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         7.22087e+08
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.153222, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.84218, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            38661.9        16455       7296.5      7792.61      1051.07        56967        12783      439.478
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.952604, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.096804, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06757, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00108535   0.00108628  0.000855608
      low eigenvalue method done, cpu time[sec] = 1.07791, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00109  0.000855         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.59e-05  0.000855         1
         *Z       ---       ---  1.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000854876
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999976  2.42741e-05  2.02161e-05   3.0737e-06  1.16941e-07  4.80455e-07  1.86237e-08  3.80414e-07  1.17414e-09  2.73053e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.35716, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.01092e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.153413, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.84877, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27615.6      11753.6      5211.78      5566.15      750.765      40690.7      9130.71      313.913
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.950662, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095864, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06479, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00101278   0.00101357  0.000781434
      low eigenvalue method done, cpu time[sec] = 1.07507, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00101  0.000781         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  6.09e-05  0.000781         1
         *Z       ---       ---  1.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000780824
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999978  2.21714e-05  1.86113e-05  2.65564e-06  1.05654e-07  4.12773e-07  1.65016e-08  3.80001e-07  1.17809e-09  2.73056e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.36168, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.29976e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.153491, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.85475, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21478.8      9141.69      4053.61      4329.23      583.928      31648.3      7101.66      244.154
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.95454, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09587, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06876, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000958725  0.000959422  0.000727168
      low eigenvalue method done, cpu time[sec] = 1.07967, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000959  0.000727         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.72e-05  0.000727         1
         *Z       ---       ---  1.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000726639
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999979  2.06328e-05  1.74099e-05  2.37235e-06  9.77679e-08  3.68375e-07  1.50648e-08  3.78569e-07   1.1818e-09  2.73059e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.37413, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         1.44417e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.153806, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.84969, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19330.9      8227.52      3648.25      3896.31      525.536      28483.5       6391.5      219.739
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.950252, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.097313, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06658, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000936156  0.000936816  0.000704766
      low eigenvalue method done, cpu time[sec] = 1.07717, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000937  0.000704         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.57e-05  0.000704         1
         *Z       ---       ---  1.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00070427
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99998  1.99977e-05  1.69078e-05  2.26072e-06   9.4591e-08  3.51151e-07  1.44964e-08  3.77645e-07  1.18357e-09   2.7306e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.36618, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         2.16626e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.153538, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.85811, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12887.3      5485.01      2432.17      2597.54      350.357        18989         4261      146.493
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.953268, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.096235, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06786, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000850111  0.000850639  0.000620828
      low eigenvalue method done, cpu time[sec] = 1.0785, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000851   0.00062         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     5e-05   0.00062         1
         *Z       ---       ---  1.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000620443
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999982  1.76174e-05  1.49964e-05  1.86877e-06  8.30308e-08  2.91631e-07  1.24779e-08  3.72103e-07  1.19184e-09  2.73067e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.37559, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         2.88835e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.154096, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.85356, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9665.46      4113.76      1824.12      1948.15      262.768      14241.8      3195.75      109.869
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.953517, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.096559, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06838, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000790151  0.000790596  0.000563785
      low eigenvalue method done, cpu time[sec] = 1.07901, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000791  0.000563         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   4.6e-05  0.000563         1
         *Z       ---       ---  1.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000563467
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999984  1.59996e-05  1.36727e-05  1.62486e-06  7.54315e-08   2.5515e-07  1.11926e-08  3.66089e-07  1.19924e-09  2.73074e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.37272, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         3.61043e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.154246, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.85348, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7732.37      3291.01       1459.3      1558.52      210.214      11393.4       2556.6      87.8956
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.951746, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095882, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06616, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000744464  0.000744852   0.00052117
      low eigenvalue method done, cpu time[sec] = 1.07713, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000745  0.000521         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.31e-05  0.000521         1
         *Z       ---       ---  1.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000520898
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999985  1.47908e-05  1.26721e-05   1.4538e-06  6.98607e-08  2.29712e-07  1.02707e-08  3.60151e-07  1.20595e-09  2.73081e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.36979, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         4.33252e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.155375, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.85365, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6443.64      2742.51      1216.08      1298.77      175.179       9494.5       2130.5      73.2463
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.953059, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.095869, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06724, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000707762  0.000708107  0.000487495
      low eigenvalue method done, cpu time[sec] = 1.07785, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000708  0.000487         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  4.07e-05  0.000487         1
         *Z       ---       ---  1.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000487258
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999986  1.38356e-05  1.18748e-05  1.32508e-06  6.55107e-08  2.10603e-07  9.56262e-09  3.54447e-07  1.21207e-09  2.73087e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.37219, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         5.05461e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.153706, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.85186, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5523.12      2350.72      1042.36      1113.23      150.153      8138.14      1826.14      62.7826
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.949553, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.096782, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06532, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000677223  0.000677534  0.000459871
      low eigenvalue method done, cpu time[sec] = 1.0759, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000678   0.00046         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.87e-05   0.00046         1
         *Z       ---       ---  1.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000459659
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999987   1.3052e-05  1.12168e-05  1.22358e-06  6.19706e-08  1.95534e-07  8.99379e-09  3.49021e-07  1.21767e-09  2.73094e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.36742, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1800 K
            Well    Collision, 1/sec
              W1         5.77669e+09
      global relaxation matrix dimension = 270
      setting global matrices ... done, cpu time[sec] = 0.153487, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.85543, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            4832.73      2056.88      912.062      974.076      131.384      7120.88      1597.87      54.9347
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.953503, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.096956, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.06877, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000651164  0.000651449  0.000436593
      low eigenvalue method done, cpu time[sec] = 1.07941, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000651  0.000436         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  3.71e-05  0.000436         1
         *Z       ---       ---  1.32e+21
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000436402
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999988  1.23916e-05  1.06596e-05  1.14084e-06  5.90037e-08  1.83234e-07  8.52215e-09  3.43875e-07  1.22281e-09  2.73101e-15

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.37381, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 1900 K
      Energy reference = 69599 1/cm
      Energy step      = 317 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -63.6 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006124
         W1 Well: collisional kernel bandwidth = 46
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.217601
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.101266
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.10991
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.416447
         W1 Well: minimal relaxation eigenvalue = 0.0397149
         W1 Well: maximal relaxation eigenvalue = 1.03095
         W1 Well:       grid size = 267
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -15039 1/cm
         B1 Barrier:        grid size = 220
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -141 1/cm
         B2 Barrier:        grid size = 219
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 176 1/cm
         B3 Barrier:        grid size = 235
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4895 1/cm
         B4 Barrier:        grid size = 240
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6481 1/cm
         B5 Barrier: nonpositive number of states at -23599 1/cm => truncating
         B5 Barrier:        grid size = 294
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23598 1/cm
         B6 Barrier:        grid size = 215
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1444 1/cm
         B7 Barrier:        grid size = 205
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4614 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16660 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.17189, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 267
      MasterEquation::Barrier::truncate: real weight = 2.05555e+29
      MasterEquation::Barrier::truncate: effective weight = 2.96895e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -15039 -15039 5.77e+07 1.52e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -141 1.49e+18
         B2    177 6.65e+17
         B3  -4895  3.1e+17
         B4  -6481 3.29e+17
         B5 -15039 4.48e+16
         B6   1445 2.27e+18
         B7   4615 5.27e+17
         B8  16661 1.99e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.88e-15  1.29e-14  2.68e-15  8.84e-16  2.54e-21  2.44e-13  9.19e-12  1.21e-06
          R  1.45e+14         1      1.87      0.39     0.128  3.69e-07      35.5  1.33e+03  1.76e+08
         P1  7.77e+13     0.534         1     0.208    0.0687  1.97e-07        19       713  9.43e+07
         P2  3.73e+14      2.57       4.8         1      0.33  9.46e-07        91  3.42e+03  4.52e+08
         P3  1.13e+15      7.79      14.6      3.03         1  2.87e-06       276  1.04e+04  1.37e+09
         P4  3.94e+20  2.71e+06  5.07e+06  1.06e+06  3.48e+05         1  9.62e+07  3.62e+09  4.78e+14
         P5   4.1e+12    0.0282    0.0527     0.011   0.00362  1.04e-08         1      37.6  4.97e+06
         P6  1.09e+11  0.000749    0.0014  0.000292  9.62e-05  2.76e-10    0.0266         1  1.32e+05
         P7  8.24e+05  5.67e-09  1.06e-08  2.21e-09  7.28e-10  2.09e-15  2.01e-07  7.57e-06         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.64e-16  3.06e-16  6.38e-17   2.1e-17  6.04e-23  5.81e-15  2.19e-13  2.89e-08
          R   6.1e+15         1      1.87      0.39     0.128  3.69e-07      35.5  1.33e+03  1.76e+08
         P1  3.26e+15     0.534         1     0.208    0.0687  1.97e-07        19       713  9.43e+07
         P2  1.57e+16      2.57       4.8         1      0.33  9.46e-07        91  3.42e+03  4.52e+08
         P3  4.75e+16      7.79      14.6      3.03         1  2.87e-06       276  1.04e+04  1.37e+09
         P4  1.66e+22  2.71e+06  5.07e+06  1.06e+06  3.48e+05         1  9.62e+07  3.62e+09  4.78e+14
         P5  1.72e+14    0.0282    0.0527     0.011   0.00362  1.04e-08         1      37.6  4.97e+06
         P6  4.57e+12  0.000749    0.0014  0.000292  9.62e-05  2.76e-10    0.0266         1  1.32e+05
         P7  3.46e+07  5.67e-09  1.06e-08  2.21e-09  7.28e-10  2.09e-15  2.01e-07  7.57e-06         1
   MasterEquation::set:  done, cpu time[sec] = 1.18539, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1          1.3944e+08
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.1503, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80139, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             209844      93826.1      43669.8      46437.3      6314.77       320539      74339.9      2809.56
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.919295, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094967, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03212, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00191724   0.00192049    0.0016975
      low eigenvalue method done, cpu time[sec] = 1.04218, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00192   0.00169         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000117   0.00169     0.999
         *Z       ---       ---  8.18e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00169462
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999897   0.00010284  8.15804e-05  1.65392e-05  5.53746e-07  2.92833e-06  9.84088e-08  1.22749e-06  4.68326e-09  1.89551e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.27335, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         4.18319e+08
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.150898, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.79832, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            69948.1      31275.4      14556.6      15479.1      2104.92       106846        24780      936.519
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.923373, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.093626, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03493, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00163371   0.00163595   0.00137617
      low eigenvalue method done, cpu time[sec] = 1.04492, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00164   0.00137         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.74e-05   0.00137     0.999
         *Z       ---       ---  8.18e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00137428
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999917  8.33994e-05  6.86569e-05  1.12654e-05   4.1244e-07  1.79904e-06  6.73331e-08  1.26073e-06  4.70204e-09  1.89552e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.27227, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         6.97198e+08
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.1501, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.8003, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            41968.9      18765.2      8733.96      9287.46      1262.95      64107.7        14868      561.911
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.919989, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094229, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03209, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00149563   0.00149746   0.00122489
      low eigenvalue method done, cpu time[sec] = 1.0422, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0015   0.00122         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.79e-05   0.00122     0.999
         *Z       ---       ---  8.18e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00122339
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999926  7.42428e-05  6.19452e-05  9.21853e-06  3.58962e-07  1.44512e-06  5.67513e-08   1.2697e-06  4.71837e-09  1.89554e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.27091, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         9.76077e+08
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.150177, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.81061, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            29977.8      13403.7      6238.55       6633.9       902.11      45791.2        10620      401.365
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.920048, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094256, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03259, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00140359   0.00140517   0.00112628
      low eigenvalue method done, cpu time[sec] = 1.04286, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00141   0.00113         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.18e-05   0.00113     0.999
         *Z       ---       ---  8.18e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00112502
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999932  6.82726e-05   5.7393e-05  8.02405e-06  3.26879e-07  1.25185e-06  5.07062e-08  1.27087e-06  4.73337e-09  1.89556e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.28208, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         1.25496e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.150247, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.8111, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              23316      10425.1       4852.2       5159.7      701.641      35615.4      8259.99      312.173
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.924663, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.093601, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03644, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00133464   0.00133605   0.00105367
      low eigenvalue method done, cpu time[sec] = 1.04699, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00134   0.00105         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.72e-05   0.00105     0.999
         *Z       ---       ---  8.18e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00105257
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999936  6.38758e-05  5.39617e-05  7.21021e-06  3.04338e-07  1.12442e-06  4.65917e-08   1.2685e-06  4.74741e-09  1.89558e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.37871, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1          1.3944e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.150403, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80078, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20984.4      9382.61      4366.98      4643.73      631.477      32053.9      7433.99      280.956
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.922258, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095665, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.54183, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00130575   0.00130708   0.00102358
      low eigenvalue method done, cpu time[sec] = 1.55247, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00131   0.00102         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.53e-05   0.00102     0.999
         *Z       ---       ---  8.18e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00102253
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999938  6.20532e-05  5.25212e-05  6.88843e-06  2.95225e-07  1.07482e-06  4.49586e-08  1.26656e-06  4.75414e-09  1.89559e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.78501, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         2.09159e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.150455, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80086, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13989.6      6255.07      2911.32      3095.82      420.984      21369.2      4955.99      187.304
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.919902, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094556, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0326, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00119499   0.00119607  0.000910123
      low eigenvalue method done, cpu time[sec] = 1.04319, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0012  0.000909         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.8e-05  0.000909         1
         *Z       ---       ---  8.18e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000909295
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999945  5.51814e-05  4.70027e-05  5.75271e-06  2.61882e-07  9.02569e-07  3.91287e-08   1.2532e-06  4.78537e-09  1.89563e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.27456, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         2.78879e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.150031, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80775, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10492.2       4691.3      2183.49      2321.86      315.738      16026.9      3716.99      140.478
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.91576, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094222, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.02834, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00111721   0.00111814  0.000832346
      low eigenvalue method done, cpu time[sec] = 1.03879, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00112  0.000832         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   6.3e-05  0.000832         1
         *Z       ---       ---  8.18e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000831654
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99995  5.04696e-05  4.31464e-05  5.04065e-06  2.39784e-07  7.96202e-07  3.53874e-08  1.23742e-06  4.81336e-09  1.89568e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.2752, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         3.48599e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.149852, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.81142, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8393.77      3753.04      1746.79      1857.49      252.591      12821.5       2973.6      112.382
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.921278, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.093534, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03242, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00105759   0.00105841  0.000773848
      low eigenvalue method done, cpu time[sec] = 1.04244, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00106  0.000773         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.92e-05  0.000773         1
         *Z       ---       ---  8.18e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00077325
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999953  4.69253e-05   4.0211e-05   4.5383e-06  2.23479e-07  7.21588e-07  3.26874e-08  1.22126e-06  4.83876e-09  1.89572e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.28134, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         4.18319e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.150501, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.81284, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6994.81      3127.54      1455.66      1547.91      210.492      10684.6         2478      93.6519
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.921812, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.093487, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.0336, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00100946   0.00101019  0.000727365
      low eigenvalue method done, cpu time[sec] = 1.04358, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00101  0.000727         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.62e-05  0.000727         1
         *Z       ---       ---  8.18e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000726836
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999956  4.41087e-05  3.78587e-05   4.1584e-06  2.10679e-07  6.65257e-07  3.06026e-08  1.20539e-06  4.86199e-09  1.89577e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.28617, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         4.88039e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.150759, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80475, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5995.55      2680.75      1247.71      1326.78      180.422      9158.25         2124       80.273
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.927195, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094445, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03982, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0  0.000969242   0.00096991  0.000689049
      low eigenvalue method done, cpu time[sec] = 1.05048, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00097  0.000689         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.37e-05  0.000689         1
         *Z       ---       ---  8.18e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000688575
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999958  4.17868e-05  3.59077e-05  3.85757e-06  2.00212e-07   6.2064e-07  2.89202e-08  1.19006e-06  4.88333e-09  1.89581e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.28674, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 1900 K
            Well    Collision, 1/sec
              W1         5.57758e+09
      global relaxation matrix dimension = 267
      setting global matrices ... done, cpu time[sec] = 0.151444, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.80545, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            5246.11      2345.65      1091.75      1160.93      157.869      8013.47       1858.5      70.2389
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.925859, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.09336, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.03733, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0009348  0.000935414  0.000656627
      low eigenvalue method done, cpu time[sec] = 1.04811, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0  0.000935  0.000656         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  5.15e-05  0.000656         1
         *Z       ---       ---  8.18e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.000656196
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99996  3.98218e-05  3.42487e-05  3.61141e-06  1.91404e-07  5.84083e-07  2.75197e-08  1.17535e-06  4.90302e-09  1.89586e-14

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.2849, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2000 K
      Energy reference = 72380 1/cm
      Energy step      = 333 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -61.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00657
         W1 Well: collisional kernel bandwidth = 46
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.193212
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.098464
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.11414
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.407971
         W1 Well: minimal relaxation eigenvalue = 0.0380154
         W1 Well: maximal relaxation eigenvalue = 1.03779
         W1 Well:       grid size = 264
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -15531 1/cm
         B1 Barrier:        grid size = 218
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -213 1/cm
         B2 Barrier:        grid size = 217
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 118 1/cm
         B3 Barrier:        grid size = 232
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4875 1/cm
         B4 Barrier:        grid size = 236
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6207 1/cm
         B5 Barrier: nonpositive number of states at -23191 1/cm => truncating
         B5 Barrier:        grid size = 287
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23190 1/cm
         B6 Barrier:        grid size = 213
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1451 1/cm
         B7 Barrier:        grid size = 204
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4448 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16769 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.13797, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 264
      MasterEquation::Barrier::truncate: real weight = 1.56224e+29
      MasterEquation::Barrier::truncate: effective weight = 2.37032e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -15531 -15531 4.62e+07 2.05e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -213 2.08e+18
         B2    119 9.75e+17
         B3  -4875 4.77e+17
         B4  -6207 5.05e+17
         B5 -15531 6.92e+16
         B6   1452 3.29e+18
         B7   4449 7.87e+17
         B8  16770 3.25e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.37e-15  6.38e-15  1.55e-15  5.44e-16  3.13e-21  1.08e-13  3.62e-12  3.16e-07
          R  2.97e+14         1       1.9      0.46     0.162  9.29e-07      32.1  1.08e+03  9.38e+07
         P1  1.57e+14     0.527         1     0.242    0.0853   4.9e-07      16.9       568  4.95e+07
         P2  6.47e+14      2.18      4.13         1     0.352  2.02e-06      69.8  2.34e+03  2.04e+08
         P3  1.84e+15      6.19      11.7      2.84         1  5.75e-06       199  6.66e+03   5.8e+08
         P4   3.2e+20  1.08e+06  2.04e+06  4.95e+05  1.74e+05         1  3.46e+07  1.16e+09  1.01e+14
         P5  9.26e+12    0.0312    0.0591    0.0143   0.00504  2.89e-08         1      33.5  2.92e+06
         P6  2.76e+11  0.000929   0.00176  0.000427   0.00015  8.63e-10    0.0298         1  8.71e+04
         P7  3.17e+06  1.07e-08  2.02e-08   4.9e-09  1.72e-09  9.91e-15  3.42e-07  1.15e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.02e-17  9.51e-17  2.31e-17  8.11e-18  4.66e-23  1.61e-15   5.4e-14   4.7e-09
          R  1.99e+16         1       1.9      0.46     0.162  9.29e-07      32.1  1.08e+03  9.38e+07
         P1  1.05e+16     0.527         1     0.242    0.0853   4.9e-07      16.9       568  4.95e+07
         P2  4.34e+16      2.18      4.13         1     0.352  2.02e-06      69.8  2.34e+03  2.04e+08
         P3  1.23e+17      6.19      11.7      2.84         1  5.75e-06       199  6.66e+03   5.8e+08
         P4  2.15e+22  1.08e+06  2.04e+06  4.95e+05  1.74e+05         1  3.46e+07  1.16e+09  1.01e+14
         P5  6.21e+14    0.0312    0.0591    0.0143   0.00504  2.89e-08         1      33.5  2.92e+06
         P6  1.85e+13  0.000929   0.00176  0.000427   0.00015  8.63e-10    0.0298         1  8.71e+04
         P7  2.13e+08  1.07e-08  2.02e-08   4.9e-09  1.72e-09  9.91e-15  3.42e-07  1.15e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.15153, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         1.34876e+08
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.14795, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.74621, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             225976       105937      51762.4      54820.6      7511.75       357223      85445.8      3531.57
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.897752, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.094141, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00938, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00280507   0.00281247    0.0026355
      low eigenvalue method done, cpu time[sec] = 1.0194, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00281   0.00263         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000171   0.00263     0.999
         *Z       ---       ---  4.97e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00262857
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999732  0.000267548  0.000213188  4.20141e-05  1.43847e-06  7.43788e-06  2.53135e-07  3.55926e-06  1.61599e-08  1.07367e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.18675, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         4.04628e+08
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.147835, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.74702, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            75325.4      35312.3      17254.1      18273.5      2503.92       119074      28481.9      1177.19
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.893737, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091619, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00327, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00242537   0.00243064   0.00217102
      low eigenvalue method done, cpu time[sec] = 1.01329, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00243   0.00217         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000144   0.00217     0.999
         *Z       ---       ---  4.97e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00216631
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99978  0.000220497  0.000181989  2.91622e-05  1.09366e-06  4.66856e-06  1.77099e-07   3.6582e-06  1.62219e-08  1.07368e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.17936, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1          6.7438e+08
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.14659, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.74727, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            45195.2      21187.4      10352.5      10964.1      1502.35      71444.5      17089.2      706.315
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.896539, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091723, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00601, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00223787   0.00224224   0.00194924
      low eigenvalue method done, cpu time[sec] = 1.01605, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00224   0.00195         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000131   0.00195     0.999
         *Z       ---       ---  4.97e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00194545
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999802  0.000198016  0.000165528  2.41037e-05  9.61938e-07  3.79243e-06  1.50969e-07  3.68987e-06  1.62753e-08  1.07369e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.18385, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         9.44132e+08
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.147802, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.75442, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            32282.3      15133.8      7394.63      7831.51      1073.11      51031.8      12206.5      504.511
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.898509, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091903, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00802, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00211189    0.0021157   0.00180349
      low eigenvalue method done, cpu time[sec] = 1.01836, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00212    0.0018         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000123    0.0018     0.999
         *Z       ---       ---  4.97e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00180024
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999817  0.000183237  0.000154264  2.11299e-05    8.824e-07  3.31106e-06   1.3595e-07  3.69925e-06   1.6324e-08   1.0737e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.19334, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         1.21388e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.148744, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.75771, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25108.5      11770.8      5751.38      6091.17      834.639      39691.4      9493.98      392.397
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.898185, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091536, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00723, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00201698    0.0020204   0.00169552
      low eigenvalue method done, cpu time[sec] = 1.01726, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00202   0.00169         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000116   0.00169     0.999
         *Z       ---       ---  4.97e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00169265
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999828  0.000172285  0.000145718  1.90929e-05  8.26237e-07  2.99218e-06  1.25679e-07  3.69819e-06  1.63696e-08  1.07371e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.19747, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         1.34876e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.14817, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.74955, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22597.6      10593.7      5176.24      5482.06      751.175      35722.3      8544.58      353.157
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.896937, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.092085, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00709, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00197705   0.00198032   0.00165059
      low eigenvalue method done, cpu time[sec] = 1.01711, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00198   0.00165         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000113   0.00165     0.999
         *Z       ---       ---  4.97e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00164787
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999832  0.000167728  0.000142115  1.82848e-05  8.03455e-07  2.86767e-06  1.21589e-07  3.69535e-06  1.63914e-08  1.07371e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.18907, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         2.02314e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.148097, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.75784, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15065.1      7062.46      3450.83       3654.7      500.783      23814.8      5696.39      235.438
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.899591, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.092073, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00917, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00182319   0.00182589   0.00148028
      low eigenvalue method done, cpu time[sec] = 1.01924, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00183   0.00148         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000103   0.00148     0.999
         *Z       ---       ---  4.97e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00147809
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99985  0.000150447  0.000128232  1.54186e-05  7.19675e-07  2.43328e-06  1.06919e-07  3.66925e-06  1.64926e-08  1.07374e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.20064, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         2.69752e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.147893, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.75512, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11298.8      5296.85      2588.12      2741.03      375.587      17861.1      4272.29      176.579
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.904535, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.092443, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01507, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00171431   0.00171665   0.00136258
      low eigenvalue method done, cpu time[sec] = 1.02549, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00172   0.00136         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.62e-05   0.00136     0.999
         *Z       ---       ---  4.97e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00136073
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999861  0.000138501  0.000118449  1.36087e-05  6.63734e-07  2.16318e-06  9.74372e-08  3.63431e-06  1.65834e-08  1.07376e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.20202, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1          3.3719e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.147379, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.76066, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9039.05      4237.48       2070.5      2192.82       300.47      14288.9      3417.83      141.263
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.90321, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091022, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01195, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00163036   0.00163244    0.0012735
      low eigenvalue method done, cpu time[sec] = 1.02203, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00163   0.00127         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  9.08e-05   0.00127     0.999
         *Z       ---       ---  4.97e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00127188
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999871  0.000129458  0.000110953  1.23247e-05  6.22212e-07  1.97266e-06  9.05551e-08  3.59678e-06   1.6666e-08  1.07379e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.20323, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         4.04628e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.147973, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.75535, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7532.54      3531.23      1725.41      1827.35      250.392      11907.4      2848.19      117.719
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.908303, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091336, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01741, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00156226   0.00156413   0.00120235
      low eigenvalue method done, cpu time[sec] = 1.02746, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00156    0.0012         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.64e-05    0.0012     0.999
         *Z       ---       ---  4.97e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00120091
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999878  0.000122234  0.000104915  1.13492e-05  5.89449e-07  1.82816e-06  8.52156e-08  3.55894e-06  1.67418e-08  1.07381e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.20458, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         4.72066e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.147702, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.75385, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6456.46      3026.77      1478.93       1566.3      214.621      10206.4      2441.31      100.902
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.902332, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091131, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01115, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00150511   0.00150683   0.00114344
      low eigenvalue method done, cpu time[sec] = 1.0212, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00151   0.00114         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  8.28e-05   0.00114     0.999
         *Z       ---       ---  4.97e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00114214
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999884  0.000116252  9.98837e-05  1.05737e-05  5.62543e-07  1.71324e-06  8.08886e-08  3.52173e-06  1.68116e-08  1.07383e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.19672, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2000 K
            Well    Collision, 1/sec
              W1         5.39504e+09
      global relaxation matrix dimension = 264
      setting global matrices ... done, cpu time[sec] = 0.148311, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.75665, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             5649.4      2648.42      1294.06      1370.51      187.794      8930.57      2136.15      88.2893
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.902981, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.091598, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.01262, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.001456   0.00145759    0.0010934
      low eigenvalue method done, cpu time[sec] = 1.02266, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00146   0.00109         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  7.97e-05   0.00109     0.999
         *Z       ---       ---  4.97e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00109221
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999889   0.00011117  9.55887e-05  9.93683e-06  5.39812e-07  1.61875e-06   7.7273e-08  3.48555e-06  1.68764e-08  1.07386e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.20191, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2100 K
      Energy reference = 75160 1/cm
      Energy step      = 350 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -59.2 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006448
         W1 Well: collisional kernel bandwidth = 45
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.207358
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.097139
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.103778
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.39646
         W1 Well: minimal relaxation eigenvalue = 0.0363114
         W1 Well: maximal relaxation eigenvalue = 1.04529
         W1 Well:       grid size = 261
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -16190 1/cm
         B1 Barrier:        grid size = 215
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -90 1/cm
         B2 Barrier:        grid size = 215
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -90 1/cm
         B3 Barrier:        grid size = 228
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4640 1/cm
         B4 Barrier:        grid size = 233
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6390 1/cm
         B5 Barrier: nonpositive number of states at -23890 1/cm => truncating
         B5 Barrier:        grid size = 283
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23890 1/cm
         B6 Barrier:        grid size = 211
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1309 1/cm
         B7 Barrier:        grid size = 202
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4459 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16709 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.12613, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 261
      MasterEquation::Barrier::truncate: real weight = 1.25127e+29
      MasterEquation::Barrier::truncate: effective weight = 1.99542e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -16190 -16190  3.4e+07 2.73e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -90 2.87e+18
         B2    -90 1.41e+18
         B3  -4640 7.23e+17
         B4  -6390 7.63e+17
         B5 -16190 1.05e+17
         B6   1310 4.69e+18
         B7   4460 1.16e+18
         B8  16710  5.2e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.77e-15   3.4e-15  9.44e-16  3.52e-16  3.79e-21  5.18e-14  1.56e-12  9.35e-08
          R  5.65e+14         1      1.92     0.533     0.199  2.14e-06      29.2       882  5.28e+07
         P1  2.94e+14     0.521         1     0.278     0.104  1.12e-06      15.2       459  2.75e+07
         P2  1.06e+15      1.88       3.6         1     0.373  4.02e-06      54.8  1.65e+03  9.91e+07
         P3  2.84e+15      5.03      9.66      2.68         1  1.08e-05       147  4.43e+03  2.65e+08
         P4  2.64e+20  4.67e+05  8.97e+05  2.49e+05  9.29e+04         1  1.36e+07  4.12e+08  2.47e+13
         P5  1.93e+13    0.0342    0.0657    0.0182   0.00681  7.33e-08         1      30.2  1.81e+06
         P6   6.4e+11   0.00113   0.00218  0.000604  0.000225  2.43e-09    0.0331         1  5.99e+04
         P7  1.07e+07  1.89e-08  3.64e-08  1.01e-08  3.77e-09  4.06e-14  5.53e-07  1.67e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.73e-17  3.32e-17   9.2e-18  3.43e-18   3.7e-23  5.05e-16  1.52e-14  9.12e-10
          R  5.79e+16         1      1.92     0.533     0.199  2.14e-06      29.2       882  5.28e+07
         P1  3.01e+16     0.521         1     0.278     0.104  1.12e-06      15.2       459  2.75e+07
         P2  1.09e+17      1.88       3.6         1     0.373  4.02e-06      54.8  1.65e+03  9.91e+07
         P3  2.91e+17      5.03      9.66      2.68         1  1.08e-05       147  4.43e+03  2.65e+08
         P4   2.7e+22  4.67e+05  8.97e+05  2.49e+05  9.29e+04         1  1.36e+07  4.12e+08  2.47e+13
         P5  1.98e+15    0.0342    0.0657    0.0182   0.00681  7.33e-08         1      30.2  1.81e+06
         P6  6.56e+13   0.00113   0.00218  0.000604  0.000225  2.43e-09    0.0331         1  5.99e+04
         P7   1.1e+09  1.89e-08  3.64e-08  1.01e-08  3.77e-09  4.06e-14  5.53e-07  1.67e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.14102, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.30674e+08
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.145341, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.68667, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             241604       118535      60801.7        64151      8853.09       394622      97165.1      4371.25
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.892305, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.090685, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 1.00077, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00387257    0.0038874   0.00382702
      low eigenvalue method done, cpu time[sec] = 1.01091, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00389   0.00381         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000234   0.00381     0.998
         *Z       ---       ---  3.21e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00381243
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999376  0.000623509  0.000498216   9.6375e-05  3.34737e-06  1.69299e-05  5.83513e-07  9.17977e-06  4.89755e-08  5.11015e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.11135, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         3.92021e+08
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143592, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70173, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            80534.6      39511.7      20267.2      21383.7      2951.03       131541      32388.4      1457.08
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.879043, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089243, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.985627, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00339102   0.00340187   0.00319708
      low eigenvalue method done, cpu time[sec] = 0.99578, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0034   0.00319         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000199   0.00319     0.998
         *Z       ---       ---  3.21e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0031869
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999479  0.000521205  0.000430914  6.78392e-05  2.59439e-06  1.08441e-05  4.16887e-07  9.44073e-06  4.91567e-08  5.11019e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.10626, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         6.53369e+08
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.142811, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70598, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            48320.8        23707      12160.3      12830.2      1770.62      78924.3        19433      874.251
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.876265, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.090057, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.983877, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00315045   0.00315957   0.00289277
      low eigenvalue method done, cpu time[sec] = 0.993937, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00316   0.00288         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000183   0.00288     0.999
         *Z       ---       ---  3.21e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00288443
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999528  0.000471737  0.000394828  5.65304e-05  2.30406e-06  8.90089e-06  3.59114e-07  9.53509e-06  4.93108e-08  5.11023e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.11013, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         9.14716e+08
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143296, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70663, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            34514.8      16933.6      8685.95      9164.43      1264.73      56374.5      13880.7      624.465
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.877245, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089017, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.984016, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00298773   0.00299578   0.00269138
      low eigenvalue method done, cpu time[sec] = 0.994196, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.003   0.00268         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000171   0.00268     0.999
         *Z       ---       ---  3.21e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00268416
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999561  0.000438983  0.000369919  4.98518e-05  2.12773e-06  7.82736e-06  3.25724e-07  9.57274e-06  4.94511e-08  5.11028e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.11013, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.17606e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143147, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70664, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            26844.9      13170.6      6755.74      7127.89      983.676      43846.8      10796.1      485.695
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.867124, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089331, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.973776, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00286453   0.00287182   0.00254141
      low eigenvalue method done, cpu time[sec] = 0.98366, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00287   0.00253         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000163   0.00253     0.999
         *Z       ---       ---  3.21e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00253497
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999585  0.000414585  0.000350906  4.52608e-05  2.00265e-06  7.11318e-06  3.02791e-07  9.58306e-06  4.95817e-08  5.11032e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.09884, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.30674e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143749, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.70668, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            24160.4      11853.5      6080.17       6415.1      885.309      39462.2      9716.51      437.125
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.866403, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088973, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.972948, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00281255   0.00281953   0.00247881
      low eigenvalue method done, cpu time[sec] = 0.982598, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00282   0.00247         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000159   0.00247     0.999
         *Z       ---       ---  3.21e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00247268
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999596  0.000404398  0.000342862   4.3435e-05  1.95176e-06  6.83358e-06  2.93634e-07  9.58203e-06  4.96442e-08  5.11034e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.09814, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         1.96011e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.144211, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.71088, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16106.9      7902.34      4053.44      4276.73      590.206      26308.1      6477.67      291.417
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.869398, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089032, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.975738, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00261127   0.00261713   0.00224029
      low eigenvalue method done, cpu time[sec] = 0.986171, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00262   0.00224         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000146   0.00224     0.999
         *Z       ---       ---  3.21e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00223528
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999634  0.000365571  0.000311686  3.69363e-05  1.76379e-06  5.85405e-06  2.60651e-07  9.54353e-06  4.99335e-08  5.11045e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.1091, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         2.61347e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.144151, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.71075, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12080.2      5926.75      3040.08      3207.55      442.654      19731.1      4858.26      218.563
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.869584, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088877, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.9757, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00246789   0.00247302   0.00207427
      low eigenvalue method done, cpu time[sec] = 0.986098, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00247   0.00207         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000137   0.00207     0.999
         *Z       ---       ---  3.21e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00206997
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999661  0.000338536  0.000289545  3.28101e-05  1.63743e-06  5.24122e-06  2.39197e-07  9.47827e-06  5.01931e-08  5.11055e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.10911, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         3.26684e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.14411, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.71366, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9664.16       4741.4      2432.07      2566.04      354.124      15784.9       3886.6       174.85
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.863143, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089117, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.96996, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00235676   0.00236136   0.00194791
      low eigenvalue method done, cpu time[sec] = 0.980308, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00236   0.00194         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000129   0.00194     0.999
         *Z       ---       ---  3.21e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00194412
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999682  0.000317954   0.00027248  2.98698e-05  1.54314e-06  4.80684e-06  2.23547e-07  9.40313e-06  5.04295e-08  5.11066e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.10728, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         3.92021e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143482, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.71259, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8053.46      3951.17      2026.72      2138.37      295.103      13154.1      3238.84      145.708
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.867992, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089806, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.975743, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00226623   0.00227042   0.00184652
      low eigenvalue method done, cpu time[sec] = 0.986053, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00227   0.00184         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000124   0.00184     0.999
         *Z       ---       ---  3.21e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00184311
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999699  0.000301434  0.000258666  2.76275e-05  1.46841e-06  4.47602e-06  2.11352e-07  9.32465e-06  5.06467e-08  5.11077e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.11062, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         4.57358e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.143913, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.71806, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6902.97      3386.72      1737.19      1832.89      252.945      11274.9      2776.15      124.893
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.871258, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089947, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.978456, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00218998   0.00219384   0.00176224
      low eigenvalue method done, cpu time[sec] = 0.988819, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00219   0.00176         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000119   0.00176     0.999
         *Z       ---       ---  3.21e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00175914
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999712    0.0002877  0.000247107   2.5839e-05  1.40679e-06  4.21198e-06  2.01433e-07  9.24575e-06  5.08476e-08  5.11087e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.1189, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2100 K
            Well    Collision, 1/sec
              W1         5.22695e+09
      global relaxation matrix dimension = 261
      setting global matrices ... done, cpu time[sec] = 0.144435, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.7124, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             6040.1      2963.38      1520.04      1603.78      221.327      9865.54      2429.13      109.281
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.869642, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089587, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.97679, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00212423   0.00212783   0.00169039
      low eigenvalue method done, cpu time[sec] = 0.987121, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00213   0.00169         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000115   0.00169     0.999
         *Z       ---       ---  3.21e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00168754
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999724   0.00027599  0.000237204   2.4366e-05  1.35455e-06  3.99418e-06  1.93117e-07  9.16782e-06  5.10343e-08  5.11098e-13

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.11219, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2200 K
      Energy reference = 77940 1/cm
      Energy step      = 367 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -57 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.00629
         W1 Well: collisional kernel bandwidth = 45
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.205894
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.095546
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.102862
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.389365
         W1 Well: minimal relaxation eigenvalue = 0.0345446
         W1 Well: maximal relaxation eigenvalue = 1.05541
         W1 Well:       grid size = 259
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -17113 1/cm
         B1 Barrier:        grid size = 213
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -230 1/cm
         B2 Barrier:        grid size = 212
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 136 1/cm
         B3 Barrier:        grid size = 225
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4634 1/cm
         B4 Barrier:        grid size = 230
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6469 1/cm
         B5 Barrier: nonpositive number of states at -23719 1/cm => truncating
         B5 Barrier:        grid size = 277
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23718 1/cm
         B6 Barrier:        grid size = 209
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1237 1/cm
         B7 Barrier:        grid size = 200
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4540 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16651 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.11543, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 259
      MasterEquation::Barrier::truncate: real weight = 1.04826e+29
      MasterEquation::Barrier::truncate: effective weight = 1.75287e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -17113 -17113 2.18e+07 3.61e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -230 3.92e+18
         B2    137 2.01e+18
         B3  -4634 1.08e+18
         B4  -6469 1.14e+18
         B5 -17113 1.58e+17
         B6   1238 6.61e+18
         B7   4541 1.67e+18
         B8  16652 8.16e+16
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.01e-15  1.96e-15  6.14e-16  2.42e-16  4.61e-21   2.7e-14  7.39e-13  3.15e-08
          R  9.94e+14         1      1.95      0.61      0.24  4.58e-06      26.8       735  3.13e+07
         P1  5.11e+14     0.514         1     0.313     0.123  2.35e-06      13.8       377  1.61e+07
         P2  1.63e+15      1.64      3.19         1     0.394   7.5e-06      43.9   1.2e+03  5.13e+07
         P3  4.14e+15      4.16       8.1      2.54         1  1.91e-05       112  3.06e+03   1.3e+08
         P4  2.17e+20  2.18e+05  4.25e+05  1.33e+05  5.25e+04         1  5.85e+06  1.61e+08  6.84e+12
         P5  3.71e+13    0.0373    0.0727    0.0228   0.00897  1.71e-07         1      27.4  1.17e+06
         P6  1.35e+12   0.00136   0.00265   0.00083  0.000327  6.23e-09    0.0365         1  4.26e+04
         P7  3.18e+07   3.2e-08  6.22e-08  1.95e-08  7.68e-09  1.46e-13  8.56e-07  2.35e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  6.57e-18  1.28e-17  4.01e-18  1.58e-18  3.01e-23  1.76e-16  4.83e-15  2.06e-10
          R  1.52e+17         1      1.95      0.61      0.24  4.58e-06      26.8       735  3.13e+07
         P1  7.82e+16     0.514         1     0.313     0.123  2.35e-06      13.8       377  1.61e+07
         P2  2.49e+17      1.64      3.19         1     0.394   7.5e-06      43.9   1.2e+03  5.13e+07
         P3  6.33e+17      4.16       8.1      2.54         1  1.91e-05       112  3.06e+03   1.3e+08
         P4  3.32e+22  2.18e+05  4.25e+05  1.33e+05  5.25e+04         1  5.85e+06  1.61e+08  6.84e+12
         P5  5.68e+15    0.0373    0.0727    0.0228   0.00897  1.71e-07         1      27.4  1.17e+06
         P6  2.07e+14   0.00136   0.00265   0.00083  0.000327  6.23e-09    0.0365         1  4.26e+04
         P7  4.86e+09   3.2e-08  6.22e-08  1.95e-08  7.68e-09  1.46e-13  8.56e-07  2.35e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.12872, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         1.26789e+08
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141584, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.65309, elapsed time[sec] = 1
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             256654       131557      70833.2      74471.1      10346.2       432510       109436      5336.36
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.850118, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.089541, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.956789, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00506377   0.00509009   0.00519058
      low eigenvalue method done, cpu time[sec] = 0.966648, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00509   0.00516         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000298   0.00516     0.997
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00516378
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998678   0.00132194   0.00105987  0.000200244   7.1084e-06  3.52073e-05   1.2284e-06  2.14278e-05  1.32747e-07  2.09342e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.02448, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         3.80367e+08
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141491, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.65818, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            85551.3      43852.4      23611.1      24823.7      3448.73       144170      36478.7      1778.79
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.850905, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087541, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.955253, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0044839   0.00450362   0.00439229
      low eigenvalue method done, cpu time[sec] = 0.965362, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0045   0.00437         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000257   0.00437     0.998
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00437308
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99888   0.00111952  0.000927352  0.000143092  5.60316e-06  2.29547e-05  8.93967e-07  2.20481e-05  1.33223e-07  2.09344e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.02767, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         6.33945e+08
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141527, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.67495, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            51330.8      26311.4      14166.6      14894.2      2069.24      86502.1      21887.2      1067.27
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.846817, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087635, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.951773, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00419143   0.00420823   0.00400258
      low eigenvalue method done, cpu time[sec] = 0.962183, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00421   0.00399         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000236   0.00399     0.998
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00398662
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998979   0.00102058  0.000855332  0.000120236  5.01944e-06   1.9018e-05  7.77359e-07  2.22933e-05  1.33623e-07  2.09345e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.04217, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         8.87523e+08
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141863, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.67738, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            36664.8      18793.9        10119      10638.7      1478.03      61787.2      15633.7      762.337
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.849011, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087677, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.953777, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00399242   0.00400738   0.00374297
      low eigenvalue method done, cpu time[sec] = 0.963912, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00401   0.00373         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000223   0.00373     0.998
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00372901
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999045  0.000954634  0.000805237  0.000106663  4.66333e-06  1.68337e-05  7.09686e-07  2.24081e-05  1.33986e-07  2.09347e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.04549, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1          1.1411e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141876, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.68677, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            28517.1      14617.5      7870.36      8274.57      1149.58      48056.7      12159.6      592.929
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.851076, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087684, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.955832, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00384106   0.00385471   0.00354871
      low eigenvalue method done, cpu time[sec] = 0.96561, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00385   0.00354         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000213   0.00354     0.998
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00353616
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999095  0.000905263  0.000766787  9.72948e-05  4.40981e-06  1.53756e-05  6.63048e-07  2.24585e-05  1.34323e-07  2.09349e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.0562, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         1.26789e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141965, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.67981, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            25665.4      13155.7      7083.32      7447.11      1034.62        43251      10943.6      533.636
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.849127, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087952, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.954332, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00377702   0.00379013   0.00346736
      low eigenvalue method done, cpu time[sec] = 0.96467, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00379   0.00346         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000208   0.00346     0.998
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00345538
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999115  0.000884583  0.000750462  9.35595e-05  4.30641e-06  1.48035e-05  6.44383e-07  2.24688e-05  1.34483e-07   2.0935e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.05098, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         1.90183e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.142541, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.68059, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17110.3      8770.48      4722.21      4964.74      689.746        28834      7295.74      355.757
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.850201, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087829, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.955232, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00352799   0.00353913   0.00315596
      low eigenvalue method done, cpu time[sec] = 0.965486, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00354   0.00315         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000192   0.00315     0.998
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00314603
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999195  0.000805389  0.000686871  8.02117e-05  3.92299e-06  1.27922e-05  5.76916e-07  2.24379e-05  1.35227e-07  2.09354e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.05383, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         2.53578e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.142479, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.68641, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12832.7      6577.86      3541.66      3723.56      517.309      21625.5      5471.81      266.818
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.851029, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087742, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.955734, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00334951   0.00335936   0.00293776
      low eigenvalue method done, cpu time[sec] = 0.96581, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00336   0.00293         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00018   0.00293     0.999
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00292916
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99925   0.00074987  0.000641383  7.16887e-05  3.66375e-06  1.15272e-05  5.32795e-07   2.2337e-05  1.35893e-07  2.09358e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.05703, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         3.16972e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141173, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.68145, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10266.2      5262.29      2833.33      2978.84      413.847      17300.4      4377.45      213.454
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.845479, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087624, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.95021, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00321053   0.00321943   0.00277084
      low eigenvalue method done, cpu time[sec] = 0.960038, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00322   0.00276         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000172   0.00276     0.999
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00276318
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999293  0.000707379  0.000606131  6.55883e-05   3.4694e-06  1.06268e-05  5.00468e-07  2.22069e-05  1.36501e-07  2.09362e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.04547, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         3.80367e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141964, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.68907, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8555.13      4385.24      2361.11      2482.37      344.873        14417      3647.87      177.879
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.845435, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08767, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.950362, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00309686   0.00310503   0.00263631
      low eigenvalue method done, cpu time[sec] = 0.960284, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00311   0.00263         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000164   0.00263     0.999
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00262938
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999327  0.000673126  0.000577465  6.09187e-05  3.31474e-06  9.93853e-06  4.75184e-07  2.20641e-05   1.3706e-07  2.09366e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.05515, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         4.43761e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.141574, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.68141, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7332.97      3758.78      2023.81      2127.75      295.605      12357.4      3126.75      152.467
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.840777, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088101, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.946184, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00300081   0.00300839   0.00252408
      low eigenvalue method done, cpu time[sec] = 0.956046, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00301   0.00252         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000158   0.00252     0.999
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00251772
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.999355  0.000644541  0.000553388  5.71822e-05  3.18678e-06  9.38751e-06   4.5455e-07  2.19161e-05  1.37578e-07   2.0937e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.04144, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2200 K
            Well    Collision, 1/sec
              W1         5.07156e+09
      global relaxation matrix dimension = 259
      setting global matrices ... done, cpu time[sec] = 0.14127, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.67751, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6416.35      3288.93      1770.83      1861.78      258.655      10812.8       2735.9      133.409
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.846581, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.088953, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.953043, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00291775   0.00292484   0.00242809
      low eigenvalue method done, cpu time[sec] = 0.963428, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00292   0.00242         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000153   0.00242     0.999
         *Z       ---       ---   2.2e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00242221
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99938   0.00062009   0.00053269  5.40962e-05  3.07797e-06  8.93169e-06  4.37201e-07  2.17671e-05  1.38061e-07  2.09374e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.0463, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2300 K
      Energy reference = 80720 1/cm
      Energy step      = 383 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -54.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006325
         W1 Well: collisional kernel bandwidth = 45
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.204463
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.093833
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.099746
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.381085
         W1 Well: minimal relaxation eigenvalue = 0.0331121
         W1 Well: maximal relaxation eigenvalue = 1.06557
         W1 Well:       grid size = 257
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -17710 1/cm
         B1 Barrier:        grid size = 211
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -93 1/cm
         B2 Barrier:        grid size = 211
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -93 1/cm
         B3 Barrier:        grid size = 223
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4688 1/cm
         B4 Barrier:        grid size = 227
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6221 1/cm
         B5 Barrier: nonpositive number of states at -23839 1/cm => truncating
         B5 Barrier:        grid size = 273
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23838 1/cm
         B6 Barrier:        grid size = 207
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1439 1/cm
         B7 Barrier:        grid size = 199
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4502 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16758 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.10256, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 257
      MasterEquation::Barrier::truncate: real weight = 9.12336e+28
      MasterEquation::Barrier::truncate: effective weight = 1.59209e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -17710 -17710 1.62e+07 4.76e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -93  5.3e+18
         B2    -93 2.83e+18
         B3  -4688  1.6e+18
         B4  -6221 1.68e+18
         B5 -17710 2.34e+17
         B6   1440  9.2e+18
         B7   4503 2.39e+18
         B8  16759 1.26e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.41e-16  1.07e-15  3.73e-16  1.54e-16  4.95e-21  1.33e-14  3.35e-13  1.05e-08
          R  1.85e+15         1      1.97      0.69     0.285  9.15e-06      24.7       620  1.94e+07
         P1  9.38e+14     0.507         1      0.35     0.145  4.64e-06      12.5       314  9.82e+06
         P2  2.68e+15      1.45      2.86         1     0.414  1.33e-05      35.8       899  2.81e+07
         P3  6.48e+15       3.5      6.91      2.42         1  3.21e-05      86.5  2.17e+03  6.79e+07
         P4  2.02e+20  1.09e+05  2.16e+05  7.54e+04  3.12e+04         1   2.7e+06  6.77e+07  2.12e+12
         P5   7.5e+13    0.0405    0.0799     0.028    0.0116  3.71e-07         1      25.1  7.85e+05
         P6  2.98e+12   0.00161   0.00318   0.00111   0.00046  1.48e-08    0.0398         1  3.12e+04
         P7  9.55e+07  5.16e-08  1.02e-07  3.56e-08  1.47e-08  4.73e-13  1.27e-06   3.2e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.73e-18  5.39e-18  1.88e-18  7.79e-19   2.5e-23  6.74e-17  1.69e-15  5.29e-11
          R  3.66e+17         1      1.97      0.69     0.285  9.15e-06      24.7       620  1.94e+07
         P1  1.86e+17     0.507         1      0.35     0.145  4.64e-06      12.5       314  9.82e+06
         P2  5.31e+17      1.45      2.86         1     0.414  1.33e-05      35.8       899  2.81e+07
         P3  1.28e+18       3.5      6.91      2.42         1  3.21e-05      86.5  2.17e+03  6.79e+07
         P4     4e+22  1.09e+05  2.16e+05  7.54e+04  3.12e+04         1   2.7e+06  6.77e+07  2.12e+12
         P5  1.48e+16    0.0405    0.0799     0.028    0.0116  3.71e-07         1      25.1  7.85e+05
         P6  5.91e+14   0.00161   0.00318   0.00111   0.00046  1.48e-08    0.0398         1  3.12e+04
         P7  1.89e+10  5.16e-08  1.02e-07  3.56e-08  1.47e-08  4.73e-13  1.27e-06   3.2e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.11616, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.23185e+08
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.140401, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.6346, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             271064       144938      81897.6      85818.2      11997.7       470670       122193       6433.7
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.833917, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087417, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.938681, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00689298   0.00694469   0.00748948
      low eigenvalue method done, cpu time[sec] = 0.948399, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00694   0.00743         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000407   0.00743     0.996
         *Z       ---       ---   1.5e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00743381
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997432   0.00256822   0.00206636  0.000381231  1.38403e-05   6.6996e-05   2.3694e-06  4.58864e-05  3.26468e-07  7.52955e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.98186, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         3.69555e+08
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.139336, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.63325, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            90354.8      48312.6      27299.2      28606.1      3999.23       156890        40731      2144.57
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.830329, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086407, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.933602, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00617236   0.00621203   0.00641573
      low eigenvalue method done, cpu time[sec] = 0.943271, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00621   0.00637         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000354   0.00637     0.997
         *Z       ---       ---   1.5e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00637483
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997798   0.00220236   0.00182789  0.000276632  1.10927e-05  4.44753e-05   1.7566e-06  4.72013e-05  3.27596e-07  7.52961e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.97429, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         6.15924e+08
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.139666, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.63929, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            54212.9      28987.6      16379.5      17163.6      2399.54      94134.1      24438.6      1286.74
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.831563, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086838, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.935695, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00580445   0.00583866   0.00588526
      low eigenvalue method done, cpu time[sec] = 0.945355, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00584   0.00585         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000328   0.00585     0.997
         *Z       ---       ---   1.5e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00585082
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997979   0.00202133   0.00169638  0.000234293  1.00202e-05  3.71892e-05  1.54156e-06  4.77541e-05  3.28536e-07  7.52966e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.98276, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         8.62294e+08
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.139053, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.64025, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            38723.5      20705.4      11699.7      12259.7      1713.96      67238.6      17456.1      919.101
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.832581, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087012, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.936655, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00555249   0.00558324   0.00552961
      low eigenvalue method done, cpu time[sec] = 0.946357, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00558    0.0055         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00031    0.0055     0.997
         *Z       ---       ---   1.5e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0054992
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1       0.9981   0.00189985    0.0016042  0.000209012   9.3629e-06  3.31285e-05  1.41622e-06  4.80381e-05  3.29383e-07  7.52972e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.98497, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.10866e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.139398, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.65099, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            30118.3      16104.2      9099.74      9535.36      1333.08      52296.7        13577      714.856
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.835033, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.087108, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.939288, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00535999   0.00538824   0.00526222
      low eigenvalue method done, cpu time[sec] = 0.949795, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00539   0.00523         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000297   0.00523     0.997
         *Z       ---       ---   1.5e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00523467
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998192   0.00180846   0.00153306  0.000191493  8.89324e-06  3.04085e-05  1.32955e-06  4.81873e-05  3.30167e-07  7.52977e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.00107, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.23185e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.139978, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.65236, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            27106.4      14493.8      8189.76      8581.82      1199.77        47067      12219.3       643.37
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.835504, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086833, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.939343, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00527831   0.00530553   0.00514992
      low eigenvalue method done, cpu time[sec] = 0.949659, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00531   0.00512         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000291   0.00512     0.997
         *Z       ---       ---   1.5e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00512354
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99823   0.00177007   0.00150275  0.000184491  8.70123e-06  2.93387e-05  1.29479e-06  4.82302e-05  3.30541e-07   7.5298e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.00143, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         1.84777e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.140794, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.64804, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              18071      9662.53      5459.84      5721.22      799.846        31378      8146.19      428.914
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.833772, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084903, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.935631, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00495932   0.00498275   0.00471818
      low eigenvalue method done, cpu time[sec] = 0.945657, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00498    0.0047         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00027    0.0047     0.998
         *Z       ---       ---   1.5e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00469602
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998378   0.00162237   0.00138412  0.000159382  7.98656e-06  2.55654e-05  1.16869e-06  4.82646e-05   3.3227e-07  7.52994e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.12449, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1          2.4637e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.139832, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.6456, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13553.2       7246.9      4094.88      4290.91      599.885      23533.5      6109.64      321.685
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.828026, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086791, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.931685, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00472935   0.00475025   0.00441379
      low eigenvalue method done, cpu time[sec] = 0.941835, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00475   0.00439         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000254   0.00439     0.998
         *Z       ---       ---   1.5e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00439439
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998482   0.00151817   0.00129869  0.000143266  7.50069e-06  2.31801e-05   1.0858e-06  4.81405e-05  3.33819e-07  7.53008e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.98807, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         3.07962e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.140508, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.65853, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10842.6      5797.52       3275.9      3432.73      479.908      18826.8      4887.71      257.348
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.83394, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.086561, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.937401, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00454943   0.00456847    0.0041798
      low eigenvalue method done, cpu time[sec] = 0.947851, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00457   0.00416         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000243   0.00416     0.998
         *Z       ---       ---   1.5e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0041624
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998562   0.00143802   0.00123213  0.000131685  7.13481e-06  2.14754e-05  1.02482e-06  4.79451e-05  3.35232e-07  7.53022e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.00797, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         3.69555e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.14003, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.65139, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9035.48      4831.26      2729.92      2860.61      399.923        15689       4073.1      214.457
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.833363, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086626, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.93708, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00440173   0.00441931   0.00399048
      low eigenvalue method done, cpu time[sec] = 0.947169, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00442   0.00397         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000233   0.00397     0.998
         *Z       ---       ---   1.5e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00397462
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998627   0.00137314   0.00117778   0.00012279  6.84256e-06  2.01679e-05  9.76951e-07  4.77146e-05  3.36534e-07  7.53035e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.99895, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1         4.31147e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.140054, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.64998, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             7744.7      4141.08      2339.93      2451.95      342.791      13447.7      3491.22       183.82
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.834764, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086918, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.938861, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00427652   0.00429292   0.00383199
      low eigenvalue method done, cpu time[sec] = 0.949015, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00429   0.00382         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000225   0.00382     0.998
         *Z       ---       ---   1.5e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00381736
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998681   0.00131881   0.00113196  0.000115651  6.59997e-06  1.91179e-05  9.37768e-07  4.74667e-05  3.37744e-07  7.53049e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.99858, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2300 K
            Well    Collision, 1/sec
              W1          4.9274e+09
      global relaxation matrix dimension = 257
      setting global matrices ... done, cpu time[sec] = 0.139811, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.65314, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            6776.61      3623.45      2047.44      2145.46      299.942      11766.8      3054.82      160.843
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.836313, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086791, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.940155, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00416792   0.00418334   0.00369605
      low eigenvalue method done, cpu time[sec] = 0.950283, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00418   0.00368         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000218   0.00368     0.998
         *Z       ---       ---   1.5e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00368243
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.998728    0.0012722   0.00109245  0.000109741  6.39307e-06  1.82471e-05  9.04731e-07  4.72107e-05  3.38874e-07  7.53063e-12

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 3.0042, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2400 K
      Energy reference = 83500 1/cm
      Energy step      = 400 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -52.4 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005797
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.199074
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.093407
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.09511
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.376185
         W1 Well: minimal relaxation eigenvalue = 0.0316754
         W1 Well: maximal relaxation eigenvalue = 1.07765
         W1 Well:       grid size = 255
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -18500 1/cm
         B1 Barrier:        grid size = 209
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -100 1/cm
         B2 Barrier:        grid size = 209
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -100 1/cm
         B3 Barrier:        grid size = 221
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4900 1/cm
         B4 Barrier:        grid size = 225
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6500 1/cm
         B5 Barrier: nonpositive number of states at -23700 1/cm => truncating
         B5 Barrier:        grid size = 268
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23700 1/cm
         B6 Barrier:        grid size = 205
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1499 1/cm
         B7 Barrier:        grid size = 197
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4699 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16699 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.08277, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 255
      MasterEquation::Barrier::truncate: real weight = 8.20324e+28
      MasterEquation::Barrier::truncate: effective weight = 1.49507e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -18500 -18500 1.08e+07 6.22e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -100 7.08e+18
         B2   -100 3.94e+18
         B3  -4900 2.34e+18
         B4  -6500 2.44e+18
         B5 -18500 3.43e+17
         B6   1500 1.27e+19
         B7   4700 3.36e+18
         B8  16700 1.91e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.05e-16  6.09e-16  2.35e-16  1.02e-16  5.27e-21  6.96e-15  1.61e-13   3.8e-09
          R  3.28e+15         1         2     0.772     0.334  1.73e-05      22.8       529  1.25e+07
         P1  1.64e+15       0.5         1     0.386     0.167  8.64e-06      11.4       265  6.23e+06
         P2  4.25e+15       1.3      2.59         1     0.433  2.24e-05      29.6       686  1.61e+07
         P3  9.82e+15      2.99      5.98      2.31         1  5.17e-05      68.4  1.58e+03  3.73e+07
         P4   1.9e+20  5.79e+04  1.16e+05  4.47e+04  1.93e+04         1  1.32e+06  3.06e+07  7.21e+11
         P5  1.44e+14    0.0438    0.0875    0.0338    0.0146  7.56e-07         1      23.2  5.45e+05
         P6   6.2e+12   0.00189   0.00378   0.00146  0.000631  3.26e-08    0.0432         1  2.35e+04
         P7  2.63e+08  8.03e-08   1.6e-07   6.2e-08  2.68e-08  1.39e-12  1.83e-06  4.25e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.22e-18  2.45e-18  9.45e-19  4.09e-19  2.11e-23   2.8e-17  6.48e-16  1.52e-11
          R  8.17e+17         1         2     0.772     0.334  1.73e-05      22.8       529  1.25e+07
         P1  4.09e+17       0.5         1     0.386     0.167  8.64e-06      11.4       265  6.23e+06
         P2  1.06e+18       1.3      2.59         1     0.433  2.24e-05      29.6       686  1.61e+07
         P3  2.44e+18      2.99      5.98      2.31         1  5.17e-05      68.4  1.58e+03  3.73e+07
         P4  4.73e+22  5.79e+04  1.16e+05  4.47e+04  1.93e+04         1  1.32e+06  3.06e+07  7.21e+11
         P5  3.58e+16    0.0438    0.0875    0.0338    0.0146  7.56e-07         1      23.2  5.45e+05
         P6  1.54e+15   0.00189   0.00378   0.00146  0.000631  3.26e-08    0.0432         1  2.35e+04
         P7  6.56e+10  8.03e-08   1.6e-07   6.2e-08  2.68e-08  1.39e-12  1.83e-06  4.25e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.096, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1          1.1983e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137076, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.59017, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             284789       158614      94032.8      98226.9      13813.9       508899       135369      7669.32
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.81071, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085042, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.91276, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00906216   0.00915616     0.010349
      low eigenvalue method done, cpu time[sec] = 0.922859, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00916    0.0102         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000531    0.0102     0.995
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.010243
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995351   0.00464872   0.00375297  0.000676646  2.51513e-05  0.000119043  4.26747e-06  9.10437e-05  7.37941e-07  2.41733e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.90718, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         3.59491e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137897, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.59917, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            94929.6      52871.2      31344.3      32742.3      4604.62       169633        45123      2556.44
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.811553, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084694, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.913166, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00819425   0.00826786   0.00896283
      low eigenvalue method done, cpu time[sec] = 0.922731, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00827   0.00888         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000467   0.00888     0.996
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00888321
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995968   0.00403159   0.00335253  0.000497822  2.04634e-05  8.03327e-05  3.21756e-06  9.36548e-05  7.40405e-07  2.41735e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.91546, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         5.99151e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137377, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61431, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            56957.7      31722.7      18806.6      19645.4      2762.77       101780      27073.8      1533.86
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.812294, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085343, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.914615, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00774693   0.00781114    0.0082713
      low eigenvalue method done, cpu time[sec] = 0.924146, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00781    0.0082         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000434    0.0082     0.996
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00820344
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996277   0.00372308   0.00312884  0.000424759  1.86253e-05  6.77424e-05  2.84747e-06   9.4813e-05  7.42436e-07  2.41737e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.93223, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         8.38812e+08
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.136661, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61186, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            40684.1      22659.1      13433.3      14032.4      1973.41      72699.9      19338.4      1095.62
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.815997, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084831, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.917823, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00743892    0.0074971   0.00780502
      low eigenvalue method done, cpu time[sec] = 0.92732, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0075   0.00774         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000412   0.00774     0.996
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00774458
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996485   0.00351483   0.00297093   0.00038092  1.74948e-05  6.07003e-05  2.63104e-06  9.54506e-05  7.44258e-07  2.41738e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.93093, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         1.07847e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137283, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61096, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31643.2      17623.7      10448.1      10914.1      1534.87      56544.4        15041      852.146
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.814017, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085031, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.916078, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00720266   0.00725645     0.007453
      low eigenvalue method done, cpu time[sec] = 0.925639, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00726    0.0074         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000396    0.0074     0.996
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00739786
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996643   0.00335747   0.00284847  0.000350435  1.66847e-05  5.59697e-05  2.48097e-06  9.58232e-05  7.45942e-07   2.4174e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.92931, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1          1.1983e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137269, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61542, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            28478.9      15861.4      9403.28      9822.69      1381.39      50889.9      13536.9      766.932
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.81507, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.097507, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.929494, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00710216   0.00715414   0.00730476
      low eigenvalue method done, cpu time[sec] = 0.939638, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00715   0.00725         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000389   0.00725     0.996
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00725179
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996709   0.00329118   0.00279613  0.000338224  1.63528e-05  5.41058e-05  2.42067e-06  9.59464e-05  7.46744e-07  2.41741e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.94957, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         1.79745e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.138455, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.62299, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            18985.9      10574.2      6268.85      6548.46      920.924      33926.6      9024.59      511.288
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.81327, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084584, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.914891, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0067082   0.00675345   0.00673256
      low eigenvalue method done, cpu time[sec] = 0.924915, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00675   0.00669         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000362   0.00669     0.997
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00668754
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.996965    0.0030351   0.00259035  0.000294293  1.51136e-05   4.7512e-05  2.20131e-06  9.61963e-05  7.50446e-07  2.41745e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.94252, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         2.39661e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.13686, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61659, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14239.4      7930.68      4701.64      4911.35      690.693        25445      6768.44      383.466
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.812964, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084265, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.913822, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00642265   0.00646336   0.00632686
      low eigenvalue method done, cpu time[sec] = 0.923331, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00646   0.00629         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000343   0.00629     0.997
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00628708
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997147   0.00285335    0.0024412  0.000265963  1.42672e-05  4.33257e-05  2.05648e-06  9.61151e-05  7.53762e-07  2.41749e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.9323, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         2.99576e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137079, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.6248, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11391.5      6344.55      3761.31      3929.08      552.555        20356      5414.75      306.773
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.816268, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084688, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.917545, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00619833   0.00623567    0.0060136
      low eigenvalue method done, cpu time[sec] = 0.927626, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00624   0.00598         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000328   0.00598     0.997
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00597766
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997287   0.00271292   0.00232444  0.000245528  1.36272e-05   4.0323e-05  1.94953e-06  9.58766e-05  7.56789e-07  2.41753e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.94707, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         3.59491e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.137858, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.61955, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9492.96      5287.12      3134.43      3274.23      460.462      16963.3       4512.3      255.644
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.817571, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.085608, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.919619, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00601354   0.00604823   0.00575922
      low eigenvalue method done, cpu time[sec] = 0.929713, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00605   0.00573         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000316   0.00573     0.997
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00572625
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997401   0.00259882   0.00222872  0.000229785  1.31143e-05  3.80131e-05  1.86533e-06  9.55549e-05  7.59583e-07  2.41758e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.94563, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         4.19406e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.138244, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.6257, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8136.82      4531.82      2686.65      2806.48      394.682        14540      3867.68      219.123
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.819693, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.08493, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.921319, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00585643   0.00588896   0.00554561
      low eigenvalue method done, cpu time[sec] = 0.931435, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00589   0.00552         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000305   0.00552     0.997
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00551502
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.997497   0.00250296   0.00214776  0.000217116  1.26873e-05  3.61534e-05  1.79622e-06  9.51869e-05  7.62182e-07  2.41762e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.95385, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2400 K
            Well    Collision, 1/sec
              W1         4.79321e+09
      global relaxation matrix dimension = 255
      setting global matrices ... done, cpu time[sec] = 0.13771, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.63169, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7119.72      3965.34      2350.82      2455.67      345.347      12722.5      3384.22      191.733
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.825387, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.095849, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.927924, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00571981   0.00575053   0.00536187
      low eigenvalue method done, cpu time[sec] = 0.937975, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00575   0.00533         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000297   0.00533     0.997
         *Z       ---       ---  1.06e+20
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00533327
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99758   0.00242047   0.00207773  0.000206602  1.23222e-05  3.46072e-05   1.7378e-06  9.47931e-05  7.64613e-07  2.41766e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.9647, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2500 K
      Energy reference = 86280 1/cm
      Energy step      = 417 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -50.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006023
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.196603
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.091648
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.096074
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.371228
         W1 Well: minimal relaxation eigenvalue = 0.0304067
         W1 Well: maximal relaxation eigenvalue = 1.09091
         W1 Well:       grid size = 253
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -19220 1/cm
         B1 Barrier:        grid size = 207
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -38 1/cm
         B2 Barrier:        grid size = 207
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -38 1/cm
         B3 Barrier:        grid size = 218
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4625 1/cm
         B4 Barrier:        grid size = 222
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6293 1/cm
         B5 Barrier: nonpositive number of states at -23391 1/cm => truncating
         B5 Barrier:        grid size = 263
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23391 1/cm
         B6 Barrier:        grid size = 204
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1211 1/cm
         B7 Barrier:        grid size = 196
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4547 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16641 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.07513, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 253
      MasterEquation::Barrier::truncate: real weight = 7.58482e+28
      MasterEquation::Barrier::truncate: effective weight = 1.44111e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -19220 -19220 7.33e+06 8.09e+15
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1    -38 9.37e+18
         B2    -38 5.43e+18
         B3  -4625 3.38e+18
         B4  -6293 3.52e+18
         B5 -19220 4.97e+17
         B6   1212 1.72e+19
         B7   4548 4.69e+18
         B8  16642 2.85e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.72e-16  3.49e-16  1.48e-16  6.66e-17  5.34e-21  3.66e-15  7.87e-14  1.43e-09
          R   5.8e+15         1      2.02     0.856     0.386   3.1e-05      21.2       457  8.28e+06
         P1  2.86e+15     0.494         1     0.423     0.191  1.53e-05      10.5       225  4.09e+06
         P2  6.78e+15      1.17      2.37         1     0.451  3.62e-05      24.8       534  9.68e+06
         P3   1.5e+16      2.59      5.24      2.22         1  8.02e-05        55  1.18e+03  2.14e+07
         P4  1.87e+20  3.23e+04  6.54e+04  2.76e+04  1.25e+04         1  6.85e+05  1.47e+07  2.67e+11
         P5  2.73e+14    0.0471    0.0954    0.0403    0.0182  1.46e-06         1      21.5   3.9e+05
         P6  1.27e+13   0.00219   0.00443   0.00187  0.000846  6.78e-08    0.0465         1  1.81e+04
         P7     7e+08  1.21e-07  2.44e-07  1.03e-07  4.66e-08  3.74e-12  2.56e-06  5.51e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.87e-19  1.19e-18  5.03e-19  2.27e-19  1.82e-23  1.25e-17  2.68e-16  4.86e-12
          R   1.7e+18         1      2.02     0.856     0.386   3.1e-05      21.2       457  8.28e+06
         P1  8.41e+17     0.494         1     0.423     0.191  1.53e-05      10.5       225  4.09e+06
         P2  1.99e+18      1.17      2.37         1     0.451  3.62e-05      24.8       534  9.68e+06
         P3  4.41e+18      2.59      5.24      2.22         1  8.02e-05        55  1.18e+03  2.14e+07
         P4   5.5e+22  3.23e+04  6.54e+04  2.76e+04  1.25e+04         1  6.85e+05  1.47e+07  2.67e+11
         P5  8.02e+16    0.0471    0.0954    0.0403    0.0182  1.46e-06         1      21.5   3.9e+05
         P6  3.73e+15   0.00219   0.00443   0.00187  0.000846  6.78e-08    0.0465         1  1.81e+04
         P7  2.06e+11  1.21e-07  2.44e-07  1.03e-07  4.66e-08  3.74e-12  2.56e-06  5.51e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.08844, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.16698e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135048, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.55614, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             297792       172523       107274       111729      15800.5       547013       148899      9048.42
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.795828, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.084611, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.897123, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0118646    0.0120351    0.0143291
      low eigenvalue method done, cpu time[sec] = 0.906562, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.012    0.0141         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000699    0.0141     0.993
         *Z       ---       ---  7.56e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0141267
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992118   0.00788219   0.00639026   0.00112004  4.29074e-05  0.000198381  7.21413e-06  0.000169108  1.54933e-06  7.02413e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.84884, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         3.50095e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135852, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.57635, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            99264.1      57507.8      35757.9        37243      5266.83       182338      49632.9      3016.14
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.795518, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082645, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.894418, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0108262    0.0109623     0.012537
      low eigenvalue method done, cpu time[sec] = 0.904032, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.011    0.0124         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000619    0.0124     0.994
         *Z       ---       ---  7.56e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0123818
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.993091    0.0069086    0.0057585   0.00083691  3.53994e-05  0.000135957  5.52618e-06  0.000173884  1.55432e-06  7.02418e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.86721, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         5.83492e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135723, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.57502, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            59558.4      34504.7      21454.7      22345.8       3160.1       109403      29779.7      1809.68
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.795623, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082857, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.895544, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0102861    0.0104061    0.0116343
      low eigenvalue method done, cpu time[sec] = 0.905112, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0104    0.0115         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000578    0.0115     0.994
         *Z       ---       ---  7.56e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0115005
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.993583   0.00641689   0.00540186  0.000719609  3.24478e-05  0.000115574  4.92943e-06  0.000176101   1.5584e-06  7.02423e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.86667, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         8.16889e+08
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.134328, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58045, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            42541.7      24646.2      15324.8      15961.3      2257.21      78144.6      21271.2      1292.63
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.79303, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083069, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.893057, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00991226    0.0100218    0.0110223
      low eigenvalue method done, cpu time[sec] = 0.903112, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0      0.01    0.0109         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000551    0.0109     0.995
         *Z       ---       ---  7.56e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0109022
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.993917   0.00608303   0.00514852  0.000648786  3.06271e-05  0.000104138  4.57949e-06  0.000177386  1.56204e-06  7.02427e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.86739, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.05029e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.134403, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58312, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              33088      19169.3      11919.3      12414.3      1755.61      60779.2      16544.3      1005.38
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.794243, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082619, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.89332, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0096244   0.00972628    0.0105584
      low eigenvalue method done, cpu time[sec] = 0.902704, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00973    0.0104         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00053    0.0104     0.995
         *Z       ---       ---  7.56e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0104481
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99417   0.00582969   0.00495113  0.000599332   2.9319e-05  9.64367e-05  4.33627e-06  0.000178189   1.5654e-06  7.02432e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.87176, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.16698e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135483, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58246, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            29779.2      17252.3      10727.4      11172.9      1580.05      54701.3      14889.9      904.842
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.7972, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.082597, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.896495, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00950165   0.00960037    0.0103626
      low eigenvalue method done, cpu time[sec] = 0.906454, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0096    0.0103         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000521    0.0103     0.995
         *Z       ---       ---  7.56e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0102563
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.994277   0.00572267   0.00486655  0.000579473  2.87822e-05  9.33968e-05  4.23837e-06  0.000178475    1.567e-06  7.02434e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.87643, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         1.75048e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135814, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.59639, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            19852.8      11501.6      7151.57       7448.6      1053.37      36467.5      9926.58      603.228
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.79302, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083659, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.893392, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00901875   0.00910559   0.00960385
      low eigenvalue method done, cpu time[sec] = 0.903389, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00911   0.00951         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000487   0.00951     0.995
         *Z       ---       ---  7.56e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0095125
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.994692   0.00530764   0.00453253  0.000507773  2.67723e-05  8.26156e-05  3.88136e-06  0.000179218  1.57436e-06  7.02445e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.88819, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         2.33397e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135231, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58831, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14889.6      8626.17      5363.68      5586.45      790.025      27350.6      7444.93      452.421
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.797974, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083168, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.897599, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00866697   0.00874572   0.00906303
      low eigenvalue method done, cpu time[sec] = 0.907878, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00875   0.00898         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000463   0.00898     0.995
         *Z       ---       ---  7.56e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00898163
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.994989   0.00501144   0.00428902  0.000461302  2.53934e-05  7.57434e-05  3.64472e-06  0.000179328  1.58095e-06  7.02457e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.88417, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         2.91746e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.13508, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.59106, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11911.7      6900.93      4290.94      4469.16       632.02      21880.5      5955.95      361.937
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.799866, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083137, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.899456, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00838955   0.00846224   0.00864373
      low eigenvalue method done, cpu time[sec] = 0.909363, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00846   0.00857         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000444   0.00857     0.996
         *Z       ---       ---  7.56e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00856966
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995218   0.00478157   0.00409753  0.000427655  2.43472e-05  7.07983e-05  3.46941e-06  0.000179125  1.58697e-06  7.02468e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.88726, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         3.50095e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135482, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.59033, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9926.41      5750.78      3575.79       3724.3      526.683      18233.8      4963.29      301.614
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.799241, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.0833, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.898989, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00816026   0.00822817   0.00830208
      low eigenvalue method done, cpu time[sec] = 0.909319, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00823   0.00823         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000429   0.00823     0.996
         *Z       ---       ---  7.56e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00823373
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995406   0.00459413   0.00393996  0.000401651  2.35062e-05  6.69837e-05  3.33099e-06  0.000178748  1.59252e-06   7.0248e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.88779, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         4.08445e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135834, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.58515, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8508.35      4929.24      3064.96      3192.26      451.443      15628.9      4254.25      258.526
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.799702, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083214, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.899807, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0   0.00796479   0.00802877   0.00801435
      low eigenvalue method done, cpu time[sec] = 0.909779, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00803   0.00795         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000416   0.00795     0.996
         *Z       ---       ---  7.56e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00795063
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.995564   0.00443618   0.00380627  0.000380671  2.28042e-05   6.3905e-05  3.21709e-06  0.000178269   1.5977e-06  7.02491e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.88283, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2500 K
            Well    Collision, 1/sec
              W1         4.66794e+09
      global relaxation matrix dimension = 253
      setting global matrices ... done, cpu time[sec] = 0.135553, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.59306, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7444.81      4313.08      2681.84      2793.22      395.012      13675.3      3722.47      226.211
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.797002, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082332, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.895802, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0077944   0.00785508   0.00776623
      low eigenvalue method done, cpu time[sec] = 0.905795, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0   0.00786   0.00771         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000404   0.00771     0.996
         *Z       ---       ---  7.56e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.00770638
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1       0.9957   0.00429989   0.00369032  0.000363216  2.22024e-05  6.13399e-05   3.1206e-06  0.000177726  1.60255e-06  7.02502e-11

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.88763, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2600 K
      Energy reference = 89061 1/cm
      Energy step      = 433 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -47.8 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006073
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.195379
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.090228
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.094796
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.361889
         W1 Well: minimal relaxation eigenvalue = 0.0294321
         W1 Well: maximal relaxation eigenvalue = 1.10305
         W1 Well:       grid size = 251
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -19621 1/cm
         B1 Barrier:        grid size = 206
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -136 1/cm
         B2 Barrier:        grid size = 206
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -136 1/cm
         B3 Barrier:        grid size = 217
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4899 1/cm
         B4 Barrier:        grid size = 220
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6198 1/cm
         B5 Barrier: nonpositive number of states at -23519 1/cm => truncating
         B5 Barrier:        grid size = 260
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23518 1/cm
         B6 Barrier:        grid size = 203
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1162 1/cm
         B7 Barrier:        grid size = 195
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4626 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16750 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.06375, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 251
      MasterEquation::Barrier::truncate: real weight = 7.1877e+28
      MasterEquation::Barrier::truncate: effective weight = 1.41806e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -19621 -19621  5.9e+06 1.05e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -136 1.23e+19
         B2   -136  7.4e+18
         B3  -4899 4.83e+18
         B4  -6198 5.01e+18
         B5 -19621 7.13e+17
         B6   1163 2.32e+19
         B7   4627 6.46e+18
         B8  16750  4.2e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.62e-17  1.97e-16  9.05e-17  4.24e-17   5.1e-21   1.9e-15  3.82e-14  5.46e-10
          R  1.04e+16         1      2.05     0.941     0.441  5.31e-05      19.8       398  5.68e+06
         P1  5.07e+15     0.488         1     0.459     0.215  2.59e-05      9.66       194  2.77e+06
         P2  1.11e+16      1.06      2.18         1     0.469  5.64e-05        21       423  6.03e+06
         P3  2.36e+16      2.27      4.65      2.13         1   0.00012      44.9       901  1.29e+07
         P4  1.96e+20  1.88e+04  3.86e+04  1.77e+04  8.31e+03         1  3.73e+05  7.49e+06  1.07e+11
         P5  5.25e+14    0.0505     0.104    0.0475    0.0223  2.68e-06         1      20.1  2.87e+05
         P6  2.62e+13   0.00252   0.00516   0.00237   0.00111  1.34e-07    0.0498         1  1.43e+04
         P7  1.83e+09  1.76e-07  3.61e-07  1.66e-07  7.78e-08  9.35e-12  3.49e-06  7.01e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.99e-19  6.13e-19  2.81e-19  1.32e-19  1.59e-23  5.92e-18  1.19e-16   1.7e-12
          R  3.35e+18         1      2.05     0.941     0.441  5.31e-05      19.8       398  5.68e+06
         P1  1.63e+18     0.488         1     0.459     0.215  2.59e-05      9.66       194  2.77e+06
         P2  3.55e+18      1.06      2.18         1     0.469  5.64e-05        21       423  6.03e+06
         P3  7.58e+18      2.27      4.65      2.13         1   0.00012      44.9       901  1.29e+07
         P4   6.3e+22  1.88e+04  3.86e+04  1.77e+04  8.31e+03         1  3.73e+05  7.49e+06  1.07e+11
         P5  1.69e+17    0.0505     0.104    0.0475    0.0223  2.68e-06         1      20.1  2.87e+05
         P6  8.41e+15   0.00252   0.00516   0.00237   0.00111  1.34e-07    0.0498         1  1.43e+04
         P7  5.89e+11  1.76e-07  3.61e-07  1.66e-07  7.78e-08  9.35e-12  3.49e-06  7.01e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.07729, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         1.13767e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.134022, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52773, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             310054       186612       121657       126358      17963.6       584851       162722      10575.9
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.773404, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082738, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.87268, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0155807    0.0158974    0.0202491
      low eigenvalue method done, cpu time[sec] = 0.882212, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0159    0.0198         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000948    0.0198      0.99
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0198472
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.987406    0.0125939    0.0102387   0.00176491  6.89136e-05  0.000310286    1.147e-05  0.000296098   3.0478e-06  1.86915e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.79241, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1           3.413e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133645, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.54591, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             103351      62204.1      40552.3      42119.3      5987.88       194950      54240.7      3525.31
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.783529, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081791, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.882214, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0143351    0.0145923     0.017875
      low eigenvalue method done, cpu time[sec] = 0.891617, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0146    0.0176         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000845    0.0176     0.991
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0175611
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.988857    0.0111433    0.0093059   0.00133102  5.76733e-05  0.000216228  8.93404e-06  0.000304287  3.05723e-06  1.86917e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.8186, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         5.68833e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133407, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.53465, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            62010.7      37322.4      24331.4      25271.6      3592.73       116970      32544.4      2115.18
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.781973, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082399, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.880794, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0136823    0.0139112    0.0166704
      low eigenvalue method done, cpu time[sec] = 0.890669, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0139    0.0164         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000793    0.0164     0.992
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0163971
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.989595    0.0104047   0.00877186   0.00115109  5.32293e-05  0.000185317  8.03232e-06  0.000308216  3.06486e-06  1.86918e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.80852, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         7.96367e+08
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133714, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.54895, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            44293.4      26658.9      17379.5      18051.1      2566.23      83550.2        23246      1510.85
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.781468, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081934, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.879636, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0132285    0.0134389    0.0158502
      low eigenvalue method done, cpu time[sec] = 0.888904, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0134    0.0156         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000757    0.0156     0.992
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0156029
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.990099   0.00990076   0.00838994   0.00104225  5.04786e-05  0.000167911  7.50178e-06  0.000310577  3.07164e-06  1.86919e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.81784, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1          1.0239e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133181, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.54932, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            34450.4      20734.7      13517.4      14039.8      1995.96      64983.5      18080.2       1175.1
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.780467, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082279, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.879096, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0128779    0.0130747    0.0152265
      low eigenvalue method done, cpu time[sec] = 0.88836, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0131     0.015         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00073     0.015     0.992
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0149981
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.990483   0.00951698     0.008091  0.000966121   4.8497e-05  0.000156156  7.13208e-06  0.000312119  3.07789e-06   1.8692e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.81747, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         1.13767e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133103, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.54627, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            31005.4      18661.2      12165.7      12635.8      1796.36      58485.1      16272.2      1057.59
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.78158, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081488, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.879983, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0127281    0.0129192    0.0149626
      low eigenvalue method done, cpu time[sec] = 0.889916, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0129    0.0147         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000719    0.0147     0.993
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.014742
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.990646   0.00935449   0.00796253  0.000935514  4.76823e-05  0.000151508  6.98303e-06  0.000312692  3.08085e-06  1.86921e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.818, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1          1.7065e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133923, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.55194, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            20670.2      12440.8      8110.45      8423.85      1197.58      38990.1      10848.1      705.061
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.78258, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081929, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.881008, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.012137    0.0123067     0.013937
      low eigenvalue method done, cpu time[sec] = 0.891208, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0123    0.0137         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000675    0.0137     0.993
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0137455
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.991278   0.00872212   0.00745313  0.000824787  4.46234e-05  0.000134979  6.43804e-06  0.000314367   3.0945e-06  1.86923e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.82542, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         2.27533e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133936, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.5503, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            15502.7      9330.61      6082.84      6317.89      898.182      29242.6       8136.1      528.796
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.784838, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083172, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.884368, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0117044    0.0118595    0.0132027
      low eigenvalue method done, cpu time[sec] = 0.89424, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0119     0.013         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000643     0.013     0.993
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0130306
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.991731   0.00826852   0.00707964  0.000752799   4.2516e-05  0.000124402  6.07539e-06  0.000314924  3.10671e-06  1.86926e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.82742, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         2.84417e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133156, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.54944, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12402.1      7464.49      4866.27      5054.31      718.546      23394.1      6508.88      423.037
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.78484, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082646, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.884118, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0113621    0.0115061    0.0126313
      low eigenvalue method done, cpu time[sec] = 0.894014, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0115    0.0125         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000618    0.0125     0.994
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0124737
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992085   0.00791513   0.00678469  0.000700538  4.09116e-05  0.000116766  5.80587e-06  0.000314913  3.11785e-06  1.86929e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.82565, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1           3.413e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133338, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.55492, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10335.1      6220.41      4055.23      4211.93      598.788        19495      5424.07      352.531
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.7825, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.083229, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.882634, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0110783    0.0112135    0.0121643
      low eigenvalue method done, cpu time[sec] = 0.8925, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0112     0.012         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000598     0.012     0.994
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0120181
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992374   0.00762602   0.00654112  0.000660058  3.96181e-05   0.00011086  5.59249e-06  0.000314577  3.12815e-06  1.86932e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.82949, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         3.98183e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133276, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.55207, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8858.67      5331.78      3475.91      3610.22      513.247        16710       4649.2      302.169
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.782759, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082151, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.881515, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0108358    0.0109637      0.01177
      low eigenvalue method done, cpu time[sec] = 0.891447, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.011    0.0116         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00058    0.0116     0.994
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0116331
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.992618    0.0073817   0.00633385  0.000627331  3.85355e-05  0.000106082  5.41649e-06   0.00031404  3.13776e-06  1.86935e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.82478, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2600 K
            Well    Collision, 1/sec
              W1         4.55067e+09
      global relaxation matrix dimension = 251
      setting global matrices ... done, cpu time[sec] = 0.133884, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.55242, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            7751.34       4665.3      3041.42      3158.94      449.091      14621.3      4068.05      264.398
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.784815, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.082437, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.883301, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0106239    0.0107457    0.0114292
      low eigenvalue method done, cpu time[sec] = 0.893207, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0107    0.0113         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000566    0.0113     0.994
         *Z       ---       ---  5.44e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0113
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.99283   0.00717038   0.00615362  0.000600055  3.76055e-05  0.000102093  5.26707e-06  0.000313375  3.14678e-06  1.86938e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.8282, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2700 K
      Energy reference = 91841 1/cm
      Energy step      = 450 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -45.5 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.005951
         W1 Well: collisional kernel bandwidth = 44
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.194383
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.089851
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.094566
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.360439
         W1 Well: minimal relaxation eigenvalue = 0.0282553
         W1 Well: maximal relaxation eigenvalue = 1.12456
         W1 Well:       grid size = 250
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -20659 1/cm
         B1 Barrier:        grid size = 205
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -409 1/cm
         B2 Barrier:        grid size = 204
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 40 1/cm
         B3 Barrier:        grid size = 215
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4909 1/cm
         B4 Barrier:        grid size = 218
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6259 1/cm
         B5 Barrier: nonpositive number of states at -23359 1/cm => truncating
         B5 Barrier:        grid size = 256
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23359 1/cm
         B6 Barrier:        grid size = 201
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1390 1/cm
         B7 Barrier:        grid size = 194
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4540 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16691 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.06124, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 250
      MasterEquation::Barrier::truncate: real weight = 6.95045e+28
      MasterEquation::Barrier::truncate: effective weight = 1.42508e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -20659 -20659 3.25e+06 1.34e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -409  1.6e+19
         B2     41    1e+19
         B3  -4909 6.83e+18
         B4  -6259 7.07e+18
         B5 -20659 1.01e+18
         B6   1391  3.1e+19
         B7   4541  8.8e+18
         B8  16691  6.1e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   5.8e-17   1.2e-16  5.96e-17   2.9e-17  5.07e-21  1.08e-15  2.03e-14  2.32e-10
          R  1.72e+16         1      2.08      1.03     0.499  8.74e-05      18.5       349  3.99e+06
         P1   8.3e+15     0.482         1     0.495      0.24  4.21e-05      8.93       168  1.92e+06
         P2  1.68e+16     0.973      2.02         1     0.486  8.51e-05        18       340  3.89e+06
         P3  3.45e+16         2      4.16      2.06         1  0.000175      37.1       699     8e+06
         P4  1.97e+20  1.14e+04  2.38e+04  1.18e+04  5.71e+03         1  2.12e+05  3.99e+06  4.57e+10
         P5   9.3e+14    0.0539     0.112    0.0554    0.0269  4.72e-06         1      18.8  2.15e+05
         P6  4.94e+13   0.00286   0.00595   0.00294   0.00143   2.5e-07    0.0531         1  1.14e+04
         P7  4.32e+09   2.5e-07   5.2e-07  2.57e-07  1.25e-07  2.19e-11  4.64e-06  8.74e-05         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1   1.6e-19  3.33e-19  1.65e-19  8.01e-20   1.4e-23  2.97e-18   5.6e-17  6.41e-13
          R  6.24e+18         1      2.08      1.03     0.499  8.74e-05      18.5       349  3.99e+06
         P1     3e+18     0.482         1     0.495      0.24  4.21e-05      8.93       168  1.92e+06
         P2  6.07e+18     0.973      2.02         1     0.486  8.51e-05        18       340  3.89e+06
         P3  1.25e+19         2      4.16      2.06         1  0.000175      37.1       699     8e+06
         P4  7.13e+22  1.14e+04  2.38e+04  1.18e+04  5.71e+03         1  2.12e+05  3.99e+06  4.57e+10
         P5  3.36e+17    0.0539     0.112    0.0554    0.0269  4.72e-06         1      18.8  2.15e+05
         P6  1.79e+16   0.00286   0.00595   0.00294   0.00143   2.5e-07    0.0531         1  1.14e+04
         P7  1.56e+12   2.5e-07   5.2e-07  2.57e-07  1.25e-07  2.19e-11  4.64e-06  8.74e-05         1
   MasterEquation::set:  done, cpu time[sec] = 1.07493, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         1.11015e+08
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.132662, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50623, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             321556       200819       137204       142129        20307       622250       176770      12254.5
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.773921, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081407, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.872347, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0196018    0.0201276    0.0266875
      low eigenvalue method done, cpu time[sec] = 0.882114, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0201     0.026         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00119     0.026     0.987
         *Z       ---       ---  4.11e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0259937
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.98072    0.0192805    0.0157239    0.0026577  0.000106288    0.0004672  1.75356e-05  0.000494016  5.66069e-06  4.60067e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.76705, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         3.33045e+08
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.131678, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50418, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             107185      66939.5      45734.5      47376.3         6769       207417      58923.4      4084.84
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.774, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081384, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.871851, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0181564    0.0185896    0.0237429
      low eigenvalue method done, cpu time[sec] = 0.881162, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0186    0.0232         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00107    0.0232     0.988
         *Z       ---       ---  4.11e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0231923
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.982798    0.0172025    0.0143949   0.00202447  9.00512e-05  0.000330222  1.38553e-05  0.000507239  5.67759e-06  4.60069e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.76333, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         5.55075e+08
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.13202, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51755, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            64311.2      40163.7      27440.7      28425.8       4061.4       124450        35354       2450.9
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.771693, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081439, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.869399, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0173963    0.0177851    0.0222422
      low eigenvalue method done, cpu time[sec] = 0.879093, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0178    0.0218         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00101    0.0218     0.989
         *Z       ---       ---  4.11e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0217583
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.983861    0.0161389     0.013627   0.00176122  8.36201e-05  0.000285055  1.25438e-05  0.000513752  5.69115e-06  4.60072e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.77348, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         7.77105e+08
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.13157, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51894, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            45936.6      28688.4      19600.5      20304.1         2901      88892.8      25252.9      1750.64
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.769944, elapsed time[sec] = 1
            inverting kinetic matrices ... done, cpu time[sec] = 0.080668, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.866713, elapsed time[sec] = 1
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0168661    0.0172256    0.0212166
      low eigenvalue method done, cpu time[sec] = 0.875886, elapsed time[sec] = 1
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0172    0.0208         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000963    0.0208      0.99
         *Z       ---       ---  4.11e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0207758
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.98459    0.0154101    0.0130748   0.00160153  7.96311e-05  0.000259558  1.17707e-05  0.000517785  5.70317e-06  4.60075e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.77136, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         9.99135e+08
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.13279, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52499, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            35728.4      22313.2      15244.8      15792.1      2256.33      69138.8      19641.1      1361.61
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.771036, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081875, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.868935, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0164555    0.0167933    0.0204342
      low eigenvalue method done, cpu time[sec] = 0.878462, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0168      0.02         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000931      0.02      0.99
         *Z       ---       ---  4.11e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.020025
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.985147    0.0148532    0.0126408   0.00148957  7.67518e-05  0.000242306   1.1231e-05  0.000520512  5.71419e-06  4.60077e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.78162, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         1.11015e+09
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.132078, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52846, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            32155.6      20081.9      13720.4      14212.9       2030.7        62225        17677      1225.45
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.77128, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081325, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.86885, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0162797    0.0166085    0.0201026
      low eigenvalue method done, cpu time[sec] = 0.878357, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0166    0.0197         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000917    0.0197      0.99
         *Z       ---       ---  4.11e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0197065
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.985383     0.014617    0.0124539   0.00144449  7.55665e-05  0.000235475  1.10132e-05  0.000521556  5.71942e-06  4.60078e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.7856, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         1.66523e+09
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.132376, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.53777, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            21437.1      13387.9       9146.9      9475.26       1353.8      41483.3      11784.7      816.967
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.774488, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080992, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.871587, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0155842    0.0158786      0.01881
      low eigenvalue method done, cpu time[sec] = 0.881208, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0159    0.0185         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000863    0.0185     0.991
         *Z       ---       ---  4.11e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0184627
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.986306    0.0136945    0.0117097   0.00128102  7.11059e-05  0.000211133  1.02151e-05  0.000524843  5.74347e-06  4.60085e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.79834, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1          2.2203e+09
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.132729, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.53515, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16077.8      10040.9      6860.18      7106.45      1015.35      31112.5      8838.51      612.725
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.772719, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081158, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.870174, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0150733     0.015344    0.0178806
      low eigenvalue method done, cpu time[sec] = 0.879738, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0153    0.0176         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000825    0.0176     0.991
         *Z       ---       ---  4.11e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0175665
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.98697    0.0130297    0.0111613   0.00117438  6.80222e-05  0.000195506   9.6824e-06  0.000526283  5.76495e-06  4.60092e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.79394, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         2.77538e+09
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.13301, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.52782, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            12862.2      8032.74      5488.14      5685.16      812.281        24890      7070.81       490.18
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.773651, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080193, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.870012, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0146677    0.0149204    0.0171551
      low eigenvalue method done, cpu time[sec] = 0.879569, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0149    0.0169         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000795    0.0169     0.992
         *Z       ---       ---  4.11e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0168657
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.98749    0.0125099    0.0107265   0.00109675  6.56677e-05  0.000184196  9.28547e-06  0.000526759  5.78456e-06  4.60098e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.78687, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         3.33045e+09
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.132975, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.53592, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            10718.5      6693.95      4573.45      4737.63        676.9      20741.7      5892.34      408.484
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.767013, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080642, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.864022, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0143307    0.0145691    0.0165605
      low eigenvalue method done, cpu time[sec] = 0.873537, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0146    0.0163         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00077    0.0163     0.992
         *Z       ---       ---  4.11e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0162907
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.987917    0.0120834    0.0103663   0.00103648  6.37646e-05  0.000175428  8.97052e-06  0.000526668  5.80271e-06  4.60105e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.79043, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1         3.88553e+09
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.132787, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.53139, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9187.31      5737.67       3920.1      4060.83        580.2      17778.6      5050.58      350.129
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.774446, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081156, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.871723, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0140421    0.0142685    0.0160573
      low eigenvalue method done, cpu time[sec] = 0.881282, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0143    0.0158         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000749    0.0158     0.992
         *Z       ---       ---  4.11e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0158035
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.988278     0.011722     0.010059  0.000987662  6.21684e-05  0.000168321  8.71021e-06  0.000526218  5.81964e-06  4.60112e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.79213, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2700 K
            Well    Collision, 1/sec
              W1          4.4406e+09
      global relaxation matrix dimension = 250
      setting global matrices ... done, cpu time[sec] = 0.133059, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.69667, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             8038.9      5020.46      3430.09      3553.22      507.675      15556.2      4419.25      306.363
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.775687, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.081298, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.873308, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0137894    0.0140057    0.0156215
      low eigenvalue method done, cpu time[sec] = 0.882846, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.014    0.0154         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000731    0.0154     0.992
         *Z       ---       ---  4.11e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0153812
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.988591    0.0114088   0.00979106  0.000946899  6.07943e-05  0.000162377  8.48883e-06  0.000525529  5.83555e-06  4.60118e-10

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.96021, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2800 K
      Energy reference = 94621 1/cm
      Energy step      = 467 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -43.1 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006221
         W1 Well: collisional kernel bandwidth = 43
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.188413
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.0886
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.094688
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.357389
         W1 Well: minimal relaxation eigenvalue = 0.0274423
         W1 Well: maximal relaxation eigenvalue = 1.14194
         W1 Well:       grid size = 248
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -21194 1/cm
         B1 Barrier:        grid size = 203
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -180 1/cm
         B2 Barrier:        grid size = 203
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -180 1/cm
         B3 Barrier:        grid size = 213
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4849 1/cm
         B4 Barrier:        grid size = 216
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6250 1/cm
         B5 Barrier: nonpositive number of states at -23997 1/cm => truncating
         B5 Barrier:        grid size = 254
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23996 1/cm
         B6 Barrier:        grid size = 200
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1220 1/cm
         B7 Barrier:        grid size = 193
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4489 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16631 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.04978, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 248
      MasterEquation::Barrier::truncate: real weight = 6.84327e+28
      MasterEquation::Barrier::truncate: effective weight = 1.45612e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -21194 -21194 2.37e+06 1.72e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -180 2.07e+19
         B2   -180 1.34e+19
         B3  -4849 9.57e+18
         B4  -6250 9.89e+18
         B5 -21194 1.42e+18
         B6   1221  4.1e+19
         B7   4490 1.19e+19
         B8  16632 8.76e+17
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.41e-17  7.17e-17   3.8e-17  1.91e-17  4.74e-21  5.94e-16  1.05e-14  9.82e-11
          R  2.93e+16         1       2.1      1.11      0.56  0.000139      17.4       309  2.88e+06
         P1  1.39e+16     0.476         1      0.53     0.266  6.61e-05      8.28       147  1.37e+06
         P2  2.63e+16     0.897      1.89         1     0.503  0.000125      15.6       277  2.58e+06
         P3  5.24e+16      1.79      3.75      1.99         1  0.000248      31.1       552  5.14e+06
         P4  2.11e+20   7.2e+03  1.51e+04  8.02e+03  4.03e+03         1  1.25e+05  2.22e+06  2.07e+10
         P5  1.68e+15    0.0574     0.121     0.064    0.0322  7.98e-06         1      17.7  1.65e+05
         P6  9.49e+13   0.00324    0.0068   0.00361   0.00181   4.5e-07    0.0564         1  9.32e+03
         P7  1.02e+10  3.47e-07  7.31e-07  3.87e-07  1.95e-07  4.83e-11  6.05e-06  0.000107         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  9.02e-20   1.9e-19  1.01e-19  5.05e-20  1.25e-23  1.57e-18  2.79e-17   2.6e-13
          R  1.11e+19         1       2.1      1.11      0.56  0.000139      17.4       309  2.88e+06
         P1  5.27e+18     0.476         1      0.53     0.266  6.61e-05      8.28       147  1.37e+06
         P2  9.95e+18     0.897      1.89         1     0.503  0.000125      15.6       277  2.58e+06
         P3  1.98e+19      1.79      3.75      1.99         1  0.000248      31.1       552  5.14e+06
         P4  7.98e+22   7.2e+03  1.51e+04  8.02e+03  4.03e+03         1  1.25e+05  2.22e+06  2.07e+10
         P5  6.37e+17    0.0574     0.121     0.064    0.0322  7.98e-06         1      17.7  1.65e+05
         P6  3.59e+16   0.00324    0.0068   0.00361   0.00181   4.5e-07    0.0564         1  9.32e+03
         P7  3.85e+12  3.47e-07  7.31e-07  3.87e-07  1.95e-07  4.83e-11  6.05e-06  0.000107         1
   MasterEquation::set:  done, cpu time[sec] = 1.06337, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         1.08427e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130437, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47554, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             332297       215095       153945       158962      22835.8       659084       190988      14087.5
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.749662, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080202, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.845854, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0247105     0.025608    0.0360893
      low eigenvalue method done, cpu time[sec] = 0.855045, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0256    0.0348         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00156    0.0348     0.982
         *Z       ---       ---  3.09e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0348322
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.971973    0.0280272    0.0229416   0.00379087  0.000156028  0.000666841  2.54813e-05    0.0007854  9.98988e-06  1.05638e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70277, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1          3.2528e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130654, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50649, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             110766      71698.2        51315      52987.2      7611.93       219695      63662.7      4695.82
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.758467, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079512, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.853753, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.023052    0.0238026    0.0323616
      low eigenvalue method done, cpu time[sec] = 0.863101, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0238    0.0313         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00141    0.0313     0.984
         *Z       ---       ---  3.09e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0313472
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.974777     0.025223     0.021156   0.00292175  0.000133845  0.000478526  2.04365e-05  0.000805682  1.00184e-05  1.05638e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.74326, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         5.42133e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130245, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48689, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            66459.3      43018.9        30789      31792.3      4567.16       131817      38197.6      2817.49
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.755089, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079709, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.850891, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0221709      0.02285    0.0304439
      low eigenvalue method done, cpu time[sec] = 0.860128, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0228    0.0295         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00133    0.0295     0.985
         *Z       ---       ---  3.09e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0295444
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.976228    0.0237724    0.0201097     0.002557  0.000125028  0.000416146  1.86321e-05   0.00081594  1.00411e-05  1.05639e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.71927, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         7.58986e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.12982, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50962, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            47470.9      30727.8      21992.1      22708.8      3262.25      94154.8        27284       2012.5
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.753434, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079087, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.848535, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0215537    0.0221852    0.0291274
      low eigenvalue method done, cpu time[sec] = 0.85814, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0222    0.0283         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00128    0.0283     0.986
         *Z       ---       ---  3.09e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.028303
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.977226    0.0227736    0.0193525   0.00233496  0.000119546  0.000380829  1.75657e-05  0.000822449  1.00611e-05  1.05639e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.73937, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         9.75839e+08
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.129938, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50196, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            36921.8      23899.4        17105      17662.4      2537.31      73231.5      21220.9      1565.27
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.755869, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079587, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.851396, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0210741    0.0216702    0.0281203
      low eigenvalue method done, cpu time[sec] = 0.860874, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0217    0.0274         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00123    0.0274     0.986
         *Z       ---       ---  3.09e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0273512
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.977992    0.0220077    0.0187548   0.00217891   0.00011558  0.000356878  1.68198e-05  0.000826966  1.00795e-05   1.0564e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.735, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         1.08427e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130212, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49576, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            33229.7      21509.5      15394.5      15896.2      2283.58      65908.4      19098.8      1408.75
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.751987, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079378, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.847249, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0208684    0.0214497    0.0276927
      low eigenvalue method done, cpu time[sec] = 0.856441, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0214    0.0269         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00122    0.0269     0.986
         *Z       ---       ---  3.09e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0269464
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.978318     0.021682    0.0184967   0.00211598  0.000113945   0.00034738  1.65183e-05  0.000828733  1.00881e-05   1.0564e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.72348, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1          1.6264e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130054, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.511, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22153.1      14339.6        10263      10597.4      1522.39      43938.9      12732.5      939.165
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.756791, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080182, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.853067, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0200524    0.0205772     0.026021
      low eigenvalue method done, cpu time[sec] = 0.862273, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0206    0.0254         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00115    0.0254     0.987
         *Z       ---       ---  3.09e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0253611
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.979594    0.0204064    0.0174655   0.00188729  0.000107779  0.000313463  1.54114e-05  0.000834573   1.0128e-05  1.05642e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.74584, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         2.16853e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.1294, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.5215, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            16614.8      10754.7      7697.24      7948.08      1141.79      32954.2       9549.4      704.373
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.754894, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079215, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.850024, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0194507    0.0199361    0.0248144
      low eigenvalue method done, cpu time[sec] = 0.859516, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0199    0.0242         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0011    0.0242     0.988
         *Z       ---       ---  3.09e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0242136
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.980517    0.0194831    0.0167017   0.00173763  0.000103502  0.000291616  1.46703e-05  0.000837512  1.01636e-05  1.05643e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.75181, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         2.71066e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130045, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50747, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13291.9      8603.78      6157.79      6358.47      913.431      26363.3      7639.52      563.499
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.759511, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079395, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.854815, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0189717     0.019427    0.0238697
      low eigenvalue method done, cpu time[sec] = 0.864457, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0194    0.0233         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00106    0.0233     0.988
         *Z       ---       ---  3.09e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0233132
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.981241    0.0187586    0.0160939    0.0016284  0.000100227  0.000275763  1.41167e-05   0.00083891  1.01961e-05  1.05645e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.74528, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1          3.2528e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130945, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51306, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11076.6      7169.82       5131.5      5298.72      761.193      21969.5      6366.27      469.582
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.757159, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080235, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.853312, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0185726    0.0190039    0.0230935
      low eigenvalue method done, cpu time[sec] = 0.862565, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.019    0.0226         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00103    0.0226     0.989
         *Z       ---       ---  3.09e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0225723
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.981838    0.0181624    0.0155888   0.00154343  9.75736e-05  0.000263446  1.36765e-05  0.000839384  1.02262e-05  1.05646e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.74987, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         3.79493e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130369, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51057, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9494.19      6145.56      4398.42      4541.76      652.451        18831       5456.8      402.499
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.756431, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.080301, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.852824, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0182301    0.0186413    0.0224353
      low eigenvalue method done, cpu time[sec] = 0.862123, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0186    0.0219         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     0.001    0.0219     0.989
         *Z       ---       ---  3.09e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.021943
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.982344     0.017656    0.0151566   0.00147446  9.53432e-05  0.000253442  1.33119e-05   0.00083926  1.02543e-05  1.05648e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.74692, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2800 K
            Well    Collision, 1/sec
              W1         4.33706e+09
      global relaxation matrix dimension = 248
      setting global matrices ... done, cpu time[sec] = 0.130338, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51969, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8307.41      5377.36      3848.62      3974.04      570.895      16477.1       4774.7      352.187
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.758035, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079657, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.853579, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0179298    0.0183238    0.0218641
      low eigenvalue method done, cpu time[sec] = 0.863168, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0183    0.0214         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0  0.000982    0.0214     0.989
         *Z       ---       ---  3.09e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0213962
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.982784    0.0172161    0.0147791   0.00141678  9.34194e-05   0.00024506  1.30012e-05  0.000838729  1.02808e-05  1.05649e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.75618, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 2900 K
      Energy reference = 97401 1/cm
      Energy step      = 483 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -40.7 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006218
         W1 Well: collisional kernel bandwidth = 43
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.186679
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.086863
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.092304
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.352454
         W1 Well: minimal relaxation eigenvalue = 0.0266739
         W1 Well: maximal relaxation eigenvalue = 1.16557
         W1 Well:       grid size = 247
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -21900 1/cm
         B1 Barrier:        grid size = 202
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -165 1/cm
         B2 Barrier:        grid size = 202
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = -165 1/cm
         B3 Barrier:        grid size = 212
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4995 1/cm
         B4 Barrier:        grid size = 215
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6444 1/cm
         B5 Barrier: nonpositive number of states at -23349 1/cm => truncating
         B5 Barrier:        grid size = 250
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23349 1/cm
         B6 Barrier:        grid size = 199
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1283 1/cm
         B7 Barrier:        grid size = 192
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4664 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16739 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.0369, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 247
      MasterEquation::Barrier::truncate: real weight = 6.8442e+28
      MasterEquation::Barrier::truncate: effective weight = 1.50621e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -21900 -21900 1.54e+06 2.19e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -165 2.65e+19
         B2   -165 1.78e+19
         B3  -4995 1.33e+19
         B4  -6444 1.37e+19
         B5 -21900 1.98e+18
         B6   1284 5.38e+19
         B7   4665 1.59e+19
         B8  16740 1.24e+18
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  2.07e-17  4.41e-17  2.49e-17  1.29e-17  4.43e-21   3.4e-16  5.71e-15  4.39e-11
          R  4.82e+16         1      2.13       1.2     0.623  0.000214      16.4       275  2.12e+06
         P1  2.27e+16      0.47         1     0.565     0.293    0.0001      7.71       129  9.96e+05
         P2  4.01e+16     0.832      1.77         1     0.518  0.000178      13.6       229  1.76e+06
         P3  7.74e+16       1.6      3.42      1.93         1  0.000343      26.3       442   3.4e+06
         P4  2.26e+20  4.68e+03  9.96e+03  5.62e+03  2.92e+03         1  7.67e+04  1.29e+06  9.91e+09
         P5  2.94e+15     0.061      0.13    0.0733     0.038   1.3e-05         1      16.8  1.29e+05
         P6  1.75e+14   0.00363   0.00773   0.00437   0.00226  7.76e-07    0.0596         1   7.7e+03
         P7  2.28e+10  4.72e-07     1e-06  5.67e-07  2.94e-07  1.01e-10  7.74e-06   0.00013         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  5.29e-20  1.13e-19  6.36e-20   3.3e-20  1.13e-23  8.68e-19  1.46e-17  1.12e-13
          R  1.89e+19         1      2.13       1.2     0.623  0.000214      16.4       275  2.12e+06
         P1  8.88e+18      0.47         1     0.565     0.293    0.0001      7.71       129  9.96e+05
         P2  1.57e+19     0.832      1.77         1     0.518  0.000178      13.6       229  1.76e+06
         P3  3.03e+19       1.6      3.42      1.93         1  0.000343      26.3       442   3.4e+06
         P4  8.85e+22  4.68e+03  9.96e+03  5.62e+03  2.92e+03         1  7.67e+04  1.29e+06  9.91e+09
         P5  1.15e+18     0.061      0.13    0.0733     0.038   1.3e-05         1      16.8  1.29e+05
         P6  6.87e+16   0.00363   0.00773   0.00437   0.00226  7.76e-07    0.0596         1   7.7e+03
         P7  8.92e+12  4.72e-07     1e-06  5.67e-07  2.94e-07  1.01e-10  7.74e-06   0.00013         1
   MasterEquation::set:  done, cpu time[sec] = 1.05048, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         1.05986e+08
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.129418, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46996, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             342277       229393       171905       176963      25554.1       695238       205320      16076.9
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.746814, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079016, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.841735, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0305487    0.0320149    0.0476195
      low eigenvalue method done, cpu time[sec] = 0.851307, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.032    0.0455         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0     0.002    0.0455     0.977
         *Z       ---       ---  2.38e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0454549
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.960772    0.0392279    0.0322427   0.00519051   0.00022091  0.000917696   3.5721e-05   0.00120094  1.68456e-05  2.27962e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.69258, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         3.17958e+08
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.130607, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47292, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             114092      76464.2      57301.7      58987.6      8518.04       231746      68440.1      5358.97
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.746474, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078892, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.841449, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.028671    0.0299131    0.0429954
      low eigenvalue method done, cpu time[sec] = 0.850663, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0299    0.0412         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00181    0.0412     0.979
         *Z       ---       ---  2.38e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.041223
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.964424    0.0355757    0.0299167   0.00404971  0.000191644  0.000667806  2.90448e-05   0.00123052  1.68915e-05  2.27963e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.6961, elapsed time[sec] = 1
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1          5.2993e+08
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.129039, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48372, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            68455.4      45878.5        34381      35392.5      5110.82       139048        41064      3215.38
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.748196, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078532, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.842758, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.027667    0.0287986    0.0406002
      low eigenvalue method done, cpu time[sec] = 0.852134, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0288     0.039         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00172     0.039      0.98
         *Z       ---       ---  2.38e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0390162
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.966329    0.0336712    0.0285414   0.00356588  0.000180002  0.000584799   2.6653e-05   0.00124576  1.69277e-05  2.27964e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70564, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         7.41902e+08
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.128831, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49845, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            48896.7      32770.4      24557.9      25280.4      3650.59      99319.7      29331.5       2296.7
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.74406, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079017, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.838896, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.026961    0.0280189      0.03895
      low eigenvalue method done, cpu time[sec] = 0.848138, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0     0.028    0.0375         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00165    0.0375     0.981
         *Z       ---       ---  2.38e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0374898
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.967646    0.0323539    0.0275409   0.00327007   0.00017275  0.000537698  2.52369e-05   0.00125561  1.69596e-05  2.27965e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.71575, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         9.53874e+08
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.129102, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.4888, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            38030.8      25488.1      19100.6      19662.5      2839.35      77248.7      22813.4      1786.32
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.746109, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078972, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.841124, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0264111    0.0274137    0.0376842
      low eigenvalue method done, cpu time[sec] = 0.850296, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0274    0.0363         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0016    0.0363     0.982
         *Z       ---       ---  2.38e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0363157
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.968659    0.0313407    0.0267483   0.00306158  0.000167496  0.000505696  2.42449e-05   0.00126259  1.69888e-05  2.27967e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70785, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         1.05986e+09
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.129065, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48942, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            34227.7      22939.3      17190.5      17696.3      2555.41      69523.8        20532      1607.69
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.747569, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078758, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.842223, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0261749    0.0271543    0.0371458
      low eigenvalue method done, cpu time[sec] = 0.851296, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0272    0.0358         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00158    0.0358     0.982
         *Z       ---       ---  2.38e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0358154
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.969091    0.0309089    0.0264052   0.00297736  0.000165327  0.000492991  2.38435e-05   0.00126536  1.70026e-05  2.27967e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70915, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         1.58979e+09
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.129232, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50153, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            22818.5      15292.8      11460.3      11797.5      1703.61      46349.2        13688      1071.79
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.746151, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078836, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.840706, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0252355     0.026126    0.0350361
      low eigenvalue method done, cpu time[sec] = 0.850117, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0261    0.0339         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0015    0.0339     0.983
         *Z       ---       ---  2.38e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0338501
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.970787    0.0292129      0.02503   0.00267054  0.000157133  0.000447529  2.23674e-05   0.00127483  1.70658e-05   2.2797e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.7213, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         2.11972e+09
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.128784, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50093, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17113.9      11469.6      8595.26      8848.14      1277.71      34761.9        10266      803.845
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.746977, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07851, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.841265, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0245405    0.0253686    0.0335079
      low eigenvalue method done, cpu time[sec] = 0.850707, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0254    0.0324         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00143    0.0324     0.984
         *Z       ---       ---  2.38e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0324215
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.97202      0.02798    0.0240068   0.00246905  0.000151431  0.000418161  2.13763e-05   0.00128002  1.71222e-05  2.27973e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.72096, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         2.64965e+09
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.128936, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50845, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            13691.1       9175.7      6876.21      7078.51      1022.16      27809.5      8212.81      643.076
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.746156, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079056, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.840975, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0239857     0.024766    0.0323082
      low eigenvalue method done, cpu time[sec] = 0.850597, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0248    0.0313         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00139    0.0313     0.984
         *Z       ---       ---  2.38e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.031297
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.97299    0.0270095    0.0231896    0.0023216  0.000147055    0.0003968  2.06343e-05   0.00128288  1.71736e-05  2.27976e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.7288, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         3.17958e+09
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.129499, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51146, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11409.2      7646.42      5730.17      5898.76      851.804      23174.6      6844.01      535.897
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.746077, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078355, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.840192, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0235225    0.0242643    0.0313203
      low eigenvalue method done, cpu time[sec] = 0.850018, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0243    0.0304         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00135    0.0304     0.985
         *Z       ---       ---  2.38e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0303692
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.973791    0.0262088    0.0225087   0.00220663  0.000143501   0.00038017   2.0043e-05   0.00128434  1.72212e-05  2.27979e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.73304, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         3.70951e+09
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.129197, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.50835, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            9779.35      6554.07      4911.58      5056.08      730.118      19863.9      5866.29       459.34
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.746049, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078781, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.84123, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0231243    0.0238339    0.0304809
      low eigenvalue method done, cpu time[sec] = 0.850919, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0238    0.0296         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00132    0.0296     0.985
         *Z       ---       ---  2.38e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0295793
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.974473    0.0255271    0.0219247   0.00211315  0.000140509  0.000366639  1.95525e-05   0.00128487  1.72658e-05  2.27982e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.72979, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 2900 K
            Well    Collision, 1/sec
              W1         4.23944e+09
      global relaxation matrix dimension = 247
      setting global matrices ... done, cpu time[sec] = 0.129552, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.51216, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8556.93      5734.82      4297.63      4424.07      638.853      17380.9         5133      401.923
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.748805, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.079198, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.843919, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0227745    0.0234566    0.0297513
      low eigenvalue method done, cpu time[sec] = 0.853714, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0235    0.0289         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00129    0.0289     0.985
         *Z       ---       ---  2.38e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0288917
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.975066    0.0249337    0.0214134   0.00203484  0.000137923  0.000355285  1.91339e-05   0.00128476  1.73076e-05  2.27985e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.73745, elapsed time[sec] = 0
   MasterEquation::set:  starts
      Temperature      = 3000 K
      Energy reference = 100181 1/cm
      Energy step      = 500 1/cm
      setting wells, barriers, and bimolecular starts
         W1 Well: average energy = -38.3 kcal/mol
         W1 Well: density of states done, elapsed time[sec] = 0.006229
         W1 Well: collisional kernel bandwidth = 43
         W1 Well: collisional energy transfer kernel done, elapsed time[sec] = 0.187124
         W1 Well: relaxation modes basis done, elapsed time[sec] = 0.085994
         W1 Well: kernel in relaxation modes basis done, elapsed time[sec] = 0.093802
         W1 Well: relaxation eigenvalues done, elapsed time[sec] = 0.350049
         W1 Well: minimal relaxation eigenvalue = 0.0259611
         W1 Well: maximal relaxation eigenvalue = 1.1991
         W1 Well:       grid size = 246
         W1 Well:      real depth = -31566 1/cm
         W1 Well: effective depth = -22818 1/cm
         B1 Barrier:        grid size = 201
         B1 Barrier:      real height = 0 1/cm
         B1 Barrier: effective height = -318 1/cm
         B2 Barrier:        grid size = 200
         B2 Barrier:      real height = 213 1/cm
         B2 Barrier: effective height = 181 1/cm
         B3 Barrier:        grid size = 210
         B3 Barrier:      real height = -4600 1/cm
         B3 Barrier: effective height = -4818 1/cm
         B4 Barrier:        grid size = 213
         B4 Barrier:      real height = -6176 1/cm
         B4 Barrier: effective height = -6318 1/cm
         B5 Barrier: nonpositive number of states at -23319 1/cm => truncating
         B5 Barrier:        grid size = 247
         B5 Barrier:      real height = -24450 1/cm
         B5 Barrier: effective height = -23318 1/cm
         B6 Barrier:        grid size = 198
         B6 Barrier:      real height = 1504 1/cm
         B6 Barrier: effective height = 1181 1/cm
         B7 Barrier:        grid size = 191
         B7 Barrier:      real height = 4718 1/cm
         B7 Barrier: effective height = 4681 1/cm
         B8 Barrier:        grid size = 167
         B8 Barrier:      real height = 16776 1/cm
         B8 Barrier: effective height = 16681 1/cm
      setting wells, barriers, and bimolecular done, cpu time[sec] = 1.0386, elapsed time[sec] = 0
      B5 barrier top is lower than the bottom of the well it connects => truncating
      MasterEquation::Barrier::truncate: grid size = 246
      MasterEquation::Barrier::truncate: real weight = 6.93933e+28
      MasterEquation::Barrier::truncate: effective weight = 1.58089e+26
      Bound Species (D1/D2 - density of states at dissociation energy (DE)/reference energy):
       Name  Depth     DE      *D1      *D2
              1/cm   1/cm       cm       cm
         W1 -22818 -22818 8.46e+05 2.77e+16
      Well-to-Bimolecular Barriers (N - number of states at the reference energy):
       Name Height       *N
              1/cm         
         B1   -318 3.37e+19
         B2    182 2.34e+19
         B3  -4818 1.83e+19
         B4  -6318 1.88e+19
         B5 -22818 2.73e+18
         B6   1182 7.01e+19
         B7   4682 2.11e+19
         B8  16682 1.75e+18
      Effective equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  1.29e-17  2.78e-17  1.67e-17   8.9e-18  4.13e-21     2e-16  3.19e-15  2.06e-11
          R  7.74e+16         1      2.15      1.29     0.689   0.00032      15.5       247  1.59e+06
         P1  3.59e+16     0.464         1     0.599      0.32  0.000148      7.19       115  7.38e+05
         P2     6e+16     0.775      1.67         1     0.534  0.000248        12       191  1.23e+06
         P3  1.12e+17      1.45      3.13      1.87         1  0.000464      22.5       359  2.31e+06
         P4  2.42e+20  3.13e+03  6.74e+03  4.04e+03  2.15e+03         1  4.85e+04  7.72e+05  4.98e+09
         P5  4.99e+15    0.0645     0.139    0.0833    0.0444  2.06e-05         1      15.9  1.03e+05
         P6  3.14e+14   0.00405   0.00873   0.00523   0.00279  1.29e-06    0.0628         1  6.44e+03
         P7  4.87e+10  6.29e-07  1.35e-06  8.11e-07  4.33e-07  2.01e-10  9.74e-06  0.000155         1
      Real equilibrium constants(bimolecular units - cm^3):
        Q/Q        W1         R        P1        P2        P3        P4        P5        P6        P7
         W1         1  3.22e-20  6.94e-20  4.16e-20  2.22e-20  1.03e-23  4.99e-19  7.95e-18  5.12e-14
          R  3.11e+19         1      2.15      1.29     0.689   0.00032      15.5       247  1.59e+06
         P1  1.44e+19     0.464         1     0.599      0.32  0.000148      7.19       115  7.38e+05
         P2  2.41e+19     0.775      1.67         1     0.534  0.000248        12       191  1.23e+06
         P3  4.51e+19      1.45      3.13      1.87         1  0.000464      22.5       359  2.31e+06
         P4  9.72e+22  3.13e+03  6.74e+03  4.04e+03  2.15e+03         1  4.85e+04  7.72e+05  4.98e+09
         P5     2e+18    0.0645     0.139    0.0833    0.0444  2.06e-05         1      15.9  1.03e+05
         P6  1.26e+17   0.00405   0.00873   0.00523   0.00279  1.29e-06    0.0628         1  6.44e+03
         P7  1.95e+13  6.29e-07  1.35e-06  8.11e-07  4.33e-07  2.01e-10  9.74e-06  0.000155         1
   MasterEquation::set:  done, cpu time[sec] = 1.05175, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.1 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         1.03681e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.130503, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.44776, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             351506       243669       191106       196156      28465.8       730612       219715      18224.2
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.738803, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.086125, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.840639, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0372516    0.0395742    0.0617594
      low eigenvalue method done, cpu time[sec] = 0.849841, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0396    0.0582         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00253    0.0582      0.97
         *Z       ---       ---  1.87e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.058167
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.946831    0.0531685      0.04377   0.00700489  0.000302436   0.00121936  4.84146e-05   0.00176992  2.72724e-05  4.65285e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.66867, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.3 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         3.11042e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.127592, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45638, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
             117169      81222.9      63702.1      65385.3       9488.6       243537      73238.2      6074.73
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.740401, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078708, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.834885, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0351216    0.0371083    0.0560445
      low eigenvalue method done, cpu time[sec] = 0.844031, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0371    0.0531         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0023    0.0531     0.973
         *Z       ---       ---  1.87e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0530702
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.95149    0.0485098    0.0408588   0.00547314  0.000265424  0.000900901  3.99334e-05   0.00181187  2.73434e-05  4.65287e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.66561, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         5.18403e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128501, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.45264, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            70301.3      48733.8      38221.3      39231.2      5693.16       146122      43942.9      3644.84
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.736888, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07837, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.831465, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0339834     0.035804    0.0530858
      low eigenvalue method done, cpu time[sec] = 0.840655, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0358    0.0504         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00218    0.0504     0.974
         *Z       ---       ---  1.87e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0504098
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.953922    0.0460779     0.039113   0.00483482  0.000250601  0.000794339   3.6875e-05   0.00183384   2.7399e-05   4.6529e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.66006, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.7 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         7.25764e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.127795, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.4745, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            50215.2      34809.8      27300.9      28022.3      4066.54       104373      31387.8      2603.46
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.739983, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077889, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.833826, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0331823    0.0348914    0.0510446
      low eigenvalue method done, cpu time[sec] = 0.843223, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0349    0.0486         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0    0.0021    0.0486     0.975
         *Z       ---       ---  1.87e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0485656
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R       1.1
         P1       1.1
         P2       1.1
         P3       1.1
         P4       1.1
         P5       1.1
         P6       1.1
         P7       1.1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.955608    0.0443922    0.0378358   0.00444596  0.000241343  0.000733688  3.50596e-05   0.00184827  2.74477e-05  4.65292e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.68276, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 0.9 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         9.33125e+08
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128315, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46441, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            39056.3      27074.3        21234      21795.1      3162.87      81179.1      24412.7      2024.91
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.740461, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.07862, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.835521, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0325575    0.0341828    0.0494767
      low eigenvalue method done, cpu time[sec] = 0.844716, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0342    0.0471         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00204    0.0471     0.976
         *Z       ---       ---  1.87e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0471442
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.956907    0.0430929    0.0368202   0.00417224  0.000234622  0.000692392  3.37856e-05   0.00185864  2.74921e-05  4.65294e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.67537, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         1.03681e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.127721, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.46018, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            35150.6      24366.9      19110.6      19615.6      2846.58      73061.2      21971.5      1822.42
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.735182, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078475, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.829373, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0322889     0.033879    0.0488092
      low eigenvalue method done, cpu time[sec] = 0.838435, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0339    0.0465         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00201    0.0465     0.976
         *Z       ---       ---  1.87e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0465377
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.957461    0.0425386    0.0363796    0.0040617  0.000231844  0.000675976  3.32695e-05   0.00186282  2.75131e-05  4.65295e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.66419, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 1.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         1.55521e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.127639, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47758, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            23433.8      16244.6      12740.4      13077.1      1897.72      48707.5      14647.6      1214.95
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.740421, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078004, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.834421, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.031219    0.0326736    0.0461891
      low eigenvalue method done, cpu time[sec] = 0.843808, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0327    0.0441         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00191    0.0441     0.978
         *Z       ---       ---  1.87e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0441499
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.959644    0.0403559    0.0346079   0.00365908   0.00022133  0.000617126  3.13684e-05   0.00187747  2.76092e-05  4.65301e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.68732, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         2.07361e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.1277, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.47708, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            17575.3      12183.4      9555.32      9807.79      1423.29      36530.6      10985.7       911.21
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.743557, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077935, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.837237, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0304256    0.0317848    0.0442865
      low eigenvalue method done, cpu time[sec] = 0.846914, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0318    0.0424         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00184    0.0424     0.979
         *Z       ---       ---  1.87e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0424084
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.961236    0.0387641     0.033284   0.00339452  0.000213994  0.000579003  3.00888e-05   0.00188597  2.76948e-05  4.65307e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.69076, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 2.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         2.59201e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128737, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48479, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            14060.3      9746.75      7644.25      7846.23      1138.63      29224.5      8788.59      728.968
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.741227, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078356, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.835674, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0297912    0.0310768    0.0427898
      low eigenvalue method done, cpu time[sec] = 0.845001, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0311     0.041         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00178     0.041     0.979
         *Z       ---       ---  1.87e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.041034
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.962492    0.0375078    0.0322233   0.00320078   0.00020835  0.000551213  2.91288e-05   0.00189111  2.77729e-05  4.65312e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.69803, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         3.11042e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128353, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48779, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            11716.9      8122.29      6370.21      6538.53       948.86      24353.7      7323.82      607.473
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.74177, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078412, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.835895, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0292606    0.0304869    0.0415553
      low eigenvalue method done, cpu time[sec] = 0.845266, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0305    0.0399         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00173    0.0399      0.98
         *Z       ---       ---  1.87e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0398973
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.963531    0.0364688     0.031337   0.00304957  0.000203758  0.000529538  2.83625e-05   0.00189418  2.78452e-05  4.65318e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70048, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 3.5 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         3.62882e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.129045, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.49626, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
              10043      6961.97      5460.18      5604.45      813.308      20874.6      6277.56      520.691
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.741318, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.077729, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.834945, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0    0.0288038    0.0299803    0.0405046
      low eigenvalue method done, cpu time[sec] = 0.844608, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0      0.03    0.0389         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00169    0.0389      0.98
         *Z       ---       ---  1.87e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0389278
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1     0.964417    0.0355827    0.0305752    0.0029265  0.000199883  0.000511874  2.77257e-05   0.00189587  2.79128e-05  4.65324e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.70872, elapsed time[sec] = 0
   MasterEquation::direct_diagonalization_method:  starts
      Pressure = 4 atm	 Temperature = 3000 K
            Well    Collision, 1/sec
              W1         4.14722e+09
      global relaxation matrix dimension = 246
      setting global matrices ... done, cpu time[sec] = 0.128146, elapsed time[sec] = 0
      diagonalizing global relaxation matrix ... done, cpu time[sec] = 1.48878, elapsed time[sec] = 0
      microscopic rate coefficients (at reference energy) over collision frequency:
              W1->R       W1->P1       W1->P2       W1->P3       W1->P4       W1->P5       W1->P6       W1->P7
            8787.66      6091.72      4777.66      4903.89      711.645      18265.3      5492.87      455.605
      some eigenvalues are too small: using low eigenvalue method
      low eigenvalue method starts
         MasterEquation::low_eigenvalue_matrix:  starts
            setting up kinetic matrices ... done, cpu time[sec] = 0.73993, elapsed time[sec] = 0
            inverting kinetic matrices ... done, cpu time[sec] = 0.078299, elapsed time[sec] = 0
         MasterEquation::low_eigenvalue_matrix:  done, cpu time[sec] = 0.83417, elapsed time[sec] = 0
         direct-diagonalization(DD)-versus-low-eigenvalue(LE) eigenvalues
             L      DD eval      LE eval     LE proj
             0     0.028402    0.0295359    0.0395901
      low eigenvalue method done, cpu time[sec] = 0.843561, elapsed time[sec] = 0
      eigenvector populations normalized:
          L        *R        *P        W1
          0    0.0295    0.0381         1
      *R - eigenvalue over the relaxation limit
      *P - eigenvector projection squared on the relaxation subspace (= 1 -F_ne)
      eigenvector projections:
          L        *Q        *P        W1
          0   0.00166    0.0381     0.981
         *Z       ---       ---  1.87e+19
      *Q - eigenvalue over the collision frequency in first well
      *P - eigenvector projection squared on the relaxation subspace (= 1 - F_ne)
      *Z - well partition function square root
      isomers-to-bimolecular equilibrium coefficients (kappa matrix):
        W\P        R       P1       P2       P3       P4       P5       P6       P7
         W1        0        0        0        0        0        0        0        0
      projection error = 0.0380824
      Wa->Wb/Wb->Wa rate constants ratios:
      Wb\Wa        W1
         W1         1
      W->P/P->W rate constants ratios:
        P\W        W1
          R         1
         P1         1
         P2         1
         P3         1
         P4         1
         P5         1
         P6         1
         P7         1
      hot energies # = 0
      prompt isomerization/dissociation:
        W\W,P           W1  Total Diss.            R           P1           P2           P3           P4           P5           P6           P7
           W1      0.96519    0.0348099     0.029907   0.00282331   0.00019653   0.00049703  2.71816e-05    0.0018966  2.79764e-05   4.6533e-09

   MasterEquation::direct_diagonalization_method:  done, cpu time[sec] = 2.69998, elapsed time[sec] = 0
rate calculation done, cpu time[sec] = 5073.06, elapsed time[sec] = 101
